// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgs/driver-station.proto

#ifndef PROTOBUF_msgs_2fdriver_2dstation_2eproto__INCLUDED
#define PROTOBUF_msgs_2fdriver_2dstation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgs_2fdriver_2dstation_2eproto();
void protobuf_AssignDesc_msgs_2fdriver_2dstation_2eproto();
void protobuf_ShutdownFile_msgs_2fdriver_2dstation_2eproto();

class DriverStation;

enum DriverStation_State {
  DriverStation_State_AUTO = 0,
  DriverStation_State_TELEOP = 1,
  DriverStation_State_TEST = 2
};
bool DriverStation_State_IsValid(int value);
const DriverStation_State DriverStation_State_State_MIN = DriverStation_State_AUTO;
const DriverStation_State DriverStation_State_State_MAX = DriverStation_State_TEST;
const int DriverStation_State_State_ARRAYSIZE = DriverStation_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* DriverStation_State_descriptor();
inline const ::std::string& DriverStation_State_Name(DriverStation_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    DriverStation_State_descriptor(), value);
}
inline bool DriverStation_State_Parse(
    const ::std::string& name, DriverStation_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DriverStation_State>(
    DriverStation_State_descriptor(), name, value);
}
// ===================================================================

class DriverStation : public ::google::protobuf::Message {
 public:
  DriverStation();
  virtual ~DriverStation();

  DriverStation(const DriverStation& from);

  inline DriverStation& operator=(const DriverStation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DriverStation& default_instance();

  void Swap(DriverStation* other);

  // implements Message ----------------------------------------------

  DriverStation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DriverStation& from);
  void MergeFrom(const DriverStation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DriverStation_State State;
  static const State AUTO = DriverStation_State_AUTO;
  static const State TELEOP = DriverStation_State_TELEOP;
  static const State TEST = DriverStation_State_TEST;
  static inline bool State_IsValid(int value) {
    return DriverStation_State_IsValid(value);
  }
  static const State State_MIN =
    DriverStation_State_State_MIN;
  static const State State_MAX =
    DriverStation_State_State_MAX;
  static const int State_ARRAYSIZE =
    DriverStation_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return DriverStation_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return DriverStation_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return DriverStation_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bool enabled = 1;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  inline bool enabled() const;
  inline void set_enabled(bool value);

  // required .gazebo.msgs.DriverStation.State state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::gazebo::msgs::DriverStation_State state() const;
  inline void set_state(::gazebo::msgs::DriverStation_State value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.DriverStation)
 private:
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool enabled_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_msgs_2fdriver_2dstation_2eproto();
  friend void protobuf_AssignDesc_msgs_2fdriver_2dstation_2eproto();
  friend void protobuf_ShutdownFile_msgs_2fdriver_2dstation_2eproto();

  void InitAsDefaultInstance();
  static DriverStation* default_instance_;
};
// ===================================================================


// ===================================================================

// DriverStation

// required bool enabled = 1;
inline bool DriverStation::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DriverStation::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DriverStation::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DriverStation::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
inline bool DriverStation::enabled() const {
  return enabled_;
}
inline void DriverStation::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
}

// required .gazebo.msgs.DriverStation.State state = 2;
inline bool DriverStation::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DriverStation::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DriverStation::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DriverStation::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::gazebo::msgs::DriverStation_State DriverStation::state() const {
  return static_cast< ::gazebo::msgs::DriverStation_State >(state_);
}
inline void DriverStation::set_state(::gazebo::msgs::DriverStation_State value) {
  assert(::gazebo::msgs::DriverStation_State_IsValid(value));
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gazebo::msgs::DriverStation_State>() {
  return ::gazebo::msgs::DriverStation_State_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgs_2fdriver_2dstation_2eproto__INCLUDED
