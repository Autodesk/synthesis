syntax = "proto3";

message MessageHeader {
	bool is_encrypted = 1;
}

// Pack messages as the 'Any' type before sending

message StatusMessage {
	LogLevel log_level = 1;
	string msg = 2;

	enum LogLevel {
		INFO = 0;
		WARNING = 1;
		ERROR = 2;
	}
}

message GenericResponse {
	bool success = 1;
	string log_message = 2;
}

// Sent by both clients and server to establish shared secrets and client_ids
message KeyExchange {
	string p = 1;
	string g = 2; 
	string public_key = 3;
	string client_id = 4; /// Determined by server and sent back. Whatever the client sends is ignored
}

message LobbyInfo {
	repeated Lobby lobbies = 1;
	string current_lobby = 2;
		
	message Lobby {
		string lobby_name = 1;
		map<string, string> clients = 2;
	}
}

message Heartbeat {
	string client_id = 1;
}


message CreateLobbyRequest {
	string client_id = 1;
	string lobby_name = 2;
}

message CreateLobbyResponse {
	string client_id = 1;
	string lobby_name = 2;
	GenericResponse generic_response = 3;
}


message DeleteLobbyRequest {
	string client_id = 1;
	string lobby_name = 2;
}

message DeleteLobbyResponse {
	string client_id = 1;
	string lobby_name = 2;
	GenericResponse generic_response = 3;
}


message JoinLobbyRequest {
	string client_id = 1;
	string lobby_name = 2;
}

message JoinLobbyResponse {
	string client_id = 1;
	string lobby_name = 2;
	GenericResponse generic_response = 3;
}


message LeaveLobbyRequest {
	string client_id = 1;
	string lobby_name = 2;
}

message LeaveLobbyResponse {
	string client_id = 1;
	string lobby_name = 2;
	GenericResponse generic_response = 3;
}


message StartLobbyRequest {
	string client_id = 1;
	string lobby_name = 2;
}

message StartLobbyResponse {
	string client_id = 1;
	string lobby_name = 2;
	GenericResponse generic_response = 3;
}


message SwapRequest {
	string client_id = 1;
	string lobby_name = 2;

	int32 first_postion = 3;
	int32 second_postion = 4;
}

message SwapResponse {
	string client_id = 1;
	string lobby_name = 2;

	int32 first_postion = 3;
	int32 second_postion = 4;
	GenericResponse generic_response = 5;
}













/// don't use
message ServerMessageLite {

	oneof server_msg_type {
		LobbyInfo lobby_info = 1; // sent by server
		StatusMessage status_message = 2; // sent by server
		Client client_status = 3; // sent by client

		GameInfo game_info = 4; // sent by server
		FoundGame game_found = 5; // sent by client (host)
	}

	/// Updates sent by the server that contain all the lobbies and their data
	message LobbyInfo {
		repeated Lobby lobbies = 1;
		
		message Lobby {
			string lobby_name = 1;
			repeated Client clients = 2;
		}
	}
	
	/// Clients send this object to the server as a heartbeat and to convey their desired state (client_id must remain constant)
	message Client {
		string client_id = 1;

		string client_name = 2;
		
		string current_lobby_name = 3;
		int32 current_lobby_index = 4;
		bool is_ready = 5;
	}
	
	/// messages the server can send to the clients for debugging
	message StatusMessage {
		string msg = 1;
		Level level = 2;
	
		enum Level {
			INFO = 0;
			WARNING = 1;
			ERROR = 2;
		}	
	}
	
	/// Sent to all clients when trying to establish p2p connection
	message GameInfo {
		string lobby_name = 1;
		bool is_host = 2;
		repeated ClientData clients = 3; /// host will have all while clients will just have the host's		

		message ClientData {
			string endpoint = 1;
			string id = 2;
		}
	}

	/// Sent by host as a courtesy to server so that the lobby can be deleted timely
	message FoundGame {
		string client_id = 1;
		string lobby_name = 2;
	}
}