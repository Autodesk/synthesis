syntax = "proto3";

/// Used to denote which type the message should be deserialized as
enum MessageType {
	INVALID = 0;
	EXCHANGE = 1;
	MESSAGE = 2;
}

// Sent by both clients and server to establish shared secrets and client_ids
message KeyExchange {
	string p = 1;
	string g = 2; 
	string public_key = 3;
	string client_id = 4; /// Determined by server and sent back. Whatever the client sends is ignored
}

/// A theoretically better and simpler way to do things where the client simply syncs their state/desired state with the server
message ServerMessage {

	oneof server_msg_type {
		LobbyInfo lobby_info = 1; // sent by server
		StatusMessage status_message = 2; // sent by server
		Client client_status = 3; // sent by client
	}

	/// Updates sent by the server that contain all the lobbies and their data
	message LobbyInfo {
		repeated Lobby lobbies = 1;
		
		message Lobby {
			string lobby_name = 1;
			string lobby_id = 2;
			repeated Client clients = 3;
		}
	}
	
	/// Clients send this object to the server as a heartbeat and to convey their desired state (client_id must remain constant)
	message Client {
		string client_id = 1;

		string client_name = 2;
		
		string current_lobby_name = 3;
		string current_lobby_id = 4;
		bool is_ready = 5;
	}

	message StatusMessage {
		string msg = 1;
		Level level = 2;
	
		enum Level {
			INFO = 0;
			WARNING = 1;
			ERROR = 2;
		}	
	}
}

/// Don't use (here as a backup for now)
message ServerMessageBackup {
	
	oneof server_msg_type {
                LobbyInfo lobby_info = 1;

		CreateLobbyRequest create_lobby_request = 2;
		DeleteLobbyRequest delete_lobby_request = 3;
		StartLobbyRequest start_lobby_request = 4;
		JoinLobbyRequest join_lobby_request = 5;
		LeaveLobbyRequest leave_lobby_request = 6;
		SwapRequest swap_request = 7;

		GenericLobbyResponse generic_lobby_response = 8;

		Heartbeat heartbeat = 9;
	}

	message LobbyInfo {
		repeated Lobby lobbies = 1;
		string current_lobby = 2;
		
		message Lobby {
			string lobby_name = 1;
			string lobby_id = 2;
			map<string, string> clients = 3;
		}
	}

	message CreateLobbyRequest {
		string client_id = 1;		
		
		string lobby_name = 2;
	}

	message DeleteLobbyRequest {
		string client_id = 1;
		string lobby_id = 2;
	}

	message StartLobbyRequest {
		string client_id = 1;
		string lobby_id = 2;
	}

	message JoinLobbyRequest {
		string client_id = 1;
		string lobby_id = 2;
	}

	message LeaveLobbyRequest {
		string client_id = 1;
		string lobby_id = 2;
	}

	message SwapRequest {
		string client_id = 1;
		string lobby_id = 2;

		int32 first_postion = 3;
		int32 second_postion = 4;
	}

	message GenericLobbyResponse {
		ResponseType response_type = 1;
		string lobby_id = 2;
		bool status = 3;
		string status_msg = 4;

		enum ResponseType {
			CREATE_LOBBY = 0;
			DELETE_LOBBY = 1;
			START_LOBBY = 2;
			JOIN_LOBBY = 3;
			LEAVE_LOBBY = 4;
			SWAP_LOBBY_SLOT = 5;
		}
	}

	message Heartbeat {
		string client_id = 1;
	}
}
