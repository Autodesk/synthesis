syntax = "proto3";

package EmulationService;

option go_package = "v1";

enum TargetPlatform {
    NATIVE = 0;
    JAVA = 1;
    OTHER = 2;
}

message DIOData{
	enum Config {
		DI = 0;
		DO = 1;
	}

	Config config = 1;
	bool value    = 2;
}

message MXPData {
    enum Config {
        DI             = 0;
        DO             = 1;
        PWM            = 2;
        SPI            = 3;
        I2C            = 4;
        INVALID_CONFIG = 5;
    }

    Config config = 1;
    double value  = 2;
}


message RobotOutputs {
    enum RelayState {
        OFF                = 0;
		REVERSE            = 1;
        FORWARD            = 2;
        INVALID_STATE      = 3;
    }
    enum CANType {
        TALON_SRX           = 0;
        VICTOR_SPX          = 1;
        SPARK_MAX           = 2;
        PCM                 = 3;
        PDP                 = 4;
        UNKNOWN             = 5;
        INVALID_CAN_TYPE    = 6;
    }

    message CANMotorController {
        CANType can_type     = 1;
        int32 id             = 2;
        float percent_output = 3;
    }
    string api                                        = 1;
    repeated double pwm_headers                       = 2;
    repeated RelayState relays                        = 3;
    repeated float analog_outputs                     = 4; 
    repeated MXPData mxp_data                         = 5;
    repeated DIOData digital_headers                  = 6;
    repeated CANMotorController can_motor_controllers = 7;
}

message RobotInputs {
    message MatchInfo {
        enum MatchType {
            NONE          = 0;
            PRACTICE      = 1;
            QUALIFICATION = 2;
            ELIMINATION   = 3;
        }

        enum AllianceStationID {
            RED1  = 0;
            RED2  = 1;
            RED3  = 2;
            BLUE1 = 3;
            BLUE2 = 4;
            BLUE3 = 5;
        }

        string game_specific_message = 1;
        MatchType match_type = 2;
        string event_name = 3;
        uint32 match_number = 4;
        uint32 replay_number = 5;
        AllianceStationID alliance_station_id = 6;
        double match_time = 7;

    }

    message Joystick {
        bool is_xbox               = 1;
        sint32 type                = 2;
        string name                = 3;
        uint32 buttons             = 4;
        sint32 button_count        = 5;
        repeated sint32 axes       = 6;
        sint32 axis_count          = 7;
        repeated uint32 axis_types = 8;
        repeated sint32 povs       = 9;
        int32 pov_count            = 10;
        int32 outputs              = 11;
        int32 left_rumble          = 12;
        int32 right_rumble         = 13;
    }

    message RobotMode {
        enum Mode {
            AUTONOMOUS = 0;
            TELEOP     = 1;
            TEST       = 2;
        }
        bool enabled              = 1;
        bool is_emergency_stopped = 2;
        bool is_fms_attached      = 3;
        bool is_ds_attached       = 4;
        Mode mode                 = 5;
    }

    message EncoderManager {
        enum PortType {
            DI = 0;
            AI = 1;
        }
        enum EncoderType {
            INVALID      = 0;
            FPGA_ENCODER = 1;
            COUNTER      = 2;
        }

        EncoderType type = 1;
        uint32 index     = 2;
        uint32 a_channel = 3;
        PortType a_type  = 4;
        uint32 b_channel = 5;
        PortType b_type  = 6;
        sint32 ticks     = 7;
    }

    repeated DIOData digital_headers         = 1;
    repeated MXPData mxp_data                = 2;
    repeated Joystick joysticks              = 3;
    MatchInfo match_info                     = 4;
    RobotMode robot_mode                     = 5;
    repeated EncoderManager encoder_managers = 6;
    repeated float analog_inputs             = 7;
	bool user_button                         = 8;
}

message UpdateRobotInputsRequest {
    string api = 1;
    TargetPlatform target_platform = 2;
    RobotInputs input_data = 3;
}

message UpdateRobotInputsResponse {
     enum ErrorCode {
        INTERAL_ERROR = 0;
    }

    string api = 1;
    TargetPlatform target_platform = 2;
    ErrorCode error_code = 3;
    bool success = 4;
}

message RobotOutputsRequest {
    string api = 1;
    TargetPlatform target_platform = 2;
}

message RobotOutputsResponse {
    enum ErrorCode {
        INTERAL_ERROR = 0;
    }

    string api = 1;
    TargetPlatform target_platform = 2;
    ErrorCode error_code = 3;
    bool success = 4;
    RobotOutputs output_data = 5;
}

service EmulationWriter {
    rpc RobotInputs(stream UpdateRobotInputsRequest) returns (UpdateRobotInputsResponse) {}
}

service EmulationReader {
    rpc RobotOutputs(RobotOutputsRequest) returns (stream RobotOutputsResponse) {}
}

