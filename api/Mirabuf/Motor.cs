// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: motor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mirabuf.Motor {

  /// <summary>Holder for reflection information generated from motor.proto</summary>
  public static partial class MotorReflection {

    #region Descriptor
    /// <summary>File descriptor for motor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MotorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb3Rvci5wcm90bxINbWlyYWJ1Zi5tb3RvchoLdHlwZXMucHJvdG8imAEK",
            "BU1vdG9yEhsKBGluZm8YASABKAsyDS5taXJhYnVmLkluZm8SKgoIZGNfbW90",
            "b3IYAiABKAsyFi5taXJhYnVmLm1vdG9yLkRDTW90b3JIABIyCgxzaW1wbGVf",
            "bW90b3IYAyABKAsyGi5taXJhYnVmLm1vdG9yLlNpbXBsZU1vdG9ySABCDAoK",
            "bW90b3JfdHlwZUoECAQQBiJTCgtTaW1wbGVNb3RvchIUCgxzdGFsbF90b3Jx",
            "dWUYASABKAISFAoMbWF4X3ZlbG9jaXR5GAIgASgCEhgKEGJyYWtpbmdfY29u",
            "c3RhbnQYAyABKAIinQMKB0RDTW90b3ISFQoNcmVmZXJlbmNlX3VybBgCIAEo",
            "CRIXCg90b3JxdWVfY29uc3RhbnQYAyABKAISFAoMZW1mX2NvbnN0YW50GAQg",
            "ASgCEhIKCnJlc2lzdGFuY2UYBSABKAISGgoSbWF4aW11bV9lZmZlY2llbmN5",
            "GAYgASgNEhUKDW1heGltdW1fcG93ZXIYByABKA0SLQoKZHV0eV9jeWNsZRgI",
            "IAEoDjIZLm1pcmFidWYubW90b3IuRHV0eUN5Y2xlcxIxCghhZHZhbmNlZBgQ",
            "IAEoCzIfLm1pcmFidWYubW90b3IuRENNb3Rvci5BZHZhbmNlZBqWAQoIQWR2",
            "YW5jZWQSFAoMZnJlZV9jdXJyZW50GAEgASgCEhIKCmZyZWVfc3BlZWQYAiAB",
            "KA0SFQoNc3RhbGxfY3VycmVudBgDIAEoAhIUCgxzdGFsbF90b3JxdWUYBCAB",
            "KAISFQoNaW5wdXRfdm9sdGFnZRgFIAEoDRIcChRyZXNpc3RhbmNlX3Zhcmlh",
            "dGlvbhgHIAEoAkoECAEQAkoECAkQECpoCgpEdXR5Q3ljbGVzEhYKEkNPTlRJ",
            "TlVPVVNfUlVOTklORxAAEg4KClNIT1JUX1RJTUUQARIZChVJTlRFUk1JVFRF",
            "TlRfUEVSSU9ESUMQAhIXChNDT05USU5VT1VTX1BFUklPRElDEANiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mirabuf.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Mirabuf.Motor.DutyCycles), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mirabuf.Motor.Motor), global::Mirabuf.Motor.Motor.Parser, new[]{ "Info", "DcMotor", "SimpleMotor" }, new[]{ "MotorType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mirabuf.Motor.SimpleMotor), global::Mirabuf.Motor.SimpleMotor.Parser, new[]{ "StallTorque", "MaxVelocity", "BrakingConstant" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mirabuf.Motor.DCMotor), global::Mirabuf.Motor.DCMotor.Parser, new[]{ "ReferenceUrl", "TorqueConstant", "EmfConstant", "Resistance", "MaximumEffeciency", "MaximumPower", "DutyCycle", "Advanced" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mirabuf.Motor.DCMotor.Types.Advanced), global::Mirabuf.Motor.DCMotor.Types.Advanced.Parser, new[]{ "FreeCurrent", "FreeSpeed", "StallCurrent", "StallTorque", "InputVoltage", "ResistanceVariation" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  /// Duty Cycles for electric motors
  /// Affects the dynamic output of the motor
  /// https://www.news.benevelli-group.com/index.php/en/88-what-motor-duty-cycle.html
  /// These each have associated data we are not going to use right now
  /// </summary>
  public enum DutyCycles {
    /// <summary>
    //// S1
    /// </summary>
    [pbr::OriginalName("CONTINUOUS_RUNNING")] ContinuousRunning = 0,
    /// <summary>
    //// S2
    /// </summary>
    [pbr::OriginalName("SHORT_TIME")] ShortTime = 1,
    /// <summary>
    //// S3
    /// </summary>
    [pbr::OriginalName("INTERMITTENT_PERIODIC")] IntermittentPeriodic = 2,
    /// <summary>
    //// S6 Continuous Operation with Periodic Duty
    /// </summary>
    [pbr::OriginalName("CONTINUOUS_PERIODIC")] ContinuousPeriodic = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///*
  /// A Motor should determine the relationship between an input and joint motion
  /// Could represent something like a DC Motor relationship
  /// </summary>
  public sealed partial class Motor : pb::IMessage<Motor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Motor> _parser = new pb::MessageParser<Motor>(() => new Motor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Motor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mirabuf.Motor.MotorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Motor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Motor(Motor other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      switch (other.MotorTypeCase) {
        case MotorTypeOneofCase.DcMotor:
          DcMotor = other.DcMotor.Clone();
          break;
        case MotorTypeOneofCase.SimpleMotor:
          SimpleMotor = other.SimpleMotor.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Motor Clone() {
      return new Motor(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Mirabuf.Info info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mirabuf.Info Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "dc_motor" field.</summary>
    public const int DcMotorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mirabuf.Motor.DCMotor DcMotor {
      get { return motorTypeCase_ == MotorTypeOneofCase.DcMotor ? (global::Mirabuf.Motor.DCMotor) motorType_ : null; }
      set {
        motorType_ = value;
        motorTypeCase_ = value == null ? MotorTypeOneofCase.None : MotorTypeOneofCase.DcMotor;
      }
    }

    /// <summary>Field number for the "simple_motor" field.</summary>
    public const int SimpleMotorFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mirabuf.Motor.SimpleMotor SimpleMotor {
      get { return motorTypeCase_ == MotorTypeOneofCase.SimpleMotor ? (global::Mirabuf.Motor.SimpleMotor) motorType_ : null; }
      set {
        motorType_ = value;
        motorTypeCase_ = value == null ? MotorTypeOneofCase.None : MotorTypeOneofCase.SimpleMotor;
      }
    }

    private object motorType_;
    /// <summary>Enum of possible cases for the "motor_type" oneof.</summary>
    public enum MotorTypeOneofCase {
      None = 0,
      DcMotor = 2,
      SimpleMotor = 3,
    }
    private MotorTypeOneofCase motorTypeCase_ = MotorTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MotorTypeOneofCase MotorTypeCase {
      get { return motorTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMotorType() {
      motorTypeCase_ = MotorTypeOneofCase.None;
      motorType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Motor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Motor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(DcMotor, other.DcMotor)) return false;
      if (!object.Equals(SimpleMotor, other.SimpleMotor)) return false;
      if (MotorTypeCase != other.MotorTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (motorTypeCase_ == MotorTypeOneofCase.DcMotor) hash ^= DcMotor.GetHashCode();
      if (motorTypeCase_ == MotorTypeOneofCase.SimpleMotor) hash ^= SimpleMotor.GetHashCode();
      hash ^= (int) motorTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (motorTypeCase_ == MotorTypeOneofCase.DcMotor) {
        output.WriteRawTag(18);
        output.WriteMessage(DcMotor);
      }
      if (motorTypeCase_ == MotorTypeOneofCase.SimpleMotor) {
        output.WriteRawTag(26);
        output.WriteMessage(SimpleMotor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (motorTypeCase_ == MotorTypeOneofCase.DcMotor) {
        output.WriteRawTag(18);
        output.WriteMessage(DcMotor);
      }
      if (motorTypeCase_ == MotorTypeOneofCase.SimpleMotor) {
        output.WriteRawTag(26);
        output.WriteMessage(SimpleMotor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (motorTypeCase_ == MotorTypeOneofCase.DcMotor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DcMotor);
      }
      if (motorTypeCase_ == MotorTypeOneofCase.SimpleMotor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleMotor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Motor other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Mirabuf.Info();
        }
        Info.MergeFrom(other.Info);
      }
      switch (other.MotorTypeCase) {
        case MotorTypeOneofCase.DcMotor:
          if (DcMotor == null) {
            DcMotor = new global::Mirabuf.Motor.DCMotor();
          }
          DcMotor.MergeFrom(other.DcMotor);
          break;
        case MotorTypeOneofCase.SimpleMotor:
          if (SimpleMotor == null) {
            SimpleMotor = new global::Mirabuf.Motor.SimpleMotor();
          }
          SimpleMotor.MergeFrom(other.SimpleMotor);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Mirabuf.Info();
            }
            input.ReadMessage(Info);
            break;
          }
          case 18: {
            global::Mirabuf.Motor.DCMotor subBuilder = new global::Mirabuf.Motor.DCMotor();
            if (motorTypeCase_ == MotorTypeOneofCase.DcMotor) {
              subBuilder.MergeFrom(DcMotor);
            }
            input.ReadMessage(subBuilder);
            DcMotor = subBuilder;
            break;
          }
          case 26: {
            global::Mirabuf.Motor.SimpleMotor subBuilder = new global::Mirabuf.Motor.SimpleMotor();
            if (motorTypeCase_ == MotorTypeOneofCase.SimpleMotor) {
              subBuilder.MergeFrom(SimpleMotor);
            }
            input.ReadMessage(subBuilder);
            SimpleMotor = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Mirabuf.Info();
            }
            input.ReadMessage(Info);
            break;
          }
          case 18: {
            global::Mirabuf.Motor.DCMotor subBuilder = new global::Mirabuf.Motor.DCMotor();
            if (motorTypeCase_ == MotorTypeOneofCase.DcMotor) {
              subBuilder.MergeFrom(DcMotor);
            }
            input.ReadMessage(subBuilder);
            DcMotor = subBuilder;
            break;
          }
          case 26: {
            global::Mirabuf.Motor.SimpleMotor subBuilder = new global::Mirabuf.Motor.SimpleMotor();
            if (motorTypeCase_ == MotorTypeOneofCase.SimpleMotor) {
              subBuilder.MergeFrom(SimpleMotor);
            }
            input.ReadMessage(subBuilder);
            SimpleMotor = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// SimpleMotor Configuration
  /// Very easy motor used to simulate joints without specifying a real motor
  /// Can set braking_constant - stall_torque - and max_velocity
  /// Assumes you are solving using a velocity constraint for a joint and not a acceleration constraint
  /// </summary>
  public sealed partial class SimpleMotor : pb::IMessage<SimpleMotor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SimpleMotor> _parser = new pb::MessageParser<SimpleMotor>(() => new SimpleMotor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SimpleMotor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mirabuf.Motor.MotorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SimpleMotor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SimpleMotor(SimpleMotor other) : this() {
      stallTorque_ = other.stallTorque_;
      maxVelocity_ = other.maxVelocity_;
      brakingConstant_ = other.brakingConstant_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SimpleMotor Clone() {
      return new SimpleMotor(this);
    }

    /// <summary>Field number for the "stall_torque" field.</summary>
    public const int StallTorqueFieldNumber = 1;
    private float stallTorque_;
    /// <summary>
    //// Torque at 0 rpm with a inverse linear relationship to max_velocity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StallTorque {
      get { return stallTorque_; }
      set {
        stallTorque_ = value;
      }
    }

    /// <summary>Field number for the "max_velocity" field.</summary>
    public const int MaxVelocityFieldNumber = 2;
    private float maxVelocity_;
    /// <summary>
    //// The target velocity in RPM, will use stall_torque relationship to reach each step
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxVelocity {
      get { return maxVelocity_; }
      set {
        maxVelocity_ = value;
      }
    }

    /// <summary>Field number for the "braking_constant" field.</summary>
    public const int BrakingConstantFieldNumber = 3;
    private float brakingConstant_;
    /// <summary>
    //// (Optional) 0 - 1, the relationship of stall_torque used to perserve the position of this motor 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BrakingConstant {
      get { return brakingConstant_; }
      set {
        brakingConstant_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SimpleMotor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SimpleMotor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StallTorque, other.StallTorque)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxVelocity, other.MaxVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrakingConstant, other.BrakingConstant)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StallTorque != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StallTorque);
      if (MaxVelocity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxVelocity);
      if (BrakingConstant != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrakingConstant);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StallTorque != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(StallTorque);
      }
      if (MaxVelocity != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxVelocity);
      }
      if (BrakingConstant != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BrakingConstant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StallTorque != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(StallTorque);
      }
      if (MaxVelocity != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxVelocity);
      }
      if (BrakingConstant != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BrakingConstant);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StallTorque != 0F) {
        size += 1 + 4;
      }
      if (MaxVelocity != 0F) {
        size += 1 + 4;
      }
      if (BrakingConstant != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SimpleMotor other) {
      if (other == null) {
        return;
      }
      if (other.StallTorque != 0F) {
        StallTorque = other.StallTorque;
      }
      if (other.MaxVelocity != 0F) {
        MaxVelocity = other.MaxVelocity;
      }
      if (other.BrakingConstant != 0F) {
        BrakingConstant = other.BrakingConstant;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            StallTorque = input.ReadFloat();
            break;
          }
          case 21: {
            MaxVelocity = input.ReadFloat();
            break;
          }
          case 29: {
            BrakingConstant = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            StallTorque = input.ReadFloat();
            break;
          }
          case 21: {
            MaxVelocity = input.ReadFloat();
            break;
          }
          case 29: {
            BrakingConstant = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// DCMotor Configuration
  /// Parameters to simulate a DC Electric Motor
  /// Still needs some more but overall they are most of the parameters we can use
  /// </summary>
  public sealed partial class DCMotor : pb::IMessage<DCMotor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DCMotor> _parser = new pb::MessageParser<DCMotor>(() => new DCMotor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DCMotor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mirabuf.Motor.MotorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DCMotor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DCMotor(DCMotor other) : this() {
      referenceUrl_ = other.referenceUrl_;
      torqueConstant_ = other.torqueConstant_;
      emfConstant_ = other.emfConstant_;
      resistance_ = other.resistance_;
      maximumEffeciency_ = other.maximumEffeciency_;
      maximumPower_ = other.maximumPower_;
      dutyCycle_ = other.dutyCycle_;
      advanced_ = other.advanced_ != null ? other.advanced_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DCMotor Clone() {
      return new DCMotor(this);
    }

    /// <summary>Field number for the "reference_url" field.</summary>
    public const int ReferenceUrlFieldNumber = 2;
    private string referenceUrl_ = "";
    /// <summary>
    //// Reference for purchase page or spec sheet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ReferenceUrl {
      get { return referenceUrl_; }
      set {
        referenceUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "torque_constant" field.</summary>
    public const int TorqueConstantFieldNumber = 3;
    private float torqueConstant_;
    /// <summary>
    //// m-Nm/Amp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TorqueConstant {
      get { return torqueConstant_; }
      set {
        torqueConstant_ = value;
      }
    }

    /// <summary>Field number for the "emf_constant" field.</summary>
    public const int EmfConstantFieldNumber = 4;
    private float emfConstant_;
    /// <summary>
    //// mV/rad/sec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EmfConstant {
      get { return emfConstant_; }
      set {
        emfConstant_ = value;
      }
    }

    /// <summary>Field number for the "resistance" field.</summary>
    public const int ResistanceFieldNumber = 5;
    private float resistance_;
    /// <summary>
    //// Resistance of Motor - Optional if other values are known
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Resistance {
      get { return resistance_; }
      set {
        resistance_ = value;
      }
    }

    /// <summary>Field number for the "maximum_effeciency" field.</summary>
    public const int MaximumEffeciencyFieldNumber = 6;
    private uint maximumEffeciency_;
    /// <summary>
    //// measure in percentage of 100 - generally around 60 - measured under optimal load
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaximumEffeciency {
      get { return maximumEffeciency_; }
      set {
        maximumEffeciency_ = value;
      }
    }

    /// <summary>Field number for the "maximum_power" field.</summary>
    public const int MaximumPowerFieldNumber = 7;
    private uint maximumPower_;
    /// <summary>
    //// measured in Watts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaximumPower {
      get { return maximumPower_; }
      set {
        maximumPower_ = value;
      }
    }

    /// <summary>Field number for the "duty_cycle" field.</summary>
    public const int DutyCycleFieldNumber = 8;
    private global::Mirabuf.Motor.DutyCycles dutyCycle_ = global::Mirabuf.Motor.DutyCycles.ContinuousRunning;
    /// <summary>
    //// Stated Duty Cycle of motor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mirabuf.Motor.DutyCycles DutyCycle {
      get { return dutyCycle_; }
      set {
        dutyCycle_ = value;
      }
    }

    /// <summary>Field number for the "advanced" field.</summary>
    public const int AdvancedFieldNumber = 16;
    private global::Mirabuf.Motor.DCMotor.Types.Advanced advanced_;
    /// <summary>
    //// Optional data that can give a better relationship to the simulation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mirabuf.Motor.DCMotor.Types.Advanced Advanced {
      get { return advanced_; }
      set {
        advanced_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DCMotor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DCMotor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReferenceUrl != other.ReferenceUrl) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TorqueConstant, other.TorqueConstant)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EmfConstant, other.EmfConstant)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Resistance, other.Resistance)) return false;
      if (MaximumEffeciency != other.MaximumEffeciency) return false;
      if (MaximumPower != other.MaximumPower) return false;
      if (DutyCycle != other.DutyCycle) return false;
      if (!object.Equals(Advanced, other.Advanced)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ReferenceUrl.Length != 0) hash ^= ReferenceUrl.GetHashCode();
      if (TorqueConstant != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TorqueConstant);
      if (EmfConstant != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EmfConstant);
      if (Resistance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Resistance);
      if (MaximumEffeciency != 0) hash ^= MaximumEffeciency.GetHashCode();
      if (MaximumPower != 0) hash ^= MaximumPower.GetHashCode();
      if (DutyCycle != global::Mirabuf.Motor.DutyCycles.ContinuousRunning) hash ^= DutyCycle.GetHashCode();
      if (advanced_ != null) hash ^= Advanced.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ReferenceUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReferenceUrl);
      }
      if (TorqueConstant != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TorqueConstant);
      }
      if (EmfConstant != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(EmfConstant);
      }
      if (Resistance != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Resistance);
      }
      if (MaximumEffeciency != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaximumEffeciency);
      }
      if (MaximumPower != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaximumPower);
      }
      if (DutyCycle != global::Mirabuf.Motor.DutyCycles.ContinuousRunning) {
        output.WriteRawTag(64);
        output.WriteEnum((int) DutyCycle);
      }
      if (advanced_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Advanced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ReferenceUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ReferenceUrl);
      }
      if (TorqueConstant != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TorqueConstant);
      }
      if (EmfConstant != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(EmfConstant);
      }
      if (Resistance != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Resistance);
      }
      if (MaximumEffeciency != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaximumEffeciency);
      }
      if (MaximumPower != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MaximumPower);
      }
      if (DutyCycle != global::Mirabuf.Motor.DutyCycles.ContinuousRunning) {
        output.WriteRawTag(64);
        output.WriteEnum((int) DutyCycle);
      }
      if (advanced_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Advanced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ReferenceUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReferenceUrl);
      }
      if (TorqueConstant != 0F) {
        size += 1 + 4;
      }
      if (EmfConstant != 0F) {
        size += 1 + 4;
      }
      if (Resistance != 0F) {
        size += 1 + 4;
      }
      if (MaximumEffeciency != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumEffeciency);
      }
      if (MaximumPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumPower);
      }
      if (DutyCycle != global::Mirabuf.Motor.DutyCycles.ContinuousRunning) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DutyCycle);
      }
      if (advanced_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Advanced);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DCMotor other) {
      if (other == null) {
        return;
      }
      if (other.ReferenceUrl.Length != 0) {
        ReferenceUrl = other.ReferenceUrl;
      }
      if (other.TorqueConstant != 0F) {
        TorqueConstant = other.TorqueConstant;
      }
      if (other.EmfConstant != 0F) {
        EmfConstant = other.EmfConstant;
      }
      if (other.Resistance != 0F) {
        Resistance = other.Resistance;
      }
      if (other.MaximumEffeciency != 0) {
        MaximumEffeciency = other.MaximumEffeciency;
      }
      if (other.MaximumPower != 0) {
        MaximumPower = other.MaximumPower;
      }
      if (other.DutyCycle != global::Mirabuf.Motor.DutyCycles.ContinuousRunning) {
        DutyCycle = other.DutyCycle;
      }
      if (other.advanced_ != null) {
        if (advanced_ == null) {
          Advanced = new global::Mirabuf.Motor.DCMotor.Types.Advanced();
        }
        Advanced.MergeFrom(other.Advanced);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            ReferenceUrl = input.ReadString();
            break;
          }
          case 29: {
            TorqueConstant = input.ReadFloat();
            break;
          }
          case 37: {
            EmfConstant = input.ReadFloat();
            break;
          }
          case 45: {
            Resistance = input.ReadFloat();
            break;
          }
          case 48: {
            MaximumEffeciency = input.ReadUInt32();
            break;
          }
          case 56: {
            MaximumPower = input.ReadUInt32();
            break;
          }
          case 64: {
            DutyCycle = (global::Mirabuf.Motor.DutyCycles) input.ReadEnum();
            break;
          }
          case 130: {
            if (advanced_ == null) {
              Advanced = new global::Mirabuf.Motor.DCMotor.Types.Advanced();
            }
            input.ReadMessage(Advanced);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            ReferenceUrl = input.ReadString();
            break;
          }
          case 29: {
            TorqueConstant = input.ReadFloat();
            break;
          }
          case 37: {
            EmfConstant = input.ReadFloat();
            break;
          }
          case 45: {
            Resistance = input.ReadFloat();
            break;
          }
          case 48: {
            MaximumEffeciency = input.ReadUInt32();
            break;
          }
          case 56: {
            MaximumPower = input.ReadUInt32();
            break;
          }
          case 64: {
            DutyCycle = (global::Mirabuf.Motor.DutyCycles) input.ReadEnum();
            break;
          }
          case 130: {
            if (advanced_ == null) {
              Advanced = new global::Mirabuf.Motor.DCMotor.Types.Advanced();
            }
            input.ReadMessage(Advanced);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DCMotor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      //// Information usually found on datasheet
      /// </summary>
      public sealed partial class Advanced : pb::IMessage<Advanced>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Advanced> _parser = new pb::MessageParser<Advanced>(() => new Advanced());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Advanced> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mirabuf.Motor.DCMotor.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Advanced() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Advanced(Advanced other) : this() {
          freeCurrent_ = other.freeCurrent_;
          freeSpeed_ = other.freeSpeed_;
          stallCurrent_ = other.stallCurrent_;
          stallTorque_ = other.stallTorque_;
          inputVoltage_ = other.inputVoltage_;
          resistanceVariation_ = other.resistanceVariation_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Advanced Clone() {
          return new Advanced(this);
        }

        /// <summary>Field number for the "free_current" field.</summary>
        public const int FreeCurrentFieldNumber = 1;
        private float freeCurrent_;
        /// <summary>
        //// measured in AMPs
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float FreeCurrent {
          get { return freeCurrent_; }
          set {
            freeCurrent_ = value;
          }
        }

        /// <summary>Field number for the "free_speed" field.</summary>
        public const int FreeSpeedFieldNumber = 2;
        private uint freeSpeed_;
        /// <summary>
        //// measured in RPM
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint FreeSpeed {
          get { return freeSpeed_; }
          set {
            freeSpeed_ = value;
          }
        }

        /// <summary>Field number for the "stall_current" field.</summary>
        public const int StallCurrentFieldNumber = 3;
        private float stallCurrent_;
        /// <summary>
        //// measure in AMPs
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float StallCurrent {
          get { return stallCurrent_; }
          set {
            stallCurrent_ = value;
          }
        }

        /// <summary>Field number for the "stall_torque" field.</summary>
        public const int StallTorqueFieldNumber = 4;
        private float stallTorque_;
        /// <summary>
        //// measured in Nm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float StallTorque {
          get { return stallTorque_; }
          set {
            stallTorque_ = value;
          }
        }

        /// <summary>Field number for the "input_voltage" field.</summary>
        public const int InputVoltageFieldNumber = 5;
        private uint inputVoltage_;
        /// <summary>
        //// measured in Volts DC
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint InputVoltage {
          get { return inputVoltage_; }
          set {
            inputVoltage_ = value;
          }
        }

        /// <summary>Field number for the "resistance_variation" field.</summary>
        public const int ResistanceVariationFieldNumber = 7;
        private float resistanceVariation_;
        /// <summary>
        //// between (K * (N / 4)) and (K * ((N-2) / 4)) where N is number of poles - leave at 0 if unknown
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float ResistanceVariation {
          get { return resistanceVariation_; }
          set {
            resistanceVariation_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Advanced);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Advanced other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FreeCurrent, other.FreeCurrent)) return false;
          if (FreeSpeed != other.FreeSpeed) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StallCurrent, other.StallCurrent)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StallTorque, other.StallTorque)) return false;
          if (InputVoltage != other.InputVoltage) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ResistanceVariation, other.ResistanceVariation)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (FreeCurrent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FreeCurrent);
          if (FreeSpeed != 0) hash ^= FreeSpeed.GetHashCode();
          if (StallCurrent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StallCurrent);
          if (StallTorque != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StallTorque);
          if (InputVoltage != 0) hash ^= InputVoltage.GetHashCode();
          if (ResistanceVariation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ResistanceVariation);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (FreeCurrent != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(FreeCurrent);
          }
          if (FreeSpeed != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(FreeSpeed);
          }
          if (StallCurrent != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(StallCurrent);
          }
          if (StallTorque != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(StallTorque);
          }
          if (InputVoltage != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(InputVoltage);
          }
          if (ResistanceVariation != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(ResistanceVariation);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (FreeCurrent != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(FreeCurrent);
          }
          if (FreeSpeed != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(FreeSpeed);
          }
          if (StallCurrent != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(StallCurrent);
          }
          if (StallTorque != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(StallTorque);
          }
          if (InputVoltage != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(InputVoltage);
          }
          if (ResistanceVariation != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(ResistanceVariation);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (FreeCurrent != 0F) {
            size += 1 + 4;
          }
          if (FreeSpeed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeSpeed);
          }
          if (StallCurrent != 0F) {
            size += 1 + 4;
          }
          if (StallTorque != 0F) {
            size += 1 + 4;
          }
          if (InputVoltage != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputVoltage);
          }
          if (ResistanceVariation != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Advanced other) {
          if (other == null) {
            return;
          }
          if (other.FreeCurrent != 0F) {
            FreeCurrent = other.FreeCurrent;
          }
          if (other.FreeSpeed != 0) {
            FreeSpeed = other.FreeSpeed;
          }
          if (other.StallCurrent != 0F) {
            StallCurrent = other.StallCurrent;
          }
          if (other.StallTorque != 0F) {
            StallTorque = other.StallTorque;
          }
          if (other.InputVoltage != 0) {
            InputVoltage = other.InputVoltage;
          }
          if (other.ResistanceVariation != 0F) {
            ResistanceVariation = other.ResistanceVariation;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                FreeCurrent = input.ReadFloat();
                break;
              }
              case 16: {
                FreeSpeed = input.ReadUInt32();
                break;
              }
              case 29: {
                StallCurrent = input.ReadFloat();
                break;
              }
              case 37: {
                StallTorque = input.ReadFloat();
                break;
              }
              case 40: {
                InputVoltage = input.ReadUInt32();
                break;
              }
              case 61: {
                ResistanceVariation = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                FreeCurrent = input.ReadFloat();
                break;
              }
              case 16: {
                FreeSpeed = input.ReadUInt32();
                break;
              }
              case 29: {
                StallCurrent = input.ReadFloat();
                break;
              }
              case 37: {
                StallTorque = input.ReadFloat();
                break;
              }
              case 40: {
                InputVoltage = input.ReadUInt32();
                break;
              }
              case 61: {
                ResistanceVariation = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
