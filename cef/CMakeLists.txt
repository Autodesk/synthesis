cmake_minimum_required(VERSION 3.26.0)
project(synthesis_cef LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(CMAKE_BUILD_TYPE STREQUAL "")
    message(STATUS "No build type specified, defaulting to Debug")
    set(CMAKE_BUILD_TYPE "Debug")
endif()

if(GEN_NINJA OR GEN_MAKEFILES)
    set(TARGET_OUT_DIR "${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}")
else()
    set(TARGET_OUT_DIR "${CMAKE_BINARY_DIR}/$<CONFIGURATION>")
endif()

set(CEF_VERSION "106.0.26+ge105400+chromium-106.0.5249.91")

if("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
    if("${CMAKE_CXX_COMPILER_ARCHITECTURE_ID}" STREQUAL "ARM64")
        set(CEF_PLATFORM "windowsarm64")
    elseif(CMAKE_SIZEOF_VOID_P MATCHES 8)
        set(CEF_PLATFORM "windows64")
    else()
        set(CEF_PLATFORM "windows32")
    endif()
elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
    if("${PROJECT_ARCH}" STREQUAL "arm64")
        set(CEF_PLATFORM "macosarm64")
    elseif("${CMAKE_PROJECT_ARCH}" STREQUAL "x86_64")
        set(CEF_PLATFORM "macosx64")
    elseif("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "arm64")
        set(PROJECT_ARCH "arm64")
        set(CEF_PLATFORM "macosarm64")
    else()
        set(PROJECT_ARCH "x86_64")
        set(CEF_PLATFORM "macosx64")
    endif()
elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
    if("${CMAKE_CXX_COMPILER_ARCHITECTURE_ID}" STREQUAL "arm")
        set(CEF_PLATFORM "linuxarm")
    elseif(CMAKE_SIZEOF_VOID_P MATCHES 8)
        set(CEF_PLATFORM "linux64")
    else()
        message(FATAL_ERROR "Linux 32-bit is not supported by CEF")
    endif()
endif()

function(DownloadCEF platform version download_dir)
    if(REINSTALL_CEF)
        message(STATUS "Reinstalling CEF...")
        file(REMOVE_RECURSE "${download_dir}")
    endif()

    set(CEF_DISTRIBUTION "cef_binary_${version}_${platform}")
    set(CEF_DOWNLOAD_DIR "${download_dir}")
    set(CEF_ROOT "${CEF_DOWNLOAD_DIR}/${CEF_DISTRIBUTION}" CACHE INTERNAL "CEF_ROOT")
  
    if(NOT IS_DIRECTORY "${CEF_ROOT}")
        message(STATUS "Downloading CEF binaries...")
        set(CEF_DOWNLOAD_FILENAME "${CEF_DISTRIBUTION}.tar.bz2")
        set(CEF_DOWNLOAD_PATH "${CEF_DOWNLOAD_DIR}/${CEF_DOWNLOAD_FILENAME}")
      
        if(NOT EXISTS "${CEF_DOWNLOAD_PATH}")
            set(CEF_DOWNLOAD_URL "https://cef-builds.spotifycdn.com/${CEF_DOWNLOAD_FILENAME}")
            string(REPLACE "+" "%2B" CEF_DOWNLOAD_URL_ESCAPED ${CEF_DOWNLOAD_URL})
            file(DOWNLOAD "${CEF_DOWNLOAD_URL_ESCAPED}.sha1" "${CEF_DOWNLOAD_PATH}.sha1")
            file(READ "${CEF_DOWNLOAD_PATH}.sha1" CEF_SHA1)
  
            file(DOWNLOAD "${CEF_DOWNLOAD_URL_ESCAPED}" "${CEF_DOWNLOAD_PATH}" EXPECTED_HASH SHA1=${CEF_SHA1} SHOW_PROGRESS)
        endif()
  
        message(STATUS "Extracting ${CEF_DOWNLOAD_PATH}...")
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xzf "${CEF_DOWNLOAD_DIR}/${CEF_DOWNLOAD_FILENAME}" WORKING_DIRECTORY ${CEF_DOWNLOAD_DIR})
    else()
        message(STATUS "Using cached CEF distribution at ${CEF_ROOT}")
    endif()
endfunction()

DownloadCEF("${CEF_PLATFORM}" "${CEF_VERSION}" "${CMAKE_SOURCE_DIR}/cef_binaries")

# set(CEF_BINARY_DIR "${CEF_ROOT}")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CEF_ROOT}/cmake")
find_package(CEF REQUIRED)

include_directories(${CEF_INCLUDE_PATH})

add_subdirectory(${CEF_LIBCEF_DLL_WRAPPER_PATH} libcef_dll_wrapper)

add_subdirectory(cef)

if(BUILD_TESTING)
    enable_testing()
    add_subdirectory(tests)
endif()
