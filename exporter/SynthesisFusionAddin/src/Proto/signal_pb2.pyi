"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import types_pb2
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _IOType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _IOTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_IOType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    INPUT: _IOType.ValueType  # 0
    """/ Input Signal"""
    OUTPUT: _IOType.ValueType  # 1
    """/ Output Signal"""

class IOType(_IOType, metaclass=_IOTypeEnumTypeWrapper):
    """*
    IOType is a way to specify Input or Output.
    """

INPUT: IOType.ValueType  # 0
"""/ Input Signal"""
OUTPUT: IOType.ValueType  # 1
"""/ Output Signal"""
global___IOType = IOType

class _DeviceType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _DeviceTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DeviceType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    PWM: _DeviceType.ValueType  # 0
    Digital: _DeviceType.ValueType  # 1
    Analog: _DeviceType.ValueType  # 2
    I2C: _DeviceType.ValueType  # 3
    CANBUS: _DeviceType.ValueType  # 4
    CUSTOM: _DeviceType.ValueType  # 5

class DeviceType(_DeviceType, metaclass=_DeviceTypeEnumTypeWrapper):
    """*
    DeviceType needs to be a type of device that has a supported connection
    As well as a signal frmae but that can come later
    """

PWM: DeviceType.ValueType  # 0
Digital: DeviceType.ValueType  # 1
Analog: DeviceType.ValueType  # 2
I2C: DeviceType.ValueType  # 3
CANBUS: DeviceType.ValueType  # 4
CUSTOM: DeviceType.ValueType  # 5
global___DeviceType = DeviceType

@typing.final
class Signals(google.protobuf.message.Message):
    """*
    Signals is a container for all of the potential signals.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class SignalMapEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Signal: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Signal | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    INFO_FIELD_NUMBER: builtins.int
    SIGNAL_MAP_FIELD_NUMBER: builtins.int
    @property
    def info(self) -> types_pb2.Info:
        """/ Has identifiable data (id, name, version)"""

    @property
    def signal_map(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Signal]:
        """/ Contains a full collection of symbols"""

    def __init__(
        self,
        *,
        info: types_pb2.Info | None = ...,
        signal_map: collections.abc.Mapping[builtins.str, global___Signal] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["info", b"info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["info", b"info", "signal_map", b"signal_map"]) -> None: ...

global___Signals = Signals

@typing.final
class Signal(google.protobuf.message.Message):
    """*
    Signal is a way to define a controlling signal.

    TODO: Add Origin
    TODO: Decide how this is linked to a exported object
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INFO_FIELD_NUMBER: builtins.int
    IO_FIELD_NUMBER: builtins.int
    CUSTOM_TYPE_FIELD_NUMBER: builtins.int
    SIGNAL_ID_FIELD_NUMBER: builtins.int
    DEVICE_TYPE_FIELD_NUMBER: builtins.int
    io: global___IOType.ValueType
    """/ Is this a Input or Output"""
    custom_type: builtins.str
    """/ The name of a custom input type that is not listed as a device type"""
    signal_id: builtins.int
    """/ ID for a given signal that exists... PWM 2, CANBUS 4"""
    device_type: global___DeviceType.ValueType
    """/ Enum for device type that should always be set"""
    @property
    def info(self) -> types_pb2.Info:
        """/ Has identifiable data (id, name, version)"""

    def __init__(
        self,
        *,
        info: types_pb2.Info | None = ...,
        io: global___IOType.ValueType = ...,
        custom_type: builtins.str = ...,
        signal_id: builtins.int = ...,
        device_type: global___DeviceType.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["info", b"info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["custom_type", b"custom_type", "device_type", b"device_type", "info", b"info", "io", b"io", "signal_id", b"signal_id"]) -> None: ...

global___Signal = Signal
