"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import motor_pb2
import sys
import types_pb2
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _JointMotion:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _JointMotionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_JointMotion.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RIGID: _JointMotion.ValueType  # 0
    REVOLUTE: _JointMotion.ValueType  # 1
    SLIDER: _JointMotion.ValueType  # 2
    CYLINDRICAL: _JointMotion.ValueType  # 3
    PINSLOT: _JointMotion.ValueType  # 4
    PLANAR: _JointMotion.ValueType  # 5
    BALL: _JointMotion.ValueType  # 6
    CUSTOM: _JointMotion.ValueType  # 7

class JointMotion(_JointMotion, metaclass=_JointMotionEnumTypeWrapper):
    """Describes the joint - Not really sure what to do with this for now - TBD"""

RIGID: JointMotion.ValueType  # 0
REVOLUTE: JointMotion.ValueType  # 1
SLIDER: JointMotion.ValueType  # 2
CYLINDRICAL: JointMotion.ValueType  # 3
PINSLOT: JointMotion.ValueType  # 4
PLANAR: JointMotion.ValueType  # 5
BALL: JointMotion.ValueType  # 6
CUSTOM: JointMotion.ValueType  # 7
global___JointMotion = JointMotion

@typing.final
class Joints(google.protobuf.message.Message):
    """You can have an Open-Chain robot meaning a single path
    You can have a closed chain mechanism or Four-bar (closed loop)
    Or multiple paths with closed loop like a stewart platform

    *
    Joints
    A way to define the motion between various group connections
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class JointDefinitionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Joint: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Joint | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class JointInstancesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___JointInstance: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___JointInstance | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class MotorDefinitionsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> motor_pb2.Motor: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: motor_pb2.Motor | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    INFO_FIELD_NUMBER: builtins.int
    JOINT_DEFINITIONS_FIELD_NUMBER: builtins.int
    JOINT_INSTANCES_FIELD_NUMBER: builtins.int
    RIGID_GROUPS_FIELD_NUMBER: builtins.int
    MOTOR_DEFINITIONS_FIELD_NUMBER: builtins.int
    @property
    def info(self) -> types_pb2.Info:
        """/ name, version, uid"""

    @property
    def joint_definitions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Joint]:
        """/ Unique Joint Implementations"""

    @property
    def joint_instances(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___JointInstance]:
        """/ Instances of the Joint Implementations"""

    @property
    def rigid_groups(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___RigidGroup]:
        """/ Rigidgroups ?"""

    @property
    def motor_definitions(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, motor_pb2.Motor]:
        """/ Collection of all Motors exported"""

    def __init__(
        self,
        *,
        info: types_pb2.Info | None = ...,
        joint_definitions: collections.abc.Mapping[builtins.str, global___Joint] | None = ...,
        joint_instances: collections.abc.Mapping[builtins.str, global___JointInstance] | None = ...,
        rigid_groups: collections.abc.Iterable[global___RigidGroup] | None = ...,
        motor_definitions: collections.abc.Mapping[builtins.str, motor_pb2.Motor] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["info", b"info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["info", b"info", "joint_definitions", b"joint_definitions", "joint_instances", b"joint_instances", "motor_definitions", b"motor_definitions", "rigid_groups", b"rigid_groups"]) -> None: ...

global___Joints = Joints

@typing.final
class JointInstance(google.protobuf.message.Message):
    """*
    Instance of a Joint that has a defined motion and limits.
    Instancing helps with identifiy closed loop systems.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INFO_FIELD_NUMBER: builtins.int
    ISENDEFFECTOR_FIELD_NUMBER: builtins.int
    PARENT_PART_FIELD_NUMBER: builtins.int
    CHILD_PART_FIELD_NUMBER: builtins.int
    JOINT_REFERENCE_FIELD_NUMBER: builtins.int
    OFFSET_FIELD_NUMBER: builtins.int
    PARTS_FIELD_NUMBER: builtins.int
    SIGNAL_REFERENCE_FIELD_NUMBER: builtins.int
    MOTION_LINK_FIELD_NUMBER: builtins.int
    isEndEffector: builtins.bool
    """Is this joint the end effector in the tree ? - might remove this"""
    parent_part: builtins.str
    """Object that contains the joint - the ID - Part usually"""
    child_part: builtins.str
    """Object that is affected by the joint - the ID - Part usually"""
    joint_reference: builtins.str
    """Reference to the Joint Definition"""
    signal_reference: builtins.str
    """Reference to the Signals as Drivers - use for signal_map in Assembly Data"""
    @property
    def info(self) -> types_pb2.Info:
        """Joint name, ID, version, etc"""

    @property
    def offset(self) -> types_pb2.Vector3:
        """Offset from Joint Definition Origin"""

    @property
    def parts(self) -> types_pb2.GraphContainer:
        """Part Instances all contained and affected by this joint directly - tree"""

    @property
    def motion_link(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MotionLink]:
        """Motion Links to other joints - ways to preserve motion between dynamic objects"""

    def __init__(
        self,
        *,
        info: types_pb2.Info | None = ...,
        isEndEffector: builtins.bool = ...,
        parent_part: builtins.str = ...,
        child_part: builtins.str = ...,
        joint_reference: builtins.str = ...,
        offset: types_pb2.Vector3 | None = ...,
        parts: types_pb2.GraphContainer | None = ...,
        signal_reference: builtins.str = ...,
        motion_link: collections.abc.Iterable[global___MotionLink] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["info", b"info", "offset", b"offset", "parts", b"parts"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["child_part", b"child_part", "info", b"info", "isEndEffector", b"isEndEffector", "joint_reference", b"joint_reference", "motion_link", b"motion_link", "offset", b"offset", "parent_part", b"parent_part", "parts", b"parts", "signal_reference", b"signal_reference"]) -> None: ...

global___JointInstance = JointInstance

@typing.final
class MotionLink(google.protobuf.message.Message):
    """*
    Motion Link Feature
    Enables the restriction on a joint to a certain range of motion as it is relative to another joint
    This is useful for moving parts restricted by belts and gears
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    JOINT_INSTANCE_FIELD_NUMBER: builtins.int
    RATIO_FIELD_NUMBER: builtins.int
    REVERSED_FIELD_NUMBER: builtins.int
    joint_instance: builtins.str
    """The Joint that this is linked to"""
    ratio: builtins.float
    """Ratio of motion between joint 1 and joint 2, we assume this is in mm for linear and deg for rotational"""
    reversed: builtins.bool
    """Reverse the relationship - turn in the same or opposite directions - useful when moving axis arent both the same way."""
    def __init__(
        self,
        *,
        joint_instance: builtins.str = ...,
        ratio: builtins.float = ...,
        reversed: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["joint_instance", b"joint_instance", "ratio", b"ratio", "reversed", b"reversed"]) -> None: ...

global___MotionLink = MotionLink

@typing.final
class Joint(google.protobuf.message.Message):
    """*
    A unqiue implementation of a joint motion
    Contains information about motion but not assembly relation
    NOTE: A spring motion is a joint with no driver
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INFO_FIELD_NUMBER: builtins.int
    ORIGIN_FIELD_NUMBER: builtins.int
    JOINT_MOTION_TYPE_FIELD_NUMBER: builtins.int
    BREAK_MAGNITUDE_FIELD_NUMBER: builtins.int
    ROTATIONAL_FIELD_NUMBER: builtins.int
    PRISMATIC_FIELD_NUMBER: builtins.int
    CUSTOM_FIELD_NUMBER: builtins.int
    USER_DATA_FIELD_NUMBER: builtins.int
    MOTOR_REFERENCE_FIELD_NUMBER: builtins.int
    joint_motion_type: global___JointMotion.ValueType
    """type of motion described by the joint"""
    break_magnitude: builtins.float
    """At what effort does it come apart at. - leave blank if it doesn't"""
    motor_reference: builtins.str
    """/ Motor definition reference to lookup in joints collection"""
    @property
    def info(self) -> types_pb2.Info:
        """/ Joint name, ID, version, etc"""

    @property
    def origin(self) -> types_pb2.Vector3:
        """Transform relative to the parent"""

    @property
    def rotational(self) -> global___RotationalJoint:
        """/ ONEOF rotational joint"""

    @property
    def prismatic(self) -> global___PrismaticJoint:
        """/ ONEOF prismatic joint"""

    @property
    def custom(self) -> global___CustomJoint:
        """/ ONEOF custom joint"""

    @property
    def user_data(self) -> types_pb2.UserData:
        """/ Additional information someone can query or store relative to your joint."""

    def __init__(
        self,
        *,
        info: types_pb2.Info | None = ...,
        origin: types_pb2.Vector3 | None = ...,
        joint_motion_type: global___JointMotion.ValueType = ...,
        break_magnitude: builtins.float = ...,
        rotational: global___RotationalJoint | None = ...,
        prismatic: global___PrismaticJoint | None = ...,
        custom: global___CustomJoint | None = ...,
        user_data: types_pb2.UserData | None = ...,
        motor_reference: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["JointMotion", b"JointMotion", "custom", b"custom", "info", b"info", "origin", b"origin", "prismatic", b"prismatic", "rotational", b"rotational", "user_data", b"user_data"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["JointMotion", b"JointMotion", "break_magnitude", b"break_magnitude", "custom", b"custom", "info", b"info", "joint_motion_type", b"joint_motion_type", "motor_reference", b"motor_reference", "origin", b"origin", "prismatic", b"prismatic", "rotational", b"rotational", "user_data", b"user_data"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["JointMotion", b"JointMotion"]) -> typing.Literal["rotational", "prismatic", "custom"] | None: ...

global___Joint = Joint

@typing.final
class Dynamics(google.protobuf.message.Message):
    """*
    Dynamics specify the mechanical effects on the motion.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DAMPING_FIELD_NUMBER: builtins.int
    FRICTION_FIELD_NUMBER: builtins.int
    damping: builtins.float
    """/ Damping effect on a given joint motion"""
    friction: builtins.float
    """/ Friction effect on a given joint motion"""
    def __init__(
        self,
        *,
        damping: builtins.float = ...,
        friction: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["damping", b"damping", "friction", b"friction"]) -> None: ...

global___Dynamics = Dynamics

@typing.final
class Limits(google.protobuf.message.Message):
    """*
    Limits specify the mechanical range of a given joint.

    TODO: Add units
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOWER_FIELD_NUMBER: builtins.int
    UPPER_FIELD_NUMBER: builtins.int
    VELOCITY_FIELD_NUMBER: builtins.int
    EFFORT_FIELD_NUMBER: builtins.int
    lower: builtins.float
    """/ Lower Limit corresponds to default displacement"""
    upper: builtins.float
    """/ Upper Limit is the joint extent"""
    velocity: builtins.float
    """/ Velocity Max in m/s^2 (angular for rotational)"""
    effort: builtins.float
    """/ Effort is the absolute force a joint can apply for a given instant - ROS has a great article on it http://wiki.ros.org/pr2_controller_manager/safety_limits"""
    def __init__(
        self,
        *,
        lower: builtins.float = ...,
        upper: builtins.float = ...,
        velocity: builtins.float = ...,
        effort: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["effort", b"effort", "lower", b"lower", "upper", b"upper", "velocity", b"velocity"]) -> None: ...

global___Limits = Limits

@typing.final
class Safety(google.protobuf.message.Message):
    """*
    Safety switch configuration for a given joint.
    Can usefully indicate a bounds issue.
    Inspired by the URDF implementation.

    This should really just be created by the controller.
    http://wiki.ros.org/pr2_controller_manager/safety_limits
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LOWER_LIMIT_FIELD_NUMBER: builtins.int
    UPPER_LIMIT_FIELD_NUMBER: builtins.int
    K_POSITION_FIELD_NUMBER: builtins.int
    K_VELOCITY_FIELD_NUMBER: builtins.int
    lower_limit: builtins.float
    """/ Lower software limit"""
    upper_limit: builtins.float
    """/ Upper Software limit"""
    k_position: builtins.float
    """/ Relation between position and velocity limit"""
    k_velocity: builtins.float
    """/ Relation between effort and velocity limit"""
    def __init__(
        self,
        *,
        lower_limit: builtins.float = ...,
        upper_limit: builtins.float = ...,
        k_position: builtins.float = ...,
        k_velocity: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["k_position", b"k_position", "k_velocity", b"k_velocity", "lower_limit", b"lower_limit", "upper_limit", b"upper_limit"]) -> None: ...

global___Safety = Safety

@typing.final
class DOF(google.protobuf.message.Message):
    """*
    DOF - representing the construction of a joint motion
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    AXIS_FIELD_NUMBER: builtins.int
    PIVOTDIRECTION_FIELD_NUMBER: builtins.int
    DYNAMICS_FIELD_NUMBER: builtins.int
    LIMITS_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    name: builtins.str
    """/ In case you want to name this degree of freedom"""
    pivotDirection: types_pb2.Axis.ValueType
    """/ Direction the axis vector is offset from - this has an incorrect naming scheme"""
    value: builtins.float
    """/ Current value of the DOF"""
    @property
    def axis(self) -> types_pb2.Vector3:
        """/ Axis the degree of freedom is pivoting by"""

    @property
    def dynamics(self) -> global___Dynamics:
        """/ Dynamic properties of this joint pivot"""

    @property
    def limits(self) -> global___Limits:
        """/ Limits of this freedom"""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        axis: types_pb2.Vector3 | None = ...,
        pivotDirection: types_pb2.Axis.ValueType = ...,
        dynamics: global___Dynamics | None = ...,
        limits: global___Limits | None = ...,
        value: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["axis", b"axis", "dynamics", b"dynamics", "limits", b"limits"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["axis", b"axis", "dynamics", b"dynamics", "limits", b"limits", "name", b"name", "pivotDirection", b"pivotDirection", "value", b"value"]) -> None: ...

global___DOF = DOF

@typing.final
class CustomJoint(google.protobuf.message.Message):
    """*
    CustomJoint is a joint with N degrees of freedom specified.
    There should be input validation to handle max freedom case.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DOFS_FIELD_NUMBER: builtins.int
    @property
    def dofs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DOF]:
        """/ A list of degrees of freedom that the joint can contain"""

    def __init__(
        self,
        *,
        dofs: collections.abc.Iterable[global___DOF] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["dofs", b"dofs"]) -> None: ...

global___CustomJoint = CustomJoint

@typing.final
class RotationalJoint(google.protobuf.message.Message):
    """*
    RotationalJoint describes a joint with rotational translation.
    This is the exact same as prismatic for now.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ROTATIONAL_FREEDOM_FIELD_NUMBER: builtins.int
    @property
    def rotational_freedom(self) -> global___DOF: ...
    def __init__(
        self,
        *,
        rotational_freedom: global___DOF | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["rotational_freedom", b"rotational_freedom"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["rotational_freedom", b"rotational_freedom"]) -> None: ...

global___RotationalJoint = RotationalJoint

@typing.final
class BallJoint(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    YAW_FIELD_NUMBER: builtins.int
    PITCH_FIELD_NUMBER: builtins.int
    ROTATION_FIELD_NUMBER: builtins.int
    @property
    def yaw(self) -> global___DOF: ...
    @property
    def pitch(self) -> global___DOF: ...
    @property
    def rotation(self) -> global___DOF: ...
    def __init__(
        self,
        *,
        yaw: global___DOF | None = ...,
        pitch: global___DOF | None = ...,
        rotation: global___DOF | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["pitch", b"pitch", "rotation", b"rotation", "yaw", b"yaw"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["pitch", b"pitch", "rotation", b"rotation", "yaw", b"yaw"]) -> None: ...

global___BallJoint = BallJoint

@typing.final
class PrismaticJoint(google.protobuf.message.Message):
    """*
    Prismatic Joint describes a motion that translates the position in a single axis
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PRISMATIC_FREEDOM_FIELD_NUMBER: builtins.int
    @property
    def prismatic_freedom(self) -> global___DOF: ...
    def __init__(
        self,
        *,
        prismatic_freedom: global___DOF | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["prismatic_freedom", b"prismatic_freedom"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["prismatic_freedom", b"prismatic_freedom"]) -> None: ...

global___PrismaticJoint = PrismaticJoint

@typing.final
class RigidGroup(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    OCCURRENCES_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def occurrences(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """this could be the full path of the occurrence in order to make it easier to assembly them possibly - just parse on the unity side"""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        occurrences: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "occurrences", b"occurrences"]) -> None: ...

global___RigidGroup = RigidGroup
