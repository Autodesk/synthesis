// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gltf_extras.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Synthesis.Gltfextras {

  /// <summary>Holder for reflection information generated from gltf_extras.proto</summary>
  public static partial class GltfExtrasReflection {

    #region Descriptor
    /// <summary>File descriptor for gltf_extras.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GltfExtrasReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFnbHRmX2V4dHJhcy5wcm90bxIUc3ludGhlc2lzLmdsdGZleHRyYXMaGWdv",
            "b2dsZS9wcm90b2J1Zi9hbnkucHJvdG8idgoSUGh5c2ljYWxQcm9wZXJ0aWVz",
            "EgwKBG1hc3MYAiABKAESDgoGdm9sdW1lGAMgASgBEgwKBGFyZWEYBCABKAES",
            "NAoMY2VudGVyT2ZNYXNzGAUgASgLMh4uc3ludGhlc2lzLmdsdGZleHRyYXMu",
            "VmVjdG9yM0Qi0AYKBUpvaW50EiwKBmhlYWRlchgBIAEoCzIcLnN5bnRoZXNp",
            "cy5nbHRmZXh0cmFzLkhlYWRlchIuCgZvcmlnaW4YAiABKAsyHi5zeW50aGVz",
            "aXMuZ2x0ZmV4dHJhcy5WZWN0b3IzRBIQCghpc0xvY2tlZBgDIAEoCBIUCgxp",
            "c1N1cHByZXNzZWQYBCABKAgSGQoRb2NjdXJyZW5jZU9uZVVVSUQYBSABKAkS",
            "GQoRb2NjdXJyZW5jZVR3b1VVSUQYBiABKAkSPwoKYXR0cmlidXRlcxgHIAMo",
            "CzIrLnN5bnRoZXNpcy5nbHRmZXh0cmFzLkpvaW50LkF0dHJpYnV0ZXNFbnRy",
            "eRJCChByaWdpZEpvaW50TW90aW9uGAggASgLMiYuc3ludGhlc2lzLmdsdGZl",
            "eHRyYXMuUmlnaWRKb2ludE1vdGlvbkgAEkgKE3Jldm9sdXRlSm9pbnRNb3Rp",
            "b24YCSABKAsyKS5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5SZXZvbHV0ZUpvaW50",
            "TW90aW9uSAASRAoRc2xpZGVySm9pbnRNb3Rpb24YCiABKAsyJy5zeW50aGVz",
            "aXMuZ2x0ZmV4dHJhcy5TbGlkZXJKb2ludE1vdGlvbkgAEk4KFmN5bGluZHJp",
            "Y2FsSm9pbnRNb3Rpb24YCyABKAsyLC5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5D",
            "eWxpbmRyaWNhbEpvaW50TW90aW9uSAASRgoScGluU2xvdEpvaW50TW90aW9u",
            "GAwgASgLMiguc3ludGhlc2lzLmdsdGZleHRyYXMuUGluU2xvdEpvaW50TW90",
            "aW9uSAASRAoRcGxhbmFySm9pbnRNb3Rpb24YDSABKAsyJy5zeW50aGVzaXMu",
            "Z2x0ZmV4dHJhcy5QbGFuYXJKb2ludE1vdGlvbkgAEkAKD2JhbGxKb2ludE1v",
            "dGlvbhgOIAEoCzIlLnN5bnRoZXNpcy5nbHRmZXh0cmFzLkJhbGxKb2ludE1v",
            "dGlvbkgAGkcKD0F0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSIwoFdmFs",
            "dWUYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55OgI4AUINCgtqb2ludE1v",
            "dGlvbiISChBSaWdpZEpvaW50TW90aW9uIqMBChNSZXZvbHV0ZUpvaW50TW90",
            "aW9uEjoKEnJvdGF0aW9uQXhpc1ZlY3RvchgBIAEoCzIeLnN5bnRoZXNpcy5n",
            "bHRmZXh0cmFzLlZlY3RvcjNEEhUKDXJvdGF0aW9uVmFsdWUYAiABKAESOQoO",
            "cm90YXRpb25MaW1pdHMYAyABKAsyIS5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5K",
            "b2ludExpbWl0cyKdAQoRU2xpZGVySm9pbnRNb3Rpb24SPAoUc2xpZGVEaXJl",
            "Y3Rpb25WZWN0b3IYASABKAsyHi5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5WZWN0",
            "b3IzRBISCgpzbGlkZVZhbHVlGAIgASgBEjYKC3NsaWRlTGltaXRzGAMgASgL",
            "MiEuc3ludGhlc2lzLmdsdGZleHRyYXMuSm9pbnRMaW1pdHMi8gEKFkN5bGlu",
            "ZHJpY2FsSm9pbnRNb3Rpb24SOgoScm90YXRpb25BeGlzVmVjdG9yGAEgASgL",
            "Mh4uc3ludGhlc2lzLmdsdGZleHRyYXMuVmVjdG9yM0QSFQoNcm90YXRpb25W",
            "YWx1ZRgCIAEoARI5Cg5yb3RhdGlvbkxpbWl0cxgDIAEoCzIhLnN5bnRoZXNp",
            "cy5nbHRmZXh0cmFzLkpvaW50TGltaXRzEhIKCnNsaWRlVmFsdWUYBCABKAES",
            "NgoLc2xpZGVMaW1pdHMYBSABKAsyIS5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5K",
            "b2ludExpbWl0cyKsAgoSUGluU2xvdEpvaW50TW90aW9uEjoKEnJvdGF0aW9u",
            "QXhpc1ZlY3RvchgBIAEoCzIeLnN5bnRoZXNpcy5nbHRmZXh0cmFzLlZlY3Rv",
            "cjNEEhUKDXJvdGF0aW9uVmFsdWUYAiABKAESOQoOcm90YXRpb25MaW1pdHMY",
            "AyABKAsyIS5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5Kb2ludExpbWl0cxI8ChRz",
            "bGlkZURpcmVjdGlvblZlY3RvchgEIAEoCzIeLnN5bnRoZXNpcy5nbHRmZXh0",
            "cmFzLlZlY3RvcjNEEhIKCnNsaWRlVmFsdWUYBSABKAESNgoLc2xpZGVMaW1p",
            "dHMYBiABKAsyIS5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5Kb2ludExpbWl0cyLo",
            "AwoRUGxhbmFySm9pbnRNb3Rpb24SPQoVbm9ybWFsRGlyZWN0aW9uVmVjdG9y",
            "GAEgASgLMh4uc3ludGhlc2lzLmdsdGZleHRyYXMuVmVjdG9yM0QSQwobcHJp",
            "bWFyeVNsaWRlRGlyZWN0aW9uVmVjdG9yGAIgASgLMh4uc3ludGhlc2lzLmds",
            "dGZleHRyYXMuVmVjdG9yM0QSGQoRcHJpbWFyeVNsaWRlVmFsdWUYAyABKAES",
            "PQoScHJpbWFyeVNsaWRlTGltaXRzGAQgASgLMiEuc3ludGhlc2lzLmdsdGZl",
            "eHRyYXMuSm9pbnRMaW1pdHMSRQodc2Vjb25kYXJ5U2xpZGVEaXJlY3Rpb25W",
            "ZWN0b3IYBSABKAsyHi5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5WZWN0b3IzRBIb",
            "ChNzZWNvbmRhcnlTbGlkZVZhbHVlGAYgASgBEj8KFHNlY29uZGFyeVNsaWRl",
            "TGltaXRzGAcgASgLMiEuc3ludGhlc2lzLmdsdGZleHRyYXMuSm9pbnRMaW1p",
            "dHMSFQoNcm90YXRpb25WYWx1ZRgIIAEoARI5Cg5yb3RhdGlvbkxpbWl0cxgJ",
            "IAEoCzIhLnN5bnRoZXNpcy5nbHRmZXh0cmFzLkpvaW50TGltaXRzIqYDCg9C",
            "YWxsSm9pbnRNb3Rpb24SOwoTcm9sbERpcmVjdGlvblZlY3RvchgBIAEoCzIe",
            "LnN5bnRoZXNpcy5nbHRmZXh0cmFzLlZlY3RvcjNEEhEKCXJvbGxWYWx1ZRgC",
            "IAEoARI1Cgpyb2xsTGltaXRzGAMgASgLMiEuc3ludGhlc2lzLmdsdGZleHRy",
            "YXMuSm9pbnRMaW1pdHMSPAoUcGl0Y2hEaXJlY3Rpb25WZWN0b3IYBCABKAsy",
            "Hi5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5WZWN0b3IzRBISCgpwaXRjaFZhbHVl",
            "GAUgASgBEjYKC3BpdGNoTGltaXRzGAYgASgLMiEuc3ludGhlc2lzLmdsdGZl",
            "eHRyYXMuSm9pbnRMaW1pdHMSOgoSeWF3RGlyZWN0aW9uVmVjdG9yGAcgASgL",
            "Mh4uc3ludGhlc2lzLmdsdGZleHRyYXMuVmVjdG9yM0QSEAoIeWF3VmFsdWUY",
            "CCABKAESNAoJeWF3TGltaXRzGAkgASgLMiEuc3ludGhlc2lzLmdsdGZleHRy",
            "YXMuSm9pbnRMaW1pdHMipgEKC0pvaW50TGltaXRzEh0KFWlzTWF4aW11bVZh",
            "bHVlRW5hYmxlZBgBIAEoCBIdChVpc01pbmltdW1WYWx1ZUVuYWJsZWQYAiAB",
            "KAgSGgoSaXNSZXN0VmFsdWVFbmFibGVkGAMgASgIEhQKDG1heGltdW1WYWx1",
            "ZRgEIAEoARIUCgxtaW5pbXVtVmFsdWUYBSABKAESEQoJcmVzdFZhbHVlGAYg",
            "ASgBIiQKBkhlYWRlchIMCgR1dWlkGAEgASgJEgwKBG5hbWUYAiABKAkiKwoI",
            "VmVjdG9yM0QSCQoBeBgBIAEoARIJCgF5GAIgASgBEgkKAXoYAyABKAFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.PhysicalProperties), global::Synthesis.Gltfextras.PhysicalProperties.Parser, new[]{ "Mass", "Volume", "Area", "CenterOfMass" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Joint), global::Synthesis.Gltfextras.Joint.Parser, new[]{ "Header", "Origin", "IsLocked", "IsSuppressed", "OccurrenceOneUUID", "OccurrenceTwoUUID", "Attributes", "RigidJointMotion", "RevoluteJointMotion", "SliderJointMotion", "CylindricalJointMotion", "PinSlotJointMotion", "PlanarJointMotion", "BallJointMotion" }, new[]{ "JointMotion" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.RigidJointMotion), global::Synthesis.Gltfextras.RigidJointMotion.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.RevoluteJointMotion), global::Synthesis.Gltfextras.RevoluteJointMotion.Parser, new[]{ "RotationAxisVector", "RotationValue", "RotationLimits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.SliderJointMotion), global::Synthesis.Gltfextras.SliderJointMotion.Parser, new[]{ "SlideDirectionVector", "SlideValue", "SlideLimits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.CylindricalJointMotion), global::Synthesis.Gltfextras.CylindricalJointMotion.Parser, new[]{ "RotationAxisVector", "RotationValue", "RotationLimits", "SlideValue", "SlideLimits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.PinSlotJointMotion), global::Synthesis.Gltfextras.PinSlotJointMotion.Parser, new[]{ "RotationAxisVector", "RotationValue", "RotationLimits", "SlideDirectionVector", "SlideValue", "SlideLimits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.PlanarJointMotion), global::Synthesis.Gltfextras.PlanarJointMotion.Parser, new[]{ "NormalDirectionVector", "PrimarySlideDirectionVector", "PrimarySlideValue", "PrimarySlideLimits", "SecondarySlideDirectionVector", "SecondarySlideValue", "SecondarySlideLimits", "RotationValue", "RotationLimits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.BallJointMotion), global::Synthesis.Gltfextras.BallJointMotion.Parser, new[]{ "RollDirectionVector", "RollValue", "RollLimits", "PitchDirectionVector", "PitchValue", "PitchLimits", "YawDirectionVector", "YawValue", "YawLimits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.JointLimits), global::Synthesis.Gltfextras.JointLimits.Parser, new[]{ "IsMaximumValueEnabled", "IsMinimumValueEnabled", "IsRestValueEnabled", "MaximumValue", "MinimumValue", "RestValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Header), global::Synthesis.Gltfextras.Header.Parser, new[]{ "Uuid", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Vector3D), global::Synthesis.Gltfextras.Vector3D.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PhysicalProperties : pb::IMessage<PhysicalProperties> {
    private static readonly pb::MessageParser<PhysicalProperties> _parser = new pb::MessageParser<PhysicalProperties>(() => new PhysicalProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhysicalProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhysicalProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhysicalProperties(PhysicalProperties other) : this() {
      mass_ = other.mass_;
      volume_ = other.volume_;
      area_ = other.area_;
      centerOfMass_ = other.centerOfMass_ != null ? other.centerOfMass_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhysicalProperties Clone() {
      return new PhysicalProperties(this);
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 2;
    private double mass_;
    /// <summary>
    /// kg
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mass {
      get { return mass_; }
      set {
        mass_ = value;
      }
    }

    /// <summary>Field number for the "volume" field.</summary>
    public const int VolumeFieldNumber = 3;
    private double volume_;
    /// <summary>
    ///cm^3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Volume {
      get { return volume_; }
      set {
        volume_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 4;
    private double area_;
    /// <summary>
    /// cm^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "centerOfMass" field.</summary>
    public const int CenterOfMassFieldNumber = 5;
    private global::Synthesis.Gltfextras.Vector3D centerOfMass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D CenterOfMass {
      get { return centerOfMass_; }
      set {
        centerOfMass_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhysicalProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhysicalProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mass, other.Mass)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Area, other.Area)) return false;
      if (!object.Equals(CenterOfMass, other.CenterOfMass)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mass != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mass);
      if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
      if (Area != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Area);
      if (centerOfMass_ != null) hash ^= CenterOfMass.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mass != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Mass);
      }
      if (Volume != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Volume);
      }
      if (Area != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Area);
      }
      if (centerOfMass_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CenterOfMass);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mass != 0D) {
        size += 1 + 8;
      }
      if (Volume != 0D) {
        size += 1 + 8;
      }
      if (Area != 0D) {
        size += 1 + 8;
      }
      if (centerOfMass_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterOfMass);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhysicalProperties other) {
      if (other == null) {
        return;
      }
      if (other.Mass != 0D) {
        Mass = other.Mass;
      }
      if (other.Volume != 0D) {
        Volume = other.Volume;
      }
      if (other.Area != 0D) {
        Area = other.Area;
      }
      if (other.centerOfMass_ != null) {
        if (centerOfMass_ == null) {
          CenterOfMass = new global::Synthesis.Gltfextras.Vector3D();
        }
        CenterOfMass.MergeFrom(other.CenterOfMass);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 17: {
            Mass = input.ReadDouble();
            break;
          }
          case 25: {
            Volume = input.ReadDouble();
            break;
          }
          case 33: {
            Area = input.ReadDouble();
            break;
          }
          case 42: {
            if (centerOfMass_ == null) {
              CenterOfMass = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(CenterOfMass);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///
  ///We're choosing not to include info about the joint geometry, such as Joint.angle, Joint.isFlipped, Joint.offset, etc. as raw brep data is not encoded anyways
  /// </summary>
  public sealed partial class Joint : pb::IMessage<Joint> {
    private static readonly pb::MessageParser<Joint> _parser = new pb::MessageParser<Joint>(() => new Joint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Joint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Joint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Joint(Joint other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      isLocked_ = other.isLocked_;
      isSuppressed_ = other.isSuppressed_;
      occurrenceOneUUID_ = other.occurrenceOneUUID_;
      occurrenceTwoUUID_ = other.occurrenceTwoUUID_;
      attributes_ = other.attributes_.Clone();
      switch (other.JointMotionCase) {
        case JointMotionOneofCase.RigidJointMotion:
          RigidJointMotion = other.RigidJointMotion.Clone();
          break;
        case JointMotionOneofCase.RevoluteJointMotion:
          RevoluteJointMotion = other.RevoluteJointMotion.Clone();
          break;
        case JointMotionOneofCase.SliderJointMotion:
          SliderJointMotion = other.SliderJointMotion.Clone();
          break;
        case JointMotionOneofCase.CylindricalJointMotion:
          CylindricalJointMotion = other.CylindricalJointMotion.Clone();
          break;
        case JointMotionOneofCase.PinSlotJointMotion:
          PinSlotJointMotion = other.PinSlotJointMotion.Clone();
          break;
        case JointMotionOneofCase.PlanarJointMotion:
          PlanarJointMotion = other.PlanarJointMotion.Clone();
          break;
        case JointMotionOneofCase.BallJointMotion:
          BallJointMotion = other.BallJointMotion.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Joint Clone() {
      return new Joint(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Synthesis.Gltfextras.Header header_;
    /// <summary>
    /// no revisionId or description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 2;
    private global::Synthesis.Gltfextras.Vector3D origin_;
    /// <summary>
    /// In the root component coordinate frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "isLocked" field.</summary>
    public const int IsLockedFieldNumber = 3;
    private bool isLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    /// <summary>Field number for the "isSuppressed" field.</summary>
    public const int IsSuppressedFieldNumber = 4;
    private bool isSuppressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuppressed {
      get { return isSuppressed_; }
      set {
        isSuppressed_ = value;
      }
    }

    /// <summary>Field number for the "occurrenceOneUUID" field.</summary>
    public const int OccurrenceOneUUIDFieldNumber = 5;
    private string occurrenceOneUUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OccurrenceOneUUID {
      get { return occurrenceOneUUID_; }
      set {
        occurrenceOneUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrenceTwoUUID" field.</summary>
    public const int OccurrenceTwoUUIDFieldNumber = 6;
    private string occurrenceTwoUUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OccurrenceTwoUUID {
      get { return occurrenceTwoUUID_; }
      set {
        occurrenceTwoUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 7;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_attributes_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 58);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> attributes_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "rigidJointMotion" field.</summary>
    public const int RigidJointMotionFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.RigidJointMotion RigidJointMotion {
      get { return jointMotionCase_ == JointMotionOneofCase.RigidJointMotion ? (global::Synthesis.Gltfextras.RigidJointMotion) jointMotion_ : null; }
      set {
        jointMotion_ = value;
        jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.RigidJointMotion;
      }
    }

    /// <summary>Field number for the "revoluteJointMotion" field.</summary>
    public const int RevoluteJointMotionFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.RevoluteJointMotion RevoluteJointMotion {
      get { return jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion ? (global::Synthesis.Gltfextras.RevoluteJointMotion) jointMotion_ : null; }
      set {
        jointMotion_ = value;
        jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.RevoluteJointMotion;
      }
    }

    /// <summary>Field number for the "sliderJointMotion" field.</summary>
    public const int SliderJointMotionFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.SliderJointMotion SliderJointMotion {
      get { return jointMotionCase_ == JointMotionOneofCase.SliderJointMotion ? (global::Synthesis.Gltfextras.SliderJointMotion) jointMotion_ : null; }
      set {
        jointMotion_ = value;
        jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.SliderJointMotion;
      }
    }

    /// <summary>Field number for the "cylindricalJointMotion" field.</summary>
    public const int CylindricalJointMotionFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.CylindricalJointMotion CylindricalJointMotion {
      get { return jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion ? (global::Synthesis.Gltfextras.CylindricalJointMotion) jointMotion_ : null; }
      set {
        jointMotion_ = value;
        jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.CylindricalJointMotion;
      }
    }

    /// <summary>Field number for the "pinSlotJointMotion" field.</summary>
    public const int PinSlotJointMotionFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.PinSlotJointMotion PinSlotJointMotion {
      get { return jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion ? (global::Synthesis.Gltfextras.PinSlotJointMotion) jointMotion_ : null; }
      set {
        jointMotion_ = value;
        jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.PinSlotJointMotion;
      }
    }

    /// <summary>Field number for the "planarJointMotion" field.</summary>
    public const int PlanarJointMotionFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.PlanarJointMotion PlanarJointMotion {
      get { return jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion ? (global::Synthesis.Gltfextras.PlanarJointMotion) jointMotion_ : null; }
      set {
        jointMotion_ = value;
        jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.PlanarJointMotion;
      }
    }

    /// <summary>Field number for the "ballJointMotion" field.</summary>
    public const int BallJointMotionFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.BallJointMotion BallJointMotion {
      get { return jointMotionCase_ == JointMotionOneofCase.BallJointMotion ? (global::Synthesis.Gltfextras.BallJointMotion) jointMotion_ : null; }
      set {
        jointMotion_ = value;
        jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.BallJointMotion;
      }
    }

    private object jointMotion_;
    /// <summary>Enum of possible cases for the "jointMotion" oneof.</summary>
    public enum JointMotionOneofCase {
      None = 0,
      RigidJointMotion = 8,
      RevoluteJointMotion = 9,
      SliderJointMotion = 10,
      CylindricalJointMotion = 11,
      PinSlotJointMotion = 12,
      PlanarJointMotion = 13,
      BallJointMotion = 14,
    }
    private JointMotionOneofCase jointMotionCase_ = JointMotionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointMotionOneofCase JointMotionCase {
      get { return jointMotionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJointMotion() {
      jointMotionCase_ = JointMotionOneofCase.None;
      jointMotion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Joint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Joint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      if (IsLocked != other.IsLocked) return false;
      if (IsSuppressed != other.IsSuppressed) return false;
      if (OccurrenceOneUUID != other.OccurrenceOneUUID) return false;
      if (OccurrenceTwoUUID != other.OccurrenceTwoUUID) return false;
      if (!Attributes.Equals(other.Attributes)) return false;
      if (!object.Equals(RigidJointMotion, other.RigidJointMotion)) return false;
      if (!object.Equals(RevoluteJointMotion, other.RevoluteJointMotion)) return false;
      if (!object.Equals(SliderJointMotion, other.SliderJointMotion)) return false;
      if (!object.Equals(CylindricalJointMotion, other.CylindricalJointMotion)) return false;
      if (!object.Equals(PinSlotJointMotion, other.PinSlotJointMotion)) return false;
      if (!object.Equals(PlanarJointMotion, other.PlanarJointMotion)) return false;
      if (!object.Equals(BallJointMotion, other.BallJointMotion)) return false;
      if (JointMotionCase != other.JointMotionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (IsLocked != false) hash ^= IsLocked.GetHashCode();
      if (IsSuppressed != false) hash ^= IsSuppressed.GetHashCode();
      if (OccurrenceOneUUID.Length != 0) hash ^= OccurrenceOneUUID.GetHashCode();
      if (OccurrenceTwoUUID.Length != 0) hash ^= OccurrenceTwoUUID.GetHashCode();
      hash ^= Attributes.GetHashCode();
      if (jointMotionCase_ == JointMotionOneofCase.RigidJointMotion) hash ^= RigidJointMotion.GetHashCode();
      if (jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion) hash ^= RevoluteJointMotion.GetHashCode();
      if (jointMotionCase_ == JointMotionOneofCase.SliderJointMotion) hash ^= SliderJointMotion.GetHashCode();
      if (jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion) hash ^= CylindricalJointMotion.GetHashCode();
      if (jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion) hash ^= PinSlotJointMotion.GetHashCode();
      if (jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion) hash ^= PlanarJointMotion.GetHashCode();
      if (jointMotionCase_ == JointMotionOneofCase.BallJointMotion) hash ^= BallJointMotion.GetHashCode();
      hash ^= (int) jointMotionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (origin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Origin);
      }
      if (IsLocked != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsLocked);
      }
      if (IsSuppressed != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSuppressed);
      }
      if (OccurrenceOneUUID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OccurrenceOneUUID);
      }
      if (OccurrenceTwoUUID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OccurrenceTwoUUID);
      }
      attributes_.WriteTo(output, _map_attributes_codec);
      if (jointMotionCase_ == JointMotionOneofCase.RigidJointMotion) {
        output.WriteRawTag(66);
        output.WriteMessage(RigidJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion) {
        output.WriteRawTag(74);
        output.WriteMessage(RevoluteJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.SliderJointMotion) {
        output.WriteRawTag(82);
        output.WriteMessage(SliderJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion) {
        output.WriteRawTag(90);
        output.WriteMessage(CylindricalJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion) {
        output.WriteRawTag(98);
        output.WriteMessage(PinSlotJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion) {
        output.WriteRawTag(106);
        output.WriteMessage(PlanarJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.BallJointMotion) {
        output.WriteRawTag(114);
        output.WriteMessage(BallJointMotion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (IsSuppressed != false) {
        size += 1 + 1;
      }
      if (OccurrenceOneUUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OccurrenceOneUUID);
      }
      if (OccurrenceTwoUUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OccurrenceTwoUUID);
      }
      size += attributes_.CalculateSize(_map_attributes_codec);
      if (jointMotionCase_ == JointMotionOneofCase.RigidJointMotion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RigidJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevoluteJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.SliderJointMotion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SliderJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CylindricalJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PinSlotJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlanarJointMotion);
      }
      if (jointMotionCase_ == JointMotionOneofCase.BallJointMotion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BallJointMotion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Joint other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Synthesis.Gltfextras.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::Synthesis.Gltfextras.Vector3D();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.IsLocked != false) {
        IsLocked = other.IsLocked;
      }
      if (other.IsSuppressed != false) {
        IsSuppressed = other.IsSuppressed;
      }
      if (other.OccurrenceOneUUID.Length != 0) {
        OccurrenceOneUUID = other.OccurrenceOneUUID;
      }
      if (other.OccurrenceTwoUUID.Length != 0) {
        OccurrenceTwoUUID = other.OccurrenceTwoUUID;
      }
      attributes_.Add(other.attributes_);
      switch (other.JointMotionCase) {
        case JointMotionOneofCase.RigidJointMotion:
          if (RigidJointMotion == null) {
            RigidJointMotion = new global::Synthesis.Gltfextras.RigidJointMotion();
          }
          RigidJointMotion.MergeFrom(other.RigidJointMotion);
          break;
        case JointMotionOneofCase.RevoluteJointMotion:
          if (RevoluteJointMotion == null) {
            RevoluteJointMotion = new global::Synthesis.Gltfextras.RevoluteJointMotion();
          }
          RevoluteJointMotion.MergeFrom(other.RevoluteJointMotion);
          break;
        case JointMotionOneofCase.SliderJointMotion:
          if (SliderJointMotion == null) {
            SliderJointMotion = new global::Synthesis.Gltfextras.SliderJointMotion();
          }
          SliderJointMotion.MergeFrom(other.SliderJointMotion);
          break;
        case JointMotionOneofCase.CylindricalJointMotion:
          if (CylindricalJointMotion == null) {
            CylindricalJointMotion = new global::Synthesis.Gltfextras.CylindricalJointMotion();
          }
          CylindricalJointMotion.MergeFrom(other.CylindricalJointMotion);
          break;
        case JointMotionOneofCase.PinSlotJointMotion:
          if (PinSlotJointMotion == null) {
            PinSlotJointMotion = new global::Synthesis.Gltfextras.PinSlotJointMotion();
          }
          PinSlotJointMotion.MergeFrom(other.PinSlotJointMotion);
          break;
        case JointMotionOneofCase.PlanarJointMotion:
          if (PlanarJointMotion == null) {
            PlanarJointMotion = new global::Synthesis.Gltfextras.PlanarJointMotion();
          }
          PlanarJointMotion.MergeFrom(other.PlanarJointMotion);
          break;
        case JointMotionOneofCase.BallJointMotion:
          if (BallJointMotion == null) {
            BallJointMotion = new global::Synthesis.Gltfextras.BallJointMotion();
          }
          BallJointMotion.MergeFrom(other.BallJointMotion);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Synthesis.Gltfextras.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (origin_ == null) {
              Origin = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 24: {
            IsLocked = input.ReadBool();
            break;
          }
          case 32: {
            IsSuppressed = input.ReadBool();
            break;
          }
          case 42: {
            OccurrenceOneUUID = input.ReadString();
            break;
          }
          case 50: {
            OccurrenceTwoUUID = input.ReadString();
            break;
          }
          case 58: {
            attributes_.AddEntriesFrom(input, _map_attributes_codec);
            break;
          }
          case 66: {
            global::Synthesis.Gltfextras.RigidJointMotion subBuilder = new global::Synthesis.Gltfextras.RigidJointMotion();
            if (jointMotionCase_ == JointMotionOneofCase.RigidJointMotion) {
              subBuilder.MergeFrom(RigidJointMotion);
            }
            input.ReadMessage(subBuilder);
            RigidJointMotion = subBuilder;
            break;
          }
          case 74: {
            global::Synthesis.Gltfextras.RevoluteJointMotion subBuilder = new global::Synthesis.Gltfextras.RevoluteJointMotion();
            if (jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion) {
              subBuilder.MergeFrom(RevoluteJointMotion);
            }
            input.ReadMessage(subBuilder);
            RevoluteJointMotion = subBuilder;
            break;
          }
          case 82: {
            global::Synthesis.Gltfextras.SliderJointMotion subBuilder = new global::Synthesis.Gltfextras.SliderJointMotion();
            if (jointMotionCase_ == JointMotionOneofCase.SliderJointMotion) {
              subBuilder.MergeFrom(SliderJointMotion);
            }
            input.ReadMessage(subBuilder);
            SliderJointMotion = subBuilder;
            break;
          }
          case 90: {
            global::Synthesis.Gltfextras.CylindricalJointMotion subBuilder = new global::Synthesis.Gltfextras.CylindricalJointMotion();
            if (jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion) {
              subBuilder.MergeFrom(CylindricalJointMotion);
            }
            input.ReadMessage(subBuilder);
            CylindricalJointMotion = subBuilder;
            break;
          }
          case 98: {
            global::Synthesis.Gltfextras.PinSlotJointMotion subBuilder = new global::Synthesis.Gltfextras.PinSlotJointMotion();
            if (jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion) {
              subBuilder.MergeFrom(PinSlotJointMotion);
            }
            input.ReadMessage(subBuilder);
            PinSlotJointMotion = subBuilder;
            break;
          }
          case 106: {
            global::Synthesis.Gltfextras.PlanarJointMotion subBuilder = new global::Synthesis.Gltfextras.PlanarJointMotion();
            if (jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion) {
              subBuilder.MergeFrom(PlanarJointMotion);
            }
            input.ReadMessage(subBuilder);
            PlanarJointMotion = subBuilder;
            break;
          }
          case 114: {
            global::Synthesis.Gltfextras.BallJointMotion subBuilder = new global::Synthesis.Gltfextras.BallJointMotion();
            if (jointMotionCase_ == JointMotionOneofCase.BallJointMotion) {
              subBuilder.MergeFrom(BallJointMotion);
            }
            input.ReadMessage(subBuilder);
            BallJointMotion = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class RigidJointMotion : pb::IMessage<RigidJointMotion> {
    private static readonly pb::MessageParser<RigidJointMotion> _parser = new pb::MessageParser<RigidJointMotion>(() => new RigidJointMotion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RigidJointMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RigidJointMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RigidJointMotion(RigidJointMotion other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RigidJointMotion Clone() {
      return new RigidJointMotion(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RigidJointMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RigidJointMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RigidJointMotion other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RevoluteJointMotion : pb::IMessage<RevoluteJointMotion> {
    private static readonly pb::MessageParser<RevoluteJointMotion> _parser = new pb::MessageParser<RevoluteJointMotion>(() => new RevoluteJointMotion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevoluteJointMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevoluteJointMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevoluteJointMotion(RevoluteJointMotion other) : this() {
      rotationAxisVector_ = other.rotationAxisVector_ != null ? other.rotationAxisVector_.Clone() : null;
      rotationValue_ = other.rotationValue_;
      rotationLimits_ = other.rotationLimits_ != null ? other.rotationLimits_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevoluteJointMotion Clone() {
      return new RevoluteJointMotion(this);
    }

    /// <summary>Field number for the "rotationAxisVector" field.</summary>
    public const int RotationAxisVectorFieldNumber = 1;
    private global::Synthesis.Gltfextras.Vector3D rotationAxisVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D RotationAxisVector {
      get { return rotationAxisVector_; }
      set {
        rotationAxisVector_ = value;
      }
    }

    /// <summary>Field number for the "rotationValue" field.</summary>
    public const int RotationValueFieldNumber = 2;
    private double rotationValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RotationValue {
      get { return rotationValue_; }
      set {
        rotationValue_ = value;
      }
    }

    /// <summary>Field number for the "rotationLimits" field.</summary>
    public const int RotationLimitsFieldNumber = 3;
    private global::Synthesis.Gltfextras.JointLimits rotationLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits RotationLimits {
      get { return rotationLimits_; }
      set {
        rotationLimits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevoluteJointMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevoluteJointMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RotationAxisVector, other.RotationAxisVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotationValue, other.RotationValue)) return false;
      if (!object.Equals(RotationLimits, other.RotationLimits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rotationAxisVector_ != null) hash ^= RotationAxisVector.GetHashCode();
      if (RotationValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotationValue);
      if (rotationLimits_ != null) hash ^= RotationLimits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rotationAxisVector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RotationAxisVector);
      }
      if (RotationValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RotationValue);
      }
      if (rotationLimits_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RotationLimits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rotationAxisVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationAxisVector);
      }
      if (RotationValue != 0D) {
        size += 1 + 8;
      }
      if (rotationLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationLimits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevoluteJointMotion other) {
      if (other == null) {
        return;
      }
      if (other.rotationAxisVector_ != null) {
        if (rotationAxisVector_ == null) {
          RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        RotationAxisVector.MergeFrom(other.RotationAxisVector);
      }
      if (other.RotationValue != 0D) {
        RotationValue = other.RotationValue;
      }
      if (other.rotationLimits_ != null) {
        if (rotationLimits_ == null) {
          RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        RotationLimits.MergeFrom(other.RotationLimits);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rotationAxisVector_ == null) {
              RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(RotationAxisVector);
            break;
          }
          case 17: {
            RotationValue = input.ReadDouble();
            break;
          }
          case 26: {
            if (rotationLimits_ == null) {
              RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(RotationLimits);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SliderJointMotion : pb::IMessage<SliderJointMotion> {
    private static readonly pb::MessageParser<SliderJointMotion> _parser = new pb::MessageParser<SliderJointMotion>(() => new SliderJointMotion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SliderJointMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliderJointMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliderJointMotion(SliderJointMotion other) : this() {
      slideDirectionVector_ = other.slideDirectionVector_ != null ? other.slideDirectionVector_.Clone() : null;
      slideValue_ = other.slideValue_;
      slideLimits_ = other.slideLimits_ != null ? other.slideLimits_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliderJointMotion Clone() {
      return new SliderJointMotion(this);
    }

    /// <summary>Field number for the "slideDirectionVector" field.</summary>
    public const int SlideDirectionVectorFieldNumber = 1;
    private global::Synthesis.Gltfextras.Vector3D slideDirectionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D SlideDirectionVector {
      get { return slideDirectionVector_; }
      set {
        slideDirectionVector_ = value;
      }
    }

    /// <summary>Field number for the "slideValue" field.</summary>
    public const int SlideValueFieldNumber = 2;
    private double slideValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SlideValue {
      get { return slideValue_; }
      set {
        slideValue_ = value;
      }
    }

    /// <summary>Field number for the "slideLimits" field.</summary>
    public const int SlideLimitsFieldNumber = 3;
    private global::Synthesis.Gltfextras.JointLimits slideLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits SlideLimits {
      get { return slideLimits_; }
      set {
        slideLimits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SliderJointMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SliderJointMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SlideDirectionVector, other.SlideDirectionVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SlideValue, other.SlideValue)) return false;
      if (!object.Equals(SlideLimits, other.SlideLimits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (slideDirectionVector_ != null) hash ^= SlideDirectionVector.GetHashCode();
      if (SlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SlideValue);
      if (slideLimits_ != null) hash ^= SlideLimits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (slideDirectionVector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SlideDirectionVector);
      }
      if (SlideValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SlideValue);
      }
      if (slideLimits_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SlideLimits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (slideDirectionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideDirectionVector);
      }
      if (SlideValue != 0D) {
        size += 1 + 8;
      }
      if (slideLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideLimits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SliderJointMotion other) {
      if (other == null) {
        return;
      }
      if (other.slideDirectionVector_ != null) {
        if (slideDirectionVector_ == null) {
          SlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        SlideDirectionVector.MergeFrom(other.SlideDirectionVector);
      }
      if (other.SlideValue != 0D) {
        SlideValue = other.SlideValue;
      }
      if (other.slideLimits_ != null) {
        if (slideLimits_ == null) {
          SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        SlideLimits.MergeFrom(other.SlideLimits);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (slideDirectionVector_ == null) {
              SlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(SlideDirectionVector);
            break;
          }
          case 17: {
            SlideValue = input.ReadDouble();
            break;
          }
          case 26: {
            if (slideLimits_ == null) {
              SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(SlideLimits);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CylindricalJointMotion : pb::IMessage<CylindricalJointMotion> {
    private static readonly pb::MessageParser<CylindricalJointMotion> _parser = new pb::MessageParser<CylindricalJointMotion>(() => new CylindricalJointMotion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CylindricalJointMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CylindricalJointMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CylindricalJointMotion(CylindricalJointMotion other) : this() {
      rotationAxisVector_ = other.rotationAxisVector_ != null ? other.rotationAxisVector_.Clone() : null;
      rotationValue_ = other.rotationValue_;
      rotationLimits_ = other.rotationLimits_ != null ? other.rotationLimits_.Clone() : null;
      slideValue_ = other.slideValue_;
      slideLimits_ = other.slideLimits_ != null ? other.slideLimits_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CylindricalJointMotion Clone() {
      return new CylindricalJointMotion(this);
    }

    /// <summary>Field number for the "rotationAxisVector" field.</summary>
    public const int RotationAxisVectorFieldNumber = 1;
    private global::Synthesis.Gltfextras.Vector3D rotationAxisVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D RotationAxisVector {
      get { return rotationAxisVector_; }
      set {
        rotationAxisVector_ = value;
      }
    }

    /// <summary>Field number for the "rotationValue" field.</summary>
    public const int RotationValueFieldNumber = 2;
    private double rotationValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RotationValue {
      get { return rotationValue_; }
      set {
        rotationValue_ = value;
      }
    }

    /// <summary>Field number for the "rotationLimits" field.</summary>
    public const int RotationLimitsFieldNumber = 3;
    private global::Synthesis.Gltfextras.JointLimits rotationLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits RotationLimits {
      get { return rotationLimits_; }
      set {
        rotationLimits_ = value;
      }
    }

    /// <summary>Field number for the "slideValue" field.</summary>
    public const int SlideValueFieldNumber = 4;
    private double slideValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SlideValue {
      get { return slideValue_; }
      set {
        slideValue_ = value;
      }
    }

    /// <summary>Field number for the "slideLimits" field.</summary>
    public const int SlideLimitsFieldNumber = 5;
    private global::Synthesis.Gltfextras.JointLimits slideLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits SlideLimits {
      get { return slideLimits_; }
      set {
        slideLimits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CylindricalJointMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CylindricalJointMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RotationAxisVector, other.RotationAxisVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotationValue, other.RotationValue)) return false;
      if (!object.Equals(RotationLimits, other.RotationLimits)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SlideValue, other.SlideValue)) return false;
      if (!object.Equals(SlideLimits, other.SlideLimits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rotationAxisVector_ != null) hash ^= RotationAxisVector.GetHashCode();
      if (RotationValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotationValue);
      if (rotationLimits_ != null) hash ^= RotationLimits.GetHashCode();
      if (SlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SlideValue);
      if (slideLimits_ != null) hash ^= SlideLimits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rotationAxisVector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RotationAxisVector);
      }
      if (RotationValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RotationValue);
      }
      if (rotationLimits_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RotationLimits);
      }
      if (SlideValue != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SlideValue);
      }
      if (slideLimits_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SlideLimits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rotationAxisVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationAxisVector);
      }
      if (RotationValue != 0D) {
        size += 1 + 8;
      }
      if (rotationLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationLimits);
      }
      if (SlideValue != 0D) {
        size += 1 + 8;
      }
      if (slideLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideLimits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CylindricalJointMotion other) {
      if (other == null) {
        return;
      }
      if (other.rotationAxisVector_ != null) {
        if (rotationAxisVector_ == null) {
          RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        RotationAxisVector.MergeFrom(other.RotationAxisVector);
      }
      if (other.RotationValue != 0D) {
        RotationValue = other.RotationValue;
      }
      if (other.rotationLimits_ != null) {
        if (rotationLimits_ == null) {
          RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        RotationLimits.MergeFrom(other.RotationLimits);
      }
      if (other.SlideValue != 0D) {
        SlideValue = other.SlideValue;
      }
      if (other.slideLimits_ != null) {
        if (slideLimits_ == null) {
          SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        SlideLimits.MergeFrom(other.SlideLimits);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rotationAxisVector_ == null) {
              RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(RotationAxisVector);
            break;
          }
          case 17: {
            RotationValue = input.ReadDouble();
            break;
          }
          case 26: {
            if (rotationLimits_ == null) {
              RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(RotationLimits);
            break;
          }
          case 33: {
            SlideValue = input.ReadDouble();
            break;
          }
          case 42: {
            if (slideLimits_ == null) {
              SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(SlideLimits);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PinSlotJointMotion : pb::IMessage<PinSlotJointMotion> {
    private static readonly pb::MessageParser<PinSlotJointMotion> _parser = new pb::MessageParser<PinSlotJointMotion>(() => new PinSlotJointMotion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PinSlotJointMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PinSlotJointMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PinSlotJointMotion(PinSlotJointMotion other) : this() {
      rotationAxisVector_ = other.rotationAxisVector_ != null ? other.rotationAxisVector_.Clone() : null;
      rotationValue_ = other.rotationValue_;
      rotationLimits_ = other.rotationLimits_ != null ? other.rotationLimits_.Clone() : null;
      slideDirectionVector_ = other.slideDirectionVector_ != null ? other.slideDirectionVector_.Clone() : null;
      slideValue_ = other.slideValue_;
      slideLimits_ = other.slideLimits_ != null ? other.slideLimits_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PinSlotJointMotion Clone() {
      return new PinSlotJointMotion(this);
    }

    /// <summary>Field number for the "rotationAxisVector" field.</summary>
    public const int RotationAxisVectorFieldNumber = 1;
    private global::Synthesis.Gltfextras.Vector3D rotationAxisVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D RotationAxisVector {
      get { return rotationAxisVector_; }
      set {
        rotationAxisVector_ = value;
      }
    }

    /// <summary>Field number for the "rotationValue" field.</summary>
    public const int RotationValueFieldNumber = 2;
    private double rotationValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RotationValue {
      get { return rotationValue_; }
      set {
        rotationValue_ = value;
      }
    }

    /// <summary>Field number for the "rotationLimits" field.</summary>
    public const int RotationLimitsFieldNumber = 3;
    private global::Synthesis.Gltfextras.JointLimits rotationLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits RotationLimits {
      get { return rotationLimits_; }
      set {
        rotationLimits_ = value;
      }
    }

    /// <summary>Field number for the "slideDirectionVector" field.</summary>
    public const int SlideDirectionVectorFieldNumber = 4;
    private global::Synthesis.Gltfextras.Vector3D slideDirectionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D SlideDirectionVector {
      get { return slideDirectionVector_; }
      set {
        slideDirectionVector_ = value;
      }
    }

    /// <summary>Field number for the "slideValue" field.</summary>
    public const int SlideValueFieldNumber = 5;
    private double slideValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SlideValue {
      get { return slideValue_; }
      set {
        slideValue_ = value;
      }
    }

    /// <summary>Field number for the "slideLimits" field.</summary>
    public const int SlideLimitsFieldNumber = 6;
    private global::Synthesis.Gltfextras.JointLimits slideLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits SlideLimits {
      get { return slideLimits_; }
      set {
        slideLimits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PinSlotJointMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PinSlotJointMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RotationAxisVector, other.RotationAxisVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotationValue, other.RotationValue)) return false;
      if (!object.Equals(RotationLimits, other.RotationLimits)) return false;
      if (!object.Equals(SlideDirectionVector, other.SlideDirectionVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SlideValue, other.SlideValue)) return false;
      if (!object.Equals(SlideLimits, other.SlideLimits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rotationAxisVector_ != null) hash ^= RotationAxisVector.GetHashCode();
      if (RotationValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotationValue);
      if (rotationLimits_ != null) hash ^= RotationLimits.GetHashCode();
      if (slideDirectionVector_ != null) hash ^= SlideDirectionVector.GetHashCode();
      if (SlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SlideValue);
      if (slideLimits_ != null) hash ^= SlideLimits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rotationAxisVector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RotationAxisVector);
      }
      if (RotationValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RotationValue);
      }
      if (rotationLimits_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RotationLimits);
      }
      if (slideDirectionVector_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SlideDirectionVector);
      }
      if (SlideValue != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SlideValue);
      }
      if (slideLimits_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SlideLimits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rotationAxisVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationAxisVector);
      }
      if (RotationValue != 0D) {
        size += 1 + 8;
      }
      if (rotationLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationLimits);
      }
      if (slideDirectionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideDirectionVector);
      }
      if (SlideValue != 0D) {
        size += 1 + 8;
      }
      if (slideLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideLimits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PinSlotJointMotion other) {
      if (other == null) {
        return;
      }
      if (other.rotationAxisVector_ != null) {
        if (rotationAxisVector_ == null) {
          RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        RotationAxisVector.MergeFrom(other.RotationAxisVector);
      }
      if (other.RotationValue != 0D) {
        RotationValue = other.RotationValue;
      }
      if (other.rotationLimits_ != null) {
        if (rotationLimits_ == null) {
          RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        RotationLimits.MergeFrom(other.RotationLimits);
      }
      if (other.slideDirectionVector_ != null) {
        if (slideDirectionVector_ == null) {
          SlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        SlideDirectionVector.MergeFrom(other.SlideDirectionVector);
      }
      if (other.SlideValue != 0D) {
        SlideValue = other.SlideValue;
      }
      if (other.slideLimits_ != null) {
        if (slideLimits_ == null) {
          SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        SlideLimits.MergeFrom(other.SlideLimits);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rotationAxisVector_ == null) {
              RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(RotationAxisVector);
            break;
          }
          case 17: {
            RotationValue = input.ReadDouble();
            break;
          }
          case 26: {
            if (rotationLimits_ == null) {
              RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(RotationLimits);
            break;
          }
          case 34: {
            if (slideDirectionVector_ == null) {
              SlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(SlideDirectionVector);
            break;
          }
          case 41: {
            SlideValue = input.ReadDouble();
            break;
          }
          case 50: {
            if (slideLimits_ == null) {
              SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(SlideLimits);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlanarJointMotion : pb::IMessage<PlanarJointMotion> {
    private static readonly pb::MessageParser<PlanarJointMotion> _parser = new pb::MessageParser<PlanarJointMotion>(() => new PlanarJointMotion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlanarJointMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanarJointMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanarJointMotion(PlanarJointMotion other) : this() {
      normalDirectionVector_ = other.normalDirectionVector_ != null ? other.normalDirectionVector_.Clone() : null;
      primarySlideDirectionVector_ = other.primarySlideDirectionVector_ != null ? other.primarySlideDirectionVector_.Clone() : null;
      primarySlideValue_ = other.primarySlideValue_;
      primarySlideLimits_ = other.primarySlideLimits_ != null ? other.primarySlideLimits_.Clone() : null;
      secondarySlideDirectionVector_ = other.secondarySlideDirectionVector_ != null ? other.secondarySlideDirectionVector_.Clone() : null;
      secondarySlideValue_ = other.secondarySlideValue_;
      secondarySlideLimits_ = other.secondarySlideLimits_ != null ? other.secondarySlideLimits_.Clone() : null;
      rotationValue_ = other.rotationValue_;
      rotationLimits_ = other.rotationLimits_ != null ? other.rotationLimits_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlanarJointMotion Clone() {
      return new PlanarJointMotion(this);
    }

    /// <summary>Field number for the "normalDirectionVector" field.</summary>
    public const int NormalDirectionVectorFieldNumber = 1;
    private global::Synthesis.Gltfextras.Vector3D normalDirectionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D NormalDirectionVector {
      get { return normalDirectionVector_; }
      set {
        normalDirectionVector_ = value;
      }
    }

    /// <summary>Field number for the "primarySlideDirectionVector" field.</summary>
    public const int PrimarySlideDirectionVectorFieldNumber = 2;
    private global::Synthesis.Gltfextras.Vector3D primarySlideDirectionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D PrimarySlideDirectionVector {
      get { return primarySlideDirectionVector_; }
      set {
        primarySlideDirectionVector_ = value;
      }
    }

    /// <summary>Field number for the "primarySlideValue" field.</summary>
    public const int PrimarySlideValueFieldNumber = 3;
    private double primarySlideValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PrimarySlideValue {
      get { return primarySlideValue_; }
      set {
        primarySlideValue_ = value;
      }
    }

    /// <summary>Field number for the "primarySlideLimits" field.</summary>
    public const int PrimarySlideLimitsFieldNumber = 4;
    private global::Synthesis.Gltfextras.JointLimits primarySlideLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits PrimarySlideLimits {
      get { return primarySlideLimits_; }
      set {
        primarySlideLimits_ = value;
      }
    }

    /// <summary>Field number for the "secondarySlideDirectionVector" field.</summary>
    public const int SecondarySlideDirectionVectorFieldNumber = 5;
    private global::Synthesis.Gltfextras.Vector3D secondarySlideDirectionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D SecondarySlideDirectionVector {
      get { return secondarySlideDirectionVector_; }
      set {
        secondarySlideDirectionVector_ = value;
      }
    }

    /// <summary>Field number for the "secondarySlideValue" field.</summary>
    public const int SecondarySlideValueFieldNumber = 6;
    private double secondarySlideValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SecondarySlideValue {
      get { return secondarySlideValue_; }
      set {
        secondarySlideValue_ = value;
      }
    }

    /// <summary>Field number for the "secondarySlideLimits" field.</summary>
    public const int SecondarySlideLimitsFieldNumber = 7;
    private global::Synthesis.Gltfextras.JointLimits secondarySlideLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits SecondarySlideLimits {
      get { return secondarySlideLimits_; }
      set {
        secondarySlideLimits_ = value;
      }
    }

    /// <summary>Field number for the "rotationValue" field.</summary>
    public const int RotationValueFieldNumber = 8;
    private double rotationValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RotationValue {
      get { return rotationValue_; }
      set {
        rotationValue_ = value;
      }
    }

    /// <summary>Field number for the "rotationLimits" field.</summary>
    public const int RotationLimitsFieldNumber = 9;
    private global::Synthesis.Gltfextras.JointLimits rotationLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits RotationLimits {
      get { return rotationLimits_; }
      set {
        rotationLimits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlanarJointMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlanarJointMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NormalDirectionVector, other.NormalDirectionVector)) return false;
      if (!object.Equals(PrimarySlideDirectionVector, other.PrimarySlideDirectionVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrimarySlideValue, other.PrimarySlideValue)) return false;
      if (!object.Equals(PrimarySlideLimits, other.PrimarySlideLimits)) return false;
      if (!object.Equals(SecondarySlideDirectionVector, other.SecondarySlideDirectionVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SecondarySlideValue, other.SecondarySlideValue)) return false;
      if (!object.Equals(SecondarySlideLimits, other.SecondarySlideLimits)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotationValue, other.RotationValue)) return false;
      if (!object.Equals(RotationLimits, other.RotationLimits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (normalDirectionVector_ != null) hash ^= NormalDirectionVector.GetHashCode();
      if (primarySlideDirectionVector_ != null) hash ^= PrimarySlideDirectionVector.GetHashCode();
      if (PrimarySlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrimarySlideValue);
      if (primarySlideLimits_ != null) hash ^= PrimarySlideLimits.GetHashCode();
      if (secondarySlideDirectionVector_ != null) hash ^= SecondarySlideDirectionVector.GetHashCode();
      if (SecondarySlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SecondarySlideValue);
      if (secondarySlideLimits_ != null) hash ^= SecondarySlideLimits.GetHashCode();
      if (RotationValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotationValue);
      if (rotationLimits_ != null) hash ^= RotationLimits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (normalDirectionVector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NormalDirectionVector);
      }
      if (primarySlideDirectionVector_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrimarySlideDirectionVector);
      }
      if (PrimarySlideValue != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PrimarySlideValue);
      }
      if (primarySlideLimits_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PrimarySlideLimits);
      }
      if (secondarySlideDirectionVector_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SecondarySlideDirectionVector);
      }
      if (SecondarySlideValue != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(SecondarySlideValue);
      }
      if (secondarySlideLimits_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SecondarySlideLimits);
      }
      if (RotationValue != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(RotationValue);
      }
      if (rotationLimits_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RotationLimits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (normalDirectionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalDirectionVector);
      }
      if (primarySlideDirectionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimarySlideDirectionVector);
      }
      if (PrimarySlideValue != 0D) {
        size += 1 + 8;
      }
      if (primarySlideLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimarySlideLimits);
      }
      if (secondarySlideDirectionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondarySlideDirectionVector);
      }
      if (SecondarySlideValue != 0D) {
        size += 1 + 8;
      }
      if (secondarySlideLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondarySlideLimits);
      }
      if (RotationValue != 0D) {
        size += 1 + 8;
      }
      if (rotationLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationLimits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlanarJointMotion other) {
      if (other == null) {
        return;
      }
      if (other.normalDirectionVector_ != null) {
        if (normalDirectionVector_ == null) {
          NormalDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        NormalDirectionVector.MergeFrom(other.NormalDirectionVector);
      }
      if (other.primarySlideDirectionVector_ != null) {
        if (primarySlideDirectionVector_ == null) {
          PrimarySlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        PrimarySlideDirectionVector.MergeFrom(other.PrimarySlideDirectionVector);
      }
      if (other.PrimarySlideValue != 0D) {
        PrimarySlideValue = other.PrimarySlideValue;
      }
      if (other.primarySlideLimits_ != null) {
        if (primarySlideLimits_ == null) {
          PrimarySlideLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        PrimarySlideLimits.MergeFrom(other.PrimarySlideLimits);
      }
      if (other.secondarySlideDirectionVector_ != null) {
        if (secondarySlideDirectionVector_ == null) {
          SecondarySlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        SecondarySlideDirectionVector.MergeFrom(other.SecondarySlideDirectionVector);
      }
      if (other.SecondarySlideValue != 0D) {
        SecondarySlideValue = other.SecondarySlideValue;
      }
      if (other.secondarySlideLimits_ != null) {
        if (secondarySlideLimits_ == null) {
          SecondarySlideLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        SecondarySlideLimits.MergeFrom(other.SecondarySlideLimits);
      }
      if (other.RotationValue != 0D) {
        RotationValue = other.RotationValue;
      }
      if (other.rotationLimits_ != null) {
        if (rotationLimits_ == null) {
          RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        RotationLimits.MergeFrom(other.RotationLimits);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (normalDirectionVector_ == null) {
              NormalDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(NormalDirectionVector);
            break;
          }
          case 18: {
            if (primarySlideDirectionVector_ == null) {
              PrimarySlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(PrimarySlideDirectionVector);
            break;
          }
          case 25: {
            PrimarySlideValue = input.ReadDouble();
            break;
          }
          case 34: {
            if (primarySlideLimits_ == null) {
              PrimarySlideLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(PrimarySlideLimits);
            break;
          }
          case 42: {
            if (secondarySlideDirectionVector_ == null) {
              SecondarySlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(SecondarySlideDirectionVector);
            break;
          }
          case 49: {
            SecondarySlideValue = input.ReadDouble();
            break;
          }
          case 58: {
            if (secondarySlideLimits_ == null) {
              SecondarySlideLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(SecondarySlideLimits);
            break;
          }
          case 65: {
            RotationValue = input.ReadDouble();
            break;
          }
          case 74: {
            if (rotationLimits_ == null) {
              RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(RotationLimits);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BallJointMotion : pb::IMessage<BallJointMotion> {
    private static readonly pb::MessageParser<BallJointMotion> _parser = new pb::MessageParser<BallJointMotion>(() => new BallJointMotion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BallJointMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallJointMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallJointMotion(BallJointMotion other) : this() {
      rollDirectionVector_ = other.rollDirectionVector_ != null ? other.rollDirectionVector_.Clone() : null;
      rollValue_ = other.rollValue_;
      rollLimits_ = other.rollLimits_ != null ? other.rollLimits_.Clone() : null;
      pitchDirectionVector_ = other.pitchDirectionVector_ != null ? other.pitchDirectionVector_.Clone() : null;
      pitchValue_ = other.pitchValue_;
      pitchLimits_ = other.pitchLimits_ != null ? other.pitchLimits_.Clone() : null;
      yawDirectionVector_ = other.yawDirectionVector_ != null ? other.yawDirectionVector_.Clone() : null;
      yawValue_ = other.yawValue_;
      yawLimits_ = other.yawLimits_ != null ? other.yawLimits_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallJointMotion Clone() {
      return new BallJointMotion(this);
    }

    /// <summary>Field number for the "rollDirectionVector" field.</summary>
    public const int RollDirectionVectorFieldNumber = 1;
    private global::Synthesis.Gltfextras.Vector3D rollDirectionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D RollDirectionVector {
      get { return rollDirectionVector_; }
      set {
        rollDirectionVector_ = value;
      }
    }

    /// <summary>Field number for the "rollValue" field.</summary>
    public const int RollValueFieldNumber = 2;
    private double rollValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RollValue {
      get { return rollValue_; }
      set {
        rollValue_ = value;
      }
    }

    /// <summary>Field number for the "rollLimits" field.</summary>
    public const int RollLimitsFieldNumber = 3;
    private global::Synthesis.Gltfextras.JointLimits rollLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits RollLimits {
      get { return rollLimits_; }
      set {
        rollLimits_ = value;
      }
    }

    /// <summary>Field number for the "pitchDirectionVector" field.</summary>
    public const int PitchDirectionVectorFieldNumber = 4;
    private global::Synthesis.Gltfextras.Vector3D pitchDirectionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D PitchDirectionVector {
      get { return pitchDirectionVector_; }
      set {
        pitchDirectionVector_ = value;
      }
    }

    /// <summary>Field number for the "pitchValue" field.</summary>
    public const int PitchValueFieldNumber = 5;
    private double pitchValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PitchValue {
      get { return pitchValue_; }
      set {
        pitchValue_ = value;
      }
    }

    /// <summary>Field number for the "pitchLimits" field.</summary>
    public const int PitchLimitsFieldNumber = 6;
    private global::Synthesis.Gltfextras.JointLimits pitchLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits PitchLimits {
      get { return pitchLimits_; }
      set {
        pitchLimits_ = value;
      }
    }

    /// <summary>Field number for the "yawDirectionVector" field.</summary>
    public const int YawDirectionVectorFieldNumber = 7;
    private global::Synthesis.Gltfextras.Vector3D yawDirectionVector_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.Vector3D YawDirectionVector {
      get { return yawDirectionVector_; }
      set {
        yawDirectionVector_ = value;
      }
    }

    /// <summary>Field number for the "yawValue" field.</summary>
    public const int YawValueFieldNumber = 8;
    private double yawValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double YawValue {
      get { return yawValue_; }
      set {
        yawValue_ = value;
      }
    }

    /// <summary>Field number for the "yawLimits" field.</summary>
    public const int YawLimitsFieldNumber = 9;
    private global::Synthesis.Gltfextras.JointLimits yawLimits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Gltfextras.JointLimits YawLimits {
      get { return yawLimits_; }
      set {
        yawLimits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BallJointMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BallJointMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RollDirectionVector, other.RollDirectionVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RollValue, other.RollValue)) return false;
      if (!object.Equals(RollLimits, other.RollLimits)) return false;
      if (!object.Equals(PitchDirectionVector, other.PitchDirectionVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PitchValue, other.PitchValue)) return false;
      if (!object.Equals(PitchLimits, other.PitchLimits)) return false;
      if (!object.Equals(YawDirectionVector, other.YawDirectionVector)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YawValue, other.YawValue)) return false;
      if (!object.Equals(YawLimits, other.YawLimits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rollDirectionVector_ != null) hash ^= RollDirectionVector.GetHashCode();
      if (RollValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RollValue);
      if (rollLimits_ != null) hash ^= RollLimits.GetHashCode();
      if (pitchDirectionVector_ != null) hash ^= PitchDirectionVector.GetHashCode();
      if (PitchValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PitchValue);
      if (pitchLimits_ != null) hash ^= PitchLimits.GetHashCode();
      if (yawDirectionVector_ != null) hash ^= YawDirectionVector.GetHashCode();
      if (YawValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YawValue);
      if (yawLimits_ != null) hash ^= YawLimits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rollDirectionVector_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RollDirectionVector);
      }
      if (RollValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RollValue);
      }
      if (rollLimits_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RollLimits);
      }
      if (pitchDirectionVector_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PitchDirectionVector);
      }
      if (PitchValue != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PitchValue);
      }
      if (pitchLimits_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PitchLimits);
      }
      if (yawDirectionVector_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(YawDirectionVector);
      }
      if (YawValue != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(YawValue);
      }
      if (yawLimits_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(YawLimits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rollDirectionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RollDirectionVector);
      }
      if (RollValue != 0D) {
        size += 1 + 8;
      }
      if (rollLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RollLimits);
      }
      if (pitchDirectionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PitchDirectionVector);
      }
      if (PitchValue != 0D) {
        size += 1 + 8;
      }
      if (pitchLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PitchLimits);
      }
      if (yawDirectionVector_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YawDirectionVector);
      }
      if (YawValue != 0D) {
        size += 1 + 8;
      }
      if (yawLimits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(YawLimits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BallJointMotion other) {
      if (other == null) {
        return;
      }
      if (other.rollDirectionVector_ != null) {
        if (rollDirectionVector_ == null) {
          RollDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        RollDirectionVector.MergeFrom(other.RollDirectionVector);
      }
      if (other.RollValue != 0D) {
        RollValue = other.RollValue;
      }
      if (other.rollLimits_ != null) {
        if (rollLimits_ == null) {
          RollLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        RollLimits.MergeFrom(other.RollLimits);
      }
      if (other.pitchDirectionVector_ != null) {
        if (pitchDirectionVector_ == null) {
          PitchDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        PitchDirectionVector.MergeFrom(other.PitchDirectionVector);
      }
      if (other.PitchValue != 0D) {
        PitchValue = other.PitchValue;
      }
      if (other.pitchLimits_ != null) {
        if (pitchLimits_ == null) {
          PitchLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        PitchLimits.MergeFrom(other.PitchLimits);
      }
      if (other.yawDirectionVector_ != null) {
        if (yawDirectionVector_ == null) {
          YawDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
        }
        YawDirectionVector.MergeFrom(other.YawDirectionVector);
      }
      if (other.YawValue != 0D) {
        YawValue = other.YawValue;
      }
      if (other.yawLimits_ != null) {
        if (yawLimits_ == null) {
          YawLimits = new global::Synthesis.Gltfextras.JointLimits();
        }
        YawLimits.MergeFrom(other.YawLimits);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rollDirectionVector_ == null) {
              RollDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(RollDirectionVector);
            break;
          }
          case 17: {
            RollValue = input.ReadDouble();
            break;
          }
          case 26: {
            if (rollLimits_ == null) {
              RollLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(RollLimits);
            break;
          }
          case 34: {
            if (pitchDirectionVector_ == null) {
              PitchDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(PitchDirectionVector);
            break;
          }
          case 41: {
            PitchValue = input.ReadDouble();
            break;
          }
          case 50: {
            if (pitchLimits_ == null) {
              PitchLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(PitchLimits);
            break;
          }
          case 58: {
            if (yawDirectionVector_ == null) {
              YawDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
            }
            input.ReadMessage(YawDirectionVector);
            break;
          }
          case 65: {
            YawValue = input.ReadDouble();
            break;
          }
          case 74: {
            if (yawLimits_ == null) {
              YawLimits = new global::Synthesis.Gltfextras.JointLimits();
            }
            input.ReadMessage(YawLimits);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JointLimits : pb::IMessage<JointLimits> {
    private static readonly pb::MessageParser<JointLimits> _parser = new pb::MessageParser<JointLimits>(() => new JointLimits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JointLimits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointLimits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointLimits(JointLimits other) : this() {
      isMaximumValueEnabled_ = other.isMaximumValueEnabled_;
      isMinimumValueEnabled_ = other.isMinimumValueEnabled_;
      isRestValueEnabled_ = other.isRestValueEnabled_;
      maximumValue_ = other.maximumValue_;
      minimumValue_ = other.minimumValue_;
      restValue_ = other.restValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointLimits Clone() {
      return new JointLimits(this);
    }

    /// <summary>Field number for the "isMaximumValueEnabled" field.</summary>
    public const int IsMaximumValueEnabledFieldNumber = 1;
    private bool isMaximumValueEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMaximumValueEnabled {
      get { return isMaximumValueEnabled_; }
      set {
        isMaximumValueEnabled_ = value;
      }
    }

    /// <summary>Field number for the "isMinimumValueEnabled" field.</summary>
    public const int IsMinimumValueEnabledFieldNumber = 2;
    private bool isMinimumValueEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMinimumValueEnabled {
      get { return isMinimumValueEnabled_; }
      set {
        isMinimumValueEnabled_ = value;
      }
    }

    /// <summary>Field number for the "isRestValueEnabled" field.</summary>
    public const int IsRestValueEnabledFieldNumber = 3;
    private bool isRestValueEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRestValueEnabled {
      get { return isRestValueEnabled_; }
      set {
        isRestValueEnabled_ = value;
      }
    }

    /// <summary>Field number for the "maximumValue" field.</summary>
    public const int MaximumValueFieldNumber = 4;
    private double maximumValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaximumValue {
      get { return maximumValue_; }
      set {
        maximumValue_ = value;
      }
    }

    /// <summary>Field number for the "minimumValue" field.</summary>
    public const int MinimumValueFieldNumber = 5;
    private double minimumValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinimumValue {
      get { return minimumValue_; }
      set {
        minimumValue_ = value;
      }
    }

    /// <summary>Field number for the "restValue" field.</summary>
    public const int RestValueFieldNumber = 6;
    private double restValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RestValue {
      get { return restValue_; }
      set {
        restValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JointLimits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JointLimits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsMaximumValueEnabled != other.IsMaximumValueEnabled) return false;
      if (IsMinimumValueEnabled != other.IsMinimumValueEnabled) return false;
      if (IsRestValueEnabled != other.IsRestValueEnabled) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaximumValue, other.MaximumValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinimumValue, other.MinimumValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RestValue, other.RestValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsMaximumValueEnabled != false) hash ^= IsMaximumValueEnabled.GetHashCode();
      if (IsMinimumValueEnabled != false) hash ^= IsMinimumValueEnabled.GetHashCode();
      if (IsRestValueEnabled != false) hash ^= IsRestValueEnabled.GetHashCode();
      if (MaximumValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaximumValue);
      if (MinimumValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinimumValue);
      if (RestValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RestValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsMaximumValueEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsMaximumValueEnabled);
      }
      if (IsMinimumValueEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsMinimumValueEnabled);
      }
      if (IsRestValueEnabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRestValueEnabled);
      }
      if (MaximumValue != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MaximumValue);
      }
      if (MinimumValue != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MinimumValue);
      }
      if (RestValue != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RestValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsMaximumValueEnabled != false) {
        size += 1 + 1;
      }
      if (IsMinimumValueEnabled != false) {
        size += 1 + 1;
      }
      if (IsRestValueEnabled != false) {
        size += 1 + 1;
      }
      if (MaximumValue != 0D) {
        size += 1 + 8;
      }
      if (MinimumValue != 0D) {
        size += 1 + 8;
      }
      if (RestValue != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JointLimits other) {
      if (other == null) {
        return;
      }
      if (other.IsMaximumValueEnabled != false) {
        IsMaximumValueEnabled = other.IsMaximumValueEnabled;
      }
      if (other.IsMinimumValueEnabled != false) {
        IsMinimumValueEnabled = other.IsMinimumValueEnabled;
      }
      if (other.IsRestValueEnabled != false) {
        IsRestValueEnabled = other.IsRestValueEnabled;
      }
      if (other.MaximumValue != 0D) {
        MaximumValue = other.MaximumValue;
      }
      if (other.MinimumValue != 0D) {
        MinimumValue = other.MinimumValue;
      }
      if (other.RestValue != 0D) {
        RestValue = other.RestValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsMaximumValueEnabled = input.ReadBool();
            break;
          }
          case 16: {
            IsMinimumValueEnabled = input.ReadBool();
            break;
          }
          case 24: {
            IsRestValueEnabled = input.ReadBool();
            break;
          }
          case 33: {
            MaximumValue = input.ReadDouble();
            break;
          }
          case 41: {
            MinimumValue = input.ReadDouble();
            break;
          }
          case 49: {
            RestValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      uuid_ = other.uuid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    /// <summary>
    /// generated with apper's item_id and persistent in fusion file
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3D : pb::IMessage<Vector3D> {
    private static readonly pb::MessageParser<Vector3D> _parser = new pb::MessageParser<Vector3D>(() => new Vector3D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3D(Vector3D other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3D Clone() {
      return new Vector3D(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3D other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
