// // <auto-generated>
// //     Generated by the protocol buffer compiler.  DO NOT EDIT!
// //     source: gltf_extras.proto
// // </auto-generated>
// #pragma warning disable 1591, 0612, 3021
// #region Designer generated code
//
// using pb = global::Google.Protobuf;
// using pbc = global::Google.Protobuf.Collections;
// using pbr = global::Google.Protobuf.Reflection;
// using scg = global::System.Collections.Generic;
// namespace Synthesis.Gltfextras {
//
//   /// <summary>Holder for reflection information generated from gltf_extras.proto</summary>
//   public static partial class GltfExtrasReflection {
//
//     #region Descriptor
//     /// <summary>File descriptor for gltf_extras.proto</summary>
//     public static pbr::FileDescriptor Descriptor {
//       get { return descriptor; }
//     }
//     private static pbr::FileDescriptor descriptor;
//
//     static GltfExtrasReflection() {
//       byte[] descriptorData = global::System.Convert.FromBase64String(
//           string.Concat(
//             "ChFnbHRmX2V4dHJhcy5wcm90bxIUc3ludGhlc2lzLmdsdGZleHRyYXMaGWdv",
//             "b2dsZS9wcm90b2J1Zi9hbnkucHJvdG8isQIKCERvY3VtZW50EjAKCHVzZXJN",
//             "ZXRhGAEgASgLMh4uc3ludGhlc2lzLmdsdGZleHRyYXMuVXNlck1ldGESOAoM",
//             "ZG9jdW1lbnRNZXRhGAIgASgLMiIuc3ludGhlc2lzLmdsdGZleHRyYXMuRG9j",
//             "dW1lbnRNZXRhEiwKBmRlc2lnbhgDIAEoCzIcLnN5bnRoZXNpcy5nbHRmZXh0",
//             "cmFzLkRlc2lnbhJCCgphdHRyaWJ1dGVzGAQgAygLMi4uc3ludGhlc2lzLmds",
//             "dGZleHRyYXMuRG9jdW1lbnQuQXR0cmlidXRlc0VudHJ5GkcKD0F0dHJpYnV0",
//             "ZXNFbnRyeRILCgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsyFC5nb29nbGUu",
//             "cHJvdG9idWYuQW55OgI4ASJMCghVc2VyTWV0YRIQCgh1c2VyTmFtZRgBIAEo",
//             "CRIKCgJpZBgCIAEoCRITCgtkaXNwbGF5TmFtZRgDIAEoCRINCgVlbWFpbBgE",
//             "IAEoCSJ/CgxEb2N1bWVudE1ldGESFQoNZnVzaW9uVmVyc2lvbhgBIAEoCRIM",
//             "CgRuYW1lGAIgASgJEhUKDXZlcnNpb25OdW1iZXIYAyABKAUSEwoLZGVzY3Jp",
//             "cHRpb24YBCABKAkSCgoCaWQYBSABKAkSEgoKZXhwb3J0VGltZRgGIAEoAyKN",
//             "AgoGRGVzaWduEjcKDWhpZXJhcmNoeVJvb3QYASABKAsyIC5zeW50aGVzaXMu",
//             "Z2x0ZmV4dHJhcy5PY2N1cnJlbmNlEjMKCmNvbXBvbmVudHMYAiADKAsyHy5z",
//             "eW50aGVzaXMuZ2x0ZmV4dHJhcy5Db21wb25lbnQSKwoGam9pbnRzGAMgAygL",
//             "Mhsuc3ludGhlc2lzLmdsdGZleHRyYXMuSm9pbnQSMQoJbWF0ZXJpYWxzGAQg",
//             "AygLMh4uc3ludGhlc2lzLmdsdGZleHRyYXMuTWF0ZXJpYWwSNQoLYXBwZWFy",
//             "YW5jZXMYBSADKAsyIC5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5BcHBlYXJhbmNl",
//             "IuMCCgpPY2N1cnJlbmNlEiwKBmhlYWRlchgBIAEoCzIcLnN5bnRoZXNpcy5n",
//             "bHRmZXh0cmFzLkhlYWRlchISCgppc0dyb3VuZGVkGAIgASgIEjEKCXRyYW5z",
//             "Zm9ybRgDIAEoCzIeLnN5bnRoZXNpcy5nbHRmZXh0cmFzLk1hdHJpeDNEEhUK",
//             "DWNvbXBvbmVudFVVSUQYBCABKAkSOgoQY2hpbGRPY2N1cnJlbmNlcxgFIAMo",
//             "CzIgLnN5bnRoZXNpcy5nbHRmZXh0cmFzLk9jY3VycmVuY2USRAoKYXR0cmli",
//             "dXRlcxgGIAMoCzIwLnN5bnRoZXNpcy5nbHRmZXh0cmFzLk9jY3VycmVuY2Uu",
//             "QXR0cmlidXRlc0VudHJ5GkcKD0F0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASAB",
//             "KAkSIwoFdmFsdWUYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55OgI4ASKj",
//             "AwoJQ29tcG9uZW50EiwKBmhlYWRlchgBIAEoCzIcLnN5bnRoZXNpcy5nbHRm",
//             "ZXh0cmFzLkhlYWRlchISCgpwYXJ0TnVtYmVyGAIgASgJEjgKC2JvdW5kaW5n",
//             "Qm94GAMgASgLMiMuc3ludGhlc2lzLmdsdGZleHRyYXMuQm91bmRpbmdCb3gz",
//             "RBISCgptYXRlcmlhbElkGAQgASgJEkQKEnBoeXNpY2FsUHJvcGVydGllcxgF",
//             "IAEoCzIoLnN5bnRoZXNpcy5nbHRmZXh0cmFzLlBoeXNpY2FsUHJvcGVydGll",
//             "cxIyCgptZXNoQm9kaWVzGAYgAygLMh4uc3ludGhlc2lzLmdsdGZleHRyYXMu",
//             "TWVzaEJvZHkSQwoKYXR0cmlidXRlcxgHIAMoCzIvLnN5bnRoZXNpcy5nbHRm",
//             "ZXh0cmFzLkNvbXBvbmVudC5BdHRyaWJ1dGVzRW50cnkaRwoPQXR0cmlidXRl",
//             "c0VudHJ5EgsKA2tleRgBIAEoCRIjCgV2YWx1ZRgCIAEoCzIULmdvb2dsZS5w",
//             "cm90b2J1Zi5Bbnk6AjgBIqsDCghNZXNoQm9keRIsCgZoZWFkZXIYASABKAsy",
//             "HC5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5IZWFkZXISFAoMYXBwZWFyYW5jZUlk",
//             "GAIgASgJEhIKCm1hdGVyaWFsSWQYAyABKAkSRAoScGh5c2ljYWxQcm9wZXJ0",
//             "aWVzGAQgASgLMiguc3ludGhlc2lzLmdsdGZleHRyYXMuUGh5c2ljYWxQcm9w",
//             "ZXJ0aWVzEjoKDWJvdW5kaW5nQm94M0QYBSABKAsyIy5zeW50aGVzaXMuZ2x0",
//             "ZmV4dHJhcy5Cb3VuZGluZ0JveDNEEjgKDHRyaWFuZ2xlTWVzaBgGIAEoCzIi",
//             "LnN5bnRoZXNpcy5nbHRmZXh0cmFzLlRyaWFuZ2xlTWVzaBJCCgphdHRyaWJ1",
//             "dGVzGAcgAygLMi4uc3ludGhlc2lzLmdsdGZleHRyYXMuTWVzaEJvZHkuQXR0",
//             "cmlidXRlc0VudHJ5GkcKD0F0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkS",
//             "IwoFdmFsdWUYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55OgI4ASJPCgxU",
//             "cmlhbmdsZU1lc2gSEAoIdmVydGljZXMYASADKAESDwoHbm9ybWFscxgCIAMo",
//             "ARIPCgdpbmRpY2VzGAMgAygFEgsKA3V2cxgEIAMoASKHAQoSUGh5c2ljYWxQ",
//             "cm9wZXJ0aWVzEg8KB2RlbnNpdHkYASABKAESDAoEbWFzcxgCIAEoARIOCgZ2",
//             "b2x1bWUYAyABKAESDAoEYXJlYRgEIAEoARI0CgxjZW50ZXJPZk1hc3MYBSAB",
//             "KAsyHi5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5WZWN0b3IzRCLQBgoFSm9pbnQS",
//             "LAoGaGVhZGVyGAEgASgLMhwuc3ludGhlc2lzLmdsdGZleHRyYXMuSGVhZGVy",
//             "Ei4KBm9yaWdpbhgCIAEoCzIeLnN5bnRoZXNpcy5nbHRmZXh0cmFzLlZlY3Rv",
//             "cjNEEhAKCGlzTG9ja2VkGAMgASgIEhQKDGlzU3VwcHJlc3NlZBgEIAEoCBIZ",
//             "ChFvY2N1cnJlbmNlT25lVVVJRBgFIAEoCRIZChFvY2N1cnJlbmNlVHdvVVVJ",
//             "RBgGIAEoCRI/CgphdHRyaWJ1dGVzGAcgAygLMisuc3ludGhlc2lzLmdsdGZl",
//             "eHRyYXMuSm9pbnQuQXR0cmlidXRlc0VudHJ5EkIKEHJpZ2lkSm9pbnRNb3Rp",
//             "b24YCCABKAsyJi5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5SaWdpZEpvaW50TW90",
//             "aW9uSAASSAoTcmV2b2x1dGVKb2ludE1vdGlvbhgJIAEoCzIpLnN5bnRoZXNp",
//             "cy5nbHRmZXh0cmFzLlJldm9sdXRlSm9pbnRNb3Rpb25IABJEChFzbGlkZXJK",
//             "b2ludE1vdGlvbhgKIAEoCzInLnN5bnRoZXNpcy5nbHRmZXh0cmFzLlNsaWRl",
//             "ckpvaW50TW90aW9uSAASTgoWY3lsaW5kcmljYWxKb2ludE1vdGlvbhgLIAEo",
//             "CzIsLnN5bnRoZXNpcy5nbHRmZXh0cmFzLkN5bGluZHJpY2FsSm9pbnRNb3Rp",
//             "b25IABJGChJwaW5TbG90Sm9pbnRNb3Rpb24YDCABKAsyKC5zeW50aGVzaXMu",
//             "Z2x0ZmV4dHJhcy5QaW5TbG90Sm9pbnRNb3Rpb25IABJEChFwbGFuYXJKb2lu",
//             "dE1vdGlvbhgNIAEoCzInLnN5bnRoZXNpcy5nbHRmZXh0cmFzLlBsYW5hckpv",
//             "aW50TW90aW9uSAASQAoPYmFsbEpvaW50TW90aW9uGA4gASgLMiUuc3ludGhl",
//             "c2lzLmdsdGZleHRyYXMuQmFsbEpvaW50TW90aW9uSAAaRwoPQXR0cmlidXRl",
//             "c0VudHJ5EgsKA2tleRgBIAEoCRIjCgV2YWx1ZRgCIAEoCzIULmdvb2dsZS5w",
//             "cm90b2J1Zi5Bbnk6AjgBQg0KC2pvaW50TW90aW9uIhIKEFJpZ2lkSm9pbnRN",
//             "b3Rpb24iowEKE1Jldm9sdXRlSm9pbnRNb3Rpb24SOgoScm90YXRpb25BeGlz",
//             "VmVjdG9yGAEgASgLMh4uc3ludGhlc2lzLmdsdGZleHRyYXMuVmVjdG9yM0QS",
//             "FQoNcm90YXRpb25WYWx1ZRgCIAEoARI5Cg5yb3RhdGlvbkxpbWl0cxgDIAEo",
//             "CzIhLnN5bnRoZXNpcy5nbHRmZXh0cmFzLkpvaW50TGltaXRzIp0BChFTbGlk",
//             "ZXJKb2ludE1vdGlvbhI8ChRzbGlkZURpcmVjdGlvblZlY3RvchgBIAEoCzIe",
//             "LnN5bnRoZXNpcy5nbHRmZXh0cmFzLlZlY3RvcjNEEhIKCnNsaWRlVmFsdWUY",
//             "AiABKAESNgoLc2xpZGVMaW1pdHMYAyABKAsyIS5zeW50aGVzaXMuZ2x0ZmV4",
//             "dHJhcy5Kb2ludExpbWl0cyLyAQoWQ3lsaW5kcmljYWxKb2ludE1vdGlvbhI6",
//             "ChJyb3RhdGlvbkF4aXNWZWN0b3IYASABKAsyHi5zeW50aGVzaXMuZ2x0ZmV4",
//             "dHJhcy5WZWN0b3IzRBIVCg1yb3RhdGlvblZhbHVlGAIgASgBEjkKDnJvdGF0",
//             "aW9uTGltaXRzGAMgASgLMiEuc3ludGhlc2lzLmdsdGZleHRyYXMuSm9pbnRM",
//             "aW1pdHMSEgoKc2xpZGVWYWx1ZRgEIAEoARI2CgtzbGlkZUxpbWl0cxgFIAEo",
//             "CzIhLnN5bnRoZXNpcy5nbHRmZXh0cmFzLkpvaW50TGltaXRzIqwCChJQaW5T",
//             "bG90Sm9pbnRNb3Rpb24SOgoScm90YXRpb25BeGlzVmVjdG9yGAEgASgLMh4u",
//             "c3ludGhlc2lzLmdsdGZleHRyYXMuVmVjdG9yM0QSFQoNcm90YXRpb25WYWx1",
//             "ZRgCIAEoARI5Cg5yb3RhdGlvbkxpbWl0cxgDIAEoCzIhLnN5bnRoZXNpcy5n",
//             "bHRmZXh0cmFzLkpvaW50TGltaXRzEjwKFHNsaWRlRGlyZWN0aW9uVmVjdG9y",
//             "GAQgASgLMh4uc3ludGhlc2lzLmdsdGZleHRyYXMuVmVjdG9yM0QSEgoKc2xp",
//             "ZGVWYWx1ZRgFIAEoARI2CgtzbGlkZUxpbWl0cxgGIAEoCzIhLnN5bnRoZXNp",
//             "cy5nbHRmZXh0cmFzLkpvaW50TGltaXRzIugDChFQbGFuYXJKb2ludE1vdGlv",
//             "bhI9ChVub3JtYWxEaXJlY3Rpb25WZWN0b3IYASABKAsyHi5zeW50aGVzaXMu",
//             "Z2x0ZmV4dHJhcy5WZWN0b3IzRBJDChtwcmltYXJ5U2xpZGVEaXJlY3Rpb25W",
//             "ZWN0b3IYAiABKAsyHi5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5WZWN0b3IzRBIZ",
//             "ChFwcmltYXJ5U2xpZGVWYWx1ZRgDIAEoARI9ChJwcmltYXJ5U2xpZGVMaW1p",
//             "dHMYBCABKAsyIS5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5Kb2ludExpbWl0cxJF",
//             "Ch1zZWNvbmRhcnlTbGlkZURpcmVjdGlvblZlY3RvchgFIAEoCzIeLnN5bnRo",
//             "ZXNpcy5nbHRmZXh0cmFzLlZlY3RvcjNEEhsKE3NlY29uZGFyeVNsaWRlVmFs",
//             "dWUYBiABKAESPwoUc2Vjb25kYXJ5U2xpZGVMaW1pdHMYByABKAsyIS5zeW50",
//             "aGVzaXMuZ2x0ZmV4dHJhcy5Kb2ludExpbWl0cxIVCg1yb3RhdGlvblZhbHVl",
//             "GAggASgBEjkKDnJvdGF0aW9uTGltaXRzGAkgASgLMiEuc3ludGhlc2lzLmds",
//             "dGZleHRyYXMuSm9pbnRMaW1pdHMipgMKD0JhbGxKb2ludE1vdGlvbhI7ChNy",
//             "b2xsRGlyZWN0aW9uVmVjdG9yGAEgASgLMh4uc3ludGhlc2lzLmdsdGZleHRy",
//             "YXMuVmVjdG9yM0QSEQoJcm9sbFZhbHVlGAIgASgBEjUKCnJvbGxMaW1pdHMY",
//             "AyABKAsyIS5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5Kb2ludExpbWl0cxI8ChRw",
//             "aXRjaERpcmVjdGlvblZlY3RvchgEIAEoCzIeLnN5bnRoZXNpcy5nbHRmZXh0",
//             "cmFzLlZlY3RvcjNEEhIKCnBpdGNoVmFsdWUYBSABKAESNgoLcGl0Y2hMaW1p",
//             "dHMYBiABKAsyIS5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5Kb2ludExpbWl0cxI6",
//             "ChJ5YXdEaXJlY3Rpb25WZWN0b3IYByABKAsyHi5zeW50aGVzaXMuZ2x0ZmV4",
//             "dHJhcy5WZWN0b3IzRBIQCgh5YXdWYWx1ZRgIIAEoARI0Cgl5YXdMaW1pdHMY",
//             "CSABKAsyIS5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5Kb2ludExpbWl0cyKmAQoL",
//             "Sm9pbnRMaW1pdHMSHQoVaXNNYXhpbXVtVmFsdWVFbmFibGVkGAEgASgIEh0K",
//             "FWlzTWluaW11bVZhbHVlRW5hYmxlZBgCIAEoCBIaChJpc1Jlc3RWYWx1ZUVu",
//             "YWJsZWQYAyABKAgSFAoMbWF4aW11bVZhbHVlGAQgASgBEhQKDG1pbmltdW1W",
//             "YWx1ZRgFIAEoARIRCglyZXN0VmFsdWUYBiABKAEieAoITWF0ZXJpYWwSCgoC",
//             "aWQYASABKAkSDAoEbmFtZRgCIAEoCRIUCgxhcHBlYXJhbmNlSWQYAyABKAkS",
//             "PAoKcHJvcGVydGllcxgEIAEoCzIoLnN5bnRoZXNpcy5nbHRmZXh0cmFzLk1h",
//             "dGVyaWFsUHJvcGVydGllcyLsAQoSTWF0ZXJpYWxQcm9wZXJ0aWVzEg8KB2Rl",
//             "bnNpdHkYASABKAUSFQoNeWllbGRTdHJlbmd0aBgCIAEoBRIXCg90ZW5zaWxl",
//             "U3RyZW5ndGgYAyABKAUSTAoKYXR0cmlidXRlcxgEIAMoCzI4LnN5bnRoZXNp",
//             "cy5nbHRmZXh0cmFzLk1hdGVyaWFsUHJvcGVydGllcy5BdHRyaWJ1dGVzRW50",
//             "cnkaRwoPQXR0cmlidXRlc0VudHJ5EgsKA2tleRgBIAEoCRIjCgV2YWx1ZRgC",
//             "IAEoCzIULmdvb2dsZS5wcm90b2J1Zi5Bbnk6AjgBInoKCkFwcGVhcmFuY2US",
//             "CgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRISCgpoYXNUZXh0dXJlGAMgASgI",
//             "Ej4KCnByb3BlcnRpZXMYBCABKAsyKi5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5B",
//             "cHBlYXJhbmNlUHJvcGVydGllcyLxBAoUQXBwZWFyYW5jZVByb3BlcnRpZXMS",
//             "KwoGYWxiZWRvGAEgASgLMhsuc3ludGhlc2lzLmdsdGZleHRyYXMuQ29sb3IS",
//             "EgoKZ2xvc3NpbmVzcxgCIAEoBRJNCgpoaWdobGlnaHRzGAMgASgOMjkuc3lu",
//             "dGhlc2lzLmdsdGZleHRyYXMuQXBwZWFyYW5jZVByb3BlcnRpZXMuSGlnaGxp",
//             "Z2h0c01vZGUSGgoScmVmbGVjdGl2aXR5RGlyZWN0GAQgASgFEhsKE3JlZmxl",
//             "Y3Rpdml0eU9ibGlxdWUYBSABKAUSFAoMdHJhbnNwYXJlbmN5GAYgASgFEhQK",
//             "DHRyYW5zbHVjZW5jeRgHIAEoBRIXCg9yZWZyYWN0aXZlSW5kZXgYCCABKAUS",
//             "OgoVc2VsZklsbHVtaW5hdGlvbkNvbG9yGAkgASgLMhsuc3ludGhlc2lzLmds",
//             "dGZleHRyYXMuQ29sb3ISIQoZc2VsZklsbHVtaW5hdGlvbkx1bWluYW5jZRgK",
//             "IAEoBRIhChlzZWxmSWxsdW1pbmF0aW9uQ29sb3JUZW1wGAsgASgFEk4KCmF0",
//             "dHJpYnV0ZXMYDCADKAsyOi5zeW50aGVzaXMuZ2x0ZmV4dHJhcy5BcHBlYXJh",
//             "bmNlUHJvcGVydGllcy5BdHRyaWJ1dGVzRW50cnkaRwoPQXR0cmlidXRlc0Vu",
//             "dHJ5EgsKA2tleRgBIAEoCRIjCgV2YWx1ZRgCIAEoCzIULmdvb2dsZS5wcm90",
//             "b2J1Zi5Bbnk6AjgBIjAKDkhpZ2hsaWdodHNNb2RlEgwKCE1FVEFMTElDEAAS",
//             "EAoMTk9OX01FVEFMTElDEAEiTQoGSGVhZGVyEgwKBHV1aWQYASABKAkSDAoE",
//             "bmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRISCgpyZXZpc2lvbklk",
//             "GAQgASgJIjMKBUNvbG9yEgkKAVIYASABKAUSCQoBRxgCIAEoBRIJCgFCGAMg",
//             "ASgFEgkKAUEYBCABKAUicwoNQm91bmRpbmdCb3gzRBIwCghtYXhQb2ludBgB",
//             "IAEoCzIeLnN5bnRoZXNpcy5nbHRmZXh0cmFzLlZlY3RvcjNEEjAKCG1pblBv",
//             "aW50GAIgASgLMh4uc3ludGhlc2lzLmdsdGZleHRyYXMuVmVjdG9yM0QiKwoI",
//             "VmVjdG9yM0QSCQoBeBgBIAEoARIJCgF5GAIgASgBEgkKAXoYAyABKAEiGQoI",
//             "TWF0cml4M0QSDQoFY2VsbHMYASADKAFiBnByb3RvMw=="));
//       descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
//           new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
//           new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Document), global::Synthesis.Gltfextras.Document.Parser, new[]{ "UserMeta", "DocumentMeta", "Design", "Attributes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.UserMeta), global::Synthesis.Gltfextras.UserMeta.Parser, new[]{ "UserName", "Id", "DisplayName", "Email" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.DocumentMeta), global::Synthesis.Gltfextras.DocumentMeta.Parser, new[]{ "FusionVersion", "Name", "VersionNumber", "Description", "Id", "ExportTime" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Design), global::Synthesis.Gltfextras.Design.Parser, new[]{ "HierarchyRoot", "Components", "Joints", "Materials", "Appearances" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Occurrence), global::Synthesis.Gltfextras.Occurrence.Parser, new[]{ "Header", "IsGrounded", "Transform", "ComponentUUID", "ChildOccurrences", "Attributes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Component), global::Synthesis.Gltfextras.Component.Parser, new[]{ "Header", "PartNumber", "BoundingBox", "MaterialId", "PhysicalProperties", "MeshBodies", "Attributes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.MeshBody), global::Synthesis.Gltfextras.MeshBody.Parser, new[]{ "Header", "AppearanceId", "MaterialId", "PhysicalProperties", "BoundingBox3D", "TriangleMesh", "Attributes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.TriangleMesh), global::Synthesis.Gltfextras.TriangleMesh.Parser, new[]{ "Vertices", "Normals", "Indices", "Uvs" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.PhysicalProperties), global::Synthesis.Gltfextras.PhysicalProperties.Parser, new[]{ "Density", "Mass", "Volume", "Area", "CenterOfMass" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Joint), global::Synthesis.Gltfextras.Joint.Parser, new[]{ "Header", "Origin", "IsLocked", "IsSuppressed", "OccurrenceOneUUID", "OccurrenceTwoUUID", "Attributes", "RigidJointMotion", "RevoluteJointMotion", "SliderJointMotion", "CylindricalJointMotion", "PinSlotJointMotion", "PlanarJointMotion", "BallJointMotion" }, new[]{ "JointMotion" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.RigidJointMotion), global::Synthesis.Gltfextras.RigidJointMotion.Parser, null, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.RevoluteJointMotion), global::Synthesis.Gltfextras.RevoluteJointMotion.Parser, new[]{ "RotationAxisVector", "RotationValue", "RotationLimits" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.SliderJointMotion), global::Synthesis.Gltfextras.SliderJointMotion.Parser, new[]{ "SlideDirectionVector", "SlideValue", "SlideLimits" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.CylindricalJointMotion), global::Synthesis.Gltfextras.CylindricalJointMotion.Parser, new[]{ "RotationAxisVector", "RotationValue", "RotationLimits", "SlideValue", "SlideLimits" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.PinSlotJointMotion), global::Synthesis.Gltfextras.PinSlotJointMotion.Parser, new[]{ "RotationAxisVector", "RotationValue", "RotationLimits", "SlideDirectionVector", "SlideValue", "SlideLimits" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.PlanarJointMotion), global::Synthesis.Gltfextras.PlanarJointMotion.Parser, new[]{ "NormalDirectionVector", "PrimarySlideDirectionVector", "PrimarySlideValue", "PrimarySlideLimits", "SecondarySlideDirectionVector", "SecondarySlideValue", "SecondarySlideLimits", "RotationValue", "RotationLimits" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.BallJointMotion), global::Synthesis.Gltfextras.BallJointMotion.Parser, new[]{ "RollDirectionVector", "RollValue", "RollLimits", "PitchDirectionVector", "PitchValue", "PitchLimits", "YawDirectionVector", "YawValue", "YawLimits" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.JointLimits), global::Synthesis.Gltfextras.JointLimits.Parser, new[]{ "IsMaximumValueEnabled", "IsMinimumValueEnabled", "IsRestValueEnabled", "MaximumValue", "MinimumValue", "RestValue" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Material), global::Synthesis.Gltfextras.Material.Parser, new[]{ "Id", "Name", "AppearanceId", "Properties" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.MaterialProperties), global::Synthesis.Gltfextras.MaterialProperties.Parser, new[]{ "Density", "YieldStrength", "TensileStrength", "Attributes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Appearance), global::Synthesis.Gltfextras.Appearance.Parser, new[]{ "Id", "Name", "HasTexture", "Properties" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.AppearanceProperties), global::Synthesis.Gltfextras.AppearanceProperties.Parser, new[]{ "Albedo", "Glossiness", "Highlights", "ReflectivityDirect", "ReflectivityOblique", "Transparency", "Translucency", "RefractiveIndex", "SelfIlluminationColor", "SelfIlluminationLuminance", "SelfIlluminationColorTemp", "Attributes" }, null, new[]{ typeof(global::Synthesis.Gltfextras.AppearanceProperties.Types.HighlightsMode) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Header), global::Synthesis.Gltfextras.Header.Parser, new[]{ "Uuid", "Name", "Description", "RevisionId" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Color), global::Synthesis.Gltfextras.Color.Parser, new[]{ "R", "G", "B", "A" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.BoundingBox3D), global::Synthesis.Gltfextras.BoundingBox3D.Parser, new[]{ "MaxPoint", "MinPoint" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Vector3D), global::Synthesis.Gltfextras.Vector3D.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
//             new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Gltfextras.Matrix3D), global::Synthesis.Gltfextras.Matrix3D.Parser, new[]{ "Cells" }, null, null, null, null)
//           }));
//     }
//     #endregion
//
//   }
//   #region Messages
//   public sealed partial class Document : pb::IMessage<Document> {
//     private static readonly pb::MessageParser<Document> _parser = new pb::MessageParser<Document>(() => new Document());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Document> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[0]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Document() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Document(Document other) : this() {
//       userMeta_ = other.userMeta_ != null ? other.userMeta_.Clone() : null;
//       documentMeta_ = other.documentMeta_ != null ? other.documentMeta_.Clone() : null;
//       design_ = other.design_ != null ? other.design_.Clone() : null;
//       attributes_ = other.attributes_.Clone();
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Document Clone() {
//       return new Document(this);
//     }
//
//     /// <summary>Field number for the "userMeta" field.</summary>
//     public const int UserMetaFieldNumber = 1;
//     private global::Synthesis.Gltfextras.UserMeta userMeta_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.UserMeta UserMeta {
//       get { return userMeta_; }
//       set {
//         userMeta_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "documentMeta" field.</summary>
//     public const int DocumentMetaFieldNumber = 2;
//     private global::Synthesis.Gltfextras.DocumentMeta documentMeta_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.DocumentMeta DocumentMeta {
//       get { return documentMeta_; }
//       set {
//         documentMeta_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "design" field.</summary>
//     public const int DesignFieldNumber = 3;
//     private global::Synthesis.Gltfextras.Design design_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Design Design {
//       get { return design_; }
//       set {
//         design_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "attributes" field.</summary>
//     public const int AttributesFieldNumber = 4;
//     private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_attributes_codec
//         = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 34);
//     private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> attributes_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Attributes {
//       get { return attributes_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Document);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Document other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(UserMeta, other.UserMeta)) return false;
//       if (!object.Equals(DocumentMeta, other.DocumentMeta)) return false;
//       if (!object.Equals(Design, other.Design)) return false;
//       if (!Attributes.Equals(other.Attributes)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (userMeta_ != null) hash ^= UserMeta.GetHashCode();
//       if (documentMeta_ != null) hash ^= DocumentMeta.GetHashCode();
//       if (design_ != null) hash ^= Design.GetHashCode();
//       hash ^= Attributes.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (userMeta_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(UserMeta);
//       }
//       if (documentMeta_ != null) {
//         output.WriteRawTag(18);
//         output.WriteMessage(DocumentMeta);
//       }
//       if (design_ != null) {
//         output.WriteRawTag(26);
//         output.WriteMessage(Design);
//       }
//       attributes_.WriteTo(output, _map_attributes_codec);
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (userMeta_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserMeta);
//       }
//       if (documentMeta_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(DocumentMeta);
//       }
//       if (design_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Design);
//       }
//       size += attributes_.CalculateSize(_map_attributes_codec);
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Document other) {
//       if (other == null) {
//         return;
//       }
//       if (other.userMeta_ != null) {
//         if (userMeta_ == null) {
//           UserMeta = new global::Synthesis.Gltfextras.UserMeta();
//         }
//         UserMeta.MergeFrom(other.UserMeta);
//       }
//       if (other.documentMeta_ != null) {
//         if (documentMeta_ == null) {
//           DocumentMeta = new global::Synthesis.Gltfextras.DocumentMeta();
//         }
//         DocumentMeta.MergeFrom(other.DocumentMeta);
//       }
//       if (other.design_ != null) {
//         if (design_ == null) {
//           Design = new global::Synthesis.Gltfextras.Design();
//         }
//         Design.MergeFrom(other.Design);
//       }
//       attributes_.Add(other.attributes_);
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (userMeta_ == null) {
//               UserMeta = new global::Synthesis.Gltfextras.UserMeta();
//             }
//             input.ReadMessage(UserMeta);
//             break;
//           }
//           case 18: {
//             if (documentMeta_ == null) {
//               DocumentMeta = new global::Synthesis.Gltfextras.DocumentMeta();
//             }
//             input.ReadMessage(DocumentMeta);
//             break;
//           }
//           case 26: {
//             if (design_ == null) {
//               Design = new global::Synthesis.Gltfextras.Design();
//             }
//             input.ReadMessage(Design);
//             break;
//           }
//           case 34: {
//             attributes_.AddEntriesFrom(input, _map_attributes_codec);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class UserMeta : pb::IMessage<UserMeta> {
//     private static readonly pb::MessageParser<UserMeta> _parser = new pb::MessageParser<UserMeta>(() => new UserMeta());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<UserMeta> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[1]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public UserMeta() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public UserMeta(UserMeta other) : this() {
//       userName_ = other.userName_;
//       id_ = other.id_;
//       displayName_ = other.displayName_;
//       email_ = other.email_;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public UserMeta Clone() {
//       return new UserMeta(this);
//     }
//
//     /// <summary>Field number for the "userName" field.</summary>
//     public const int UserNameFieldNumber = 1;
//     private string userName_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string UserName {
//       get { return userName_; }
//       set {
//         userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "id" field.</summary>
//     public const int IdFieldNumber = 2;
//     private string id_ = "";
//     /// <summary>
//     /// ex. "3X7MQHUFS9BG"
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Id {
//       get { return id_; }
//       set {
//         id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "displayName" field.</summary>
//     public const int DisplayNameFieldNumber = 3;
//     private string displayName_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string DisplayName {
//       get { return displayName_; }
//       set {
//         displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "email" field.</summary>
//     public const int EmailFieldNumber = 4;
//     private string email_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Email {
//       get { return email_; }
//       set {
//         email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as UserMeta);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(UserMeta other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (UserName != other.UserName) return false;
//       if (Id != other.Id) return false;
//       if (DisplayName != other.DisplayName) return false;
//       if (Email != other.Email) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (UserName.Length != 0) hash ^= UserName.GetHashCode();
//       if (Id.Length != 0) hash ^= Id.GetHashCode();
//       if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
//       if (Email.Length != 0) hash ^= Email.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (UserName.Length != 0) {
//         output.WriteRawTag(10);
//         output.WriteString(UserName);
//       }
//       if (Id.Length != 0) {
//         output.WriteRawTag(18);
//         output.WriteString(Id);
//       }
//       if (DisplayName.Length != 0) {
//         output.WriteRawTag(26);
//         output.WriteString(DisplayName);
//       }
//       if (Email.Length != 0) {
//         output.WriteRawTag(34);
//         output.WriteString(Email);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (UserName.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
//       }
//       if (Id.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
//       }
//       if (DisplayName.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
//       }
//       if (Email.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(UserMeta other) {
//       if (other == null) {
//         return;
//       }
//       if (other.UserName.Length != 0) {
//         UserName = other.UserName;
//       }
//       if (other.Id.Length != 0) {
//         Id = other.Id;
//       }
//       if (other.DisplayName.Length != 0) {
//         DisplayName = other.DisplayName;
//       }
//       if (other.Email.Length != 0) {
//         Email = other.Email;
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             UserName = input.ReadString();
//             break;
//           }
//           case 18: {
//             Id = input.ReadString();
//             break;
//           }
//           case 26: {
//             DisplayName = input.ReadString();
//             break;
//           }
//           case 34: {
//             Email = input.ReadString();
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class DocumentMeta : pb::IMessage<DocumentMeta> {
//     private static readonly pb::MessageParser<DocumentMeta> _parser = new pb::MessageParser<DocumentMeta>(() => new DocumentMeta());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<DocumentMeta> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[2]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public DocumentMeta() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public DocumentMeta(DocumentMeta other) : this() {
//       fusionVersion_ = other.fusionVersion_;
//       name_ = other.name_;
//       versionNumber_ = other.versionNumber_;
//       description_ = other.description_;
//       id_ = other.id_;
//       exportTime_ = other.exportTime_;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public DocumentMeta Clone() {
//       return new DocumentMeta(this);
//     }
//
//     /// <summary>Field number for the "fusionVersion" field.</summary>
//     public const int FusionVersionFieldNumber = 1;
//     private string fusionVersion_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string FusionVersion {
//       get { return fusionVersion_; }
//       set {
//         fusionVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "name" field.</summary>
//     public const int NameFieldNumber = 2;
//     private string name_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Name {
//       get { return name_; }
//       set {
//         name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "versionNumber" field.</summary>
//     public const int VersionNumberFieldNumber = 3;
//     private int versionNumber_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int VersionNumber {
//       get { return versionNumber_; }
//       set {
//         versionNumber_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "description" field.</summary>
//     public const int DescriptionFieldNumber = 4;
//     private string description_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Description {
//       get { return description_; }
//       set {
//         description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "id" field.</summary>
//     public const int IdFieldNumber = 5;
//     private string id_ = "";
//     /// <summary>
//     /// ex. "urn:adsk.wipprod:dm.lineage:vUFmflIzT6-M91MZpDjFiQ"
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Id {
//       get { return id_; }
//       set {
//         id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "exportTime" field.</summary>
//     public const int ExportTimeFieldNumber = 6;
//     private long exportTime_;
//     /// <summary>
//     /// unix time
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public long ExportTime {
//       get { return exportTime_; }
//       set {
//         exportTime_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as DocumentMeta);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(DocumentMeta other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (FusionVersion != other.FusionVersion) return false;
//       if (Name != other.Name) return false;
//       if (VersionNumber != other.VersionNumber) return false;
//       if (Description != other.Description) return false;
//       if (Id != other.Id) return false;
//       if (ExportTime != other.ExportTime) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (FusionVersion.Length != 0) hash ^= FusionVersion.GetHashCode();
//       if (Name.Length != 0) hash ^= Name.GetHashCode();
//       if (VersionNumber != 0) hash ^= VersionNumber.GetHashCode();
//       if (Description.Length != 0) hash ^= Description.GetHashCode();
//       if (Id.Length != 0) hash ^= Id.GetHashCode();
//       if (ExportTime != 0L) hash ^= ExportTime.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (FusionVersion.Length != 0) {
//         output.WriteRawTag(10);
//         output.WriteString(FusionVersion);
//       }
//       if (Name.Length != 0) {
//         output.WriteRawTag(18);
//         output.WriteString(Name);
//       }
//       if (VersionNumber != 0) {
//         output.WriteRawTag(24);
//         output.WriteInt32(VersionNumber);
//       }
//       if (Description.Length != 0) {
//         output.WriteRawTag(34);
//         output.WriteString(Description);
//       }
//       if (Id.Length != 0) {
//         output.WriteRawTag(42);
//         output.WriteString(Id);
//       }
//       if (ExportTime != 0L) {
//         output.WriteRawTag(48);
//         output.WriteInt64(ExportTime);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (FusionVersion.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(FusionVersion);
//       }
//       if (Name.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
//       }
//       if (VersionNumber != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionNumber);
//       }
//       if (Description.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
//       }
//       if (Id.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
//       }
//       if (ExportTime != 0L) {
//         size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExportTime);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(DocumentMeta other) {
//       if (other == null) {
//         return;
//       }
//       if (other.FusionVersion.Length != 0) {
//         FusionVersion = other.FusionVersion;
//       }
//       if (other.Name.Length != 0) {
//         Name = other.Name;
//       }
//       if (other.VersionNumber != 0) {
//         VersionNumber = other.VersionNumber;
//       }
//       if (other.Description.Length != 0) {
//         Description = other.Description;
//       }
//       if (other.Id.Length != 0) {
//         Id = other.Id;
//       }
//       if (other.ExportTime != 0L) {
//         ExportTime = other.ExportTime;
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             FusionVersion = input.ReadString();
//             break;
//           }
//           case 18: {
//             Name = input.ReadString();
//             break;
//           }
//           case 24: {
//             VersionNumber = input.ReadInt32();
//             break;
//           }
//           case 34: {
//             Description = input.ReadString();
//             break;
//           }
//           case 42: {
//             Id = input.ReadString();
//             break;
//           }
//           case 48: {
//             ExportTime = input.ReadInt64();
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class Design : pb::IMessage<Design> {
//     private static readonly pb::MessageParser<Design> _parser = new pb::MessageParser<Design>(() => new Design());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Design> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[3]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Design() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Design(Design other) : this() {
//       hierarchyRoot_ = other.hierarchyRoot_ != null ? other.hierarchyRoot_.Clone() : null;
//       components_ = other.components_.Clone();
//       joints_ = other.joints_.Clone();
//       materials_ = other.materials_.Clone();
//       appearances_ = other.appearances_.Clone();
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Design Clone() {
//       return new Design(this);
//     }
//
//     /// <summary>Field number for the "hierarchyRoot" field.</summary>
//     public const int HierarchyRootFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Occurrence hierarchyRoot_;
//     /// <summary>
//     /// the root in fusion is technically a component, this is a dummy occurrence
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Occurrence HierarchyRoot {
//       get { return hierarchyRoot_; }
//       set {
//         hierarchyRoot_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "components" field.</summary>
//     public const int ComponentsFieldNumber = 2;
//     private static readonly pb::FieldCodec<global::Synthesis.Gltfextras.Component> _repeated_components_codec
//         = pb::FieldCodec.ForMessage(18, global::Synthesis.Gltfextras.Component.Parser);
//     private readonly pbc::RepeatedField<global::Synthesis.Gltfextras.Component> components_ = new pbc::RepeatedField<global::Synthesis.Gltfextras.Component>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<global::Synthesis.Gltfextras.Component> Components {
//       get { return components_; }
//     }
//
//     /// <summary>Field number for the "joints" field.</summary>
//     public const int JointsFieldNumber = 3;
//     private static readonly pb::FieldCodec<global::Synthesis.Gltfextras.Joint> _repeated_joints_codec
//         = pb::FieldCodec.ForMessage(26, global::Synthesis.Gltfextras.Joint.Parser);
//     private readonly pbc::RepeatedField<global::Synthesis.Gltfextras.Joint> joints_ = new pbc::RepeatedField<global::Synthesis.Gltfextras.Joint>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<global::Synthesis.Gltfextras.Joint> Joints {
//       get { return joints_; }
//     }
//
//     /// <summary>Field number for the "materials" field.</summary>
//     public const int MaterialsFieldNumber = 4;
//     private static readonly pb::FieldCodec<global::Synthesis.Gltfextras.Material> _repeated_materials_codec
//         = pb::FieldCodec.ForMessage(34, global::Synthesis.Gltfextras.Material.Parser);
//     private readonly pbc::RepeatedField<global::Synthesis.Gltfextras.Material> materials_ = new pbc::RepeatedField<global::Synthesis.Gltfextras.Material>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<global::Synthesis.Gltfextras.Material> Materials {
//       get { return materials_; }
//     }
//
//     /// <summary>Field number for the "appearances" field.</summary>
//     public const int AppearancesFieldNumber = 5;
//     private static readonly pb::FieldCodec<global::Synthesis.Gltfextras.Appearance> _repeated_appearances_codec
//         = pb::FieldCodec.ForMessage(42, global::Synthesis.Gltfextras.Appearance.Parser);
//     private readonly pbc::RepeatedField<global::Synthesis.Gltfextras.Appearance> appearances_ = new pbc::RepeatedField<global::Synthesis.Gltfextras.Appearance>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<global::Synthesis.Gltfextras.Appearance> Appearances {
//       get { return appearances_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Design);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Design other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(HierarchyRoot, other.HierarchyRoot)) return false;
//       if(!components_.Equals(other.components_)) return false;
//       if(!joints_.Equals(other.joints_)) return false;
//       if(!materials_.Equals(other.materials_)) return false;
//       if(!appearances_.Equals(other.appearances_)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (hierarchyRoot_ != null) hash ^= HierarchyRoot.GetHashCode();
//       hash ^= components_.GetHashCode();
//       hash ^= joints_.GetHashCode();
//       hash ^= materials_.GetHashCode();
//       hash ^= appearances_.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (hierarchyRoot_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(HierarchyRoot);
//       }
//       components_.WriteTo(output, _repeated_components_codec);
//       joints_.WriteTo(output, _repeated_joints_codec);
//       materials_.WriteTo(output, _repeated_materials_codec);
//       appearances_.WriteTo(output, _repeated_appearances_codec);
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (hierarchyRoot_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(HierarchyRoot);
//       }
//       size += components_.CalculateSize(_repeated_components_codec);
//       size += joints_.CalculateSize(_repeated_joints_codec);
//       size += materials_.CalculateSize(_repeated_materials_codec);
//       size += appearances_.CalculateSize(_repeated_appearances_codec);
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Design other) {
//       if (other == null) {
//         return;
//       }
//       if (other.hierarchyRoot_ != null) {
//         if (hierarchyRoot_ == null) {
//           HierarchyRoot = new global::Synthesis.Gltfextras.Occurrence();
//         }
//         HierarchyRoot.MergeFrom(other.HierarchyRoot);
//       }
//       components_.Add(other.components_);
//       joints_.Add(other.joints_);
//       materials_.Add(other.materials_);
//       appearances_.Add(other.appearances_);
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (hierarchyRoot_ == null) {
//               HierarchyRoot = new global::Synthesis.Gltfextras.Occurrence();
//             }
//             input.ReadMessage(HierarchyRoot);
//             break;
//           }
//           case 18: {
//             components_.AddEntriesFrom(input, _repeated_components_codec);
//             break;
//           }
//           case 26: {
//             joints_.AddEntriesFrom(input, _repeated_joints_codec);
//             break;
//           }
//           case 34: {
//             materials_.AddEntriesFrom(input, _repeated_materials_codec);
//             break;
//           }
//           case 42: {
//             appearances_.AddEntriesFrom(input, _repeated_appearances_codec);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class Occurrence : pb::IMessage<Occurrence> {
//     private static readonly pb::MessageParser<Occurrence> _parser = new pb::MessageParser<Occurrence>(() => new Occurrence());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Occurrence> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[4]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Occurrence() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Occurrence(Occurrence other) : this() {
//       header_ = other.header_ != null ? other.header_.Clone() : null;
//       isGrounded_ = other.isGrounded_;
//       transform_ = other.transform_ != null ? other.transform_.Clone() : null;
//       componentUUID_ = other.componentUUID_;
//       childOccurrences_ = other.childOccurrences_.Clone();
//       attributes_ = other.attributes_.Clone();
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Occurrence Clone() {
//       return new Occurrence(this);
//     }
//
//     /// <summary>Field number for the "header" field.</summary>
//     public const int HeaderFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Header header_;
//     /// <summary>
//     /// no revisionId or description, header is blank for root occurrence
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Header Header {
//       get { return header_; }
//       set {
//         header_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "isGrounded" field.</summary>
//     public const int IsGroundedFieldNumber = 2;
//     private bool isGrounded_;
//     /// <summary>
//     /// always blank for root occurrence
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool IsGrounded {
//       get { return isGrounded_; }
//       set {
//         isGrounded_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "transform" field.</summary>
//     public const int TransformFieldNumber = 3;
//     private global::Synthesis.Gltfextras.Matrix3D transform_;
//     /// <summary>
//     /// always blank for root occurrence
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Matrix3D Transform {
//       get { return transform_; }
//       set {
//         transform_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "componentUUID" field.</summary>
//     public const int ComponentUUIDFieldNumber = 4;
//     private string componentUUID_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string ComponentUUID {
//       get { return componentUUID_; }
//       set {
//         componentUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "childOccurrences" field.</summary>
//     public const int ChildOccurrencesFieldNumber = 5;
//     private static readonly pb::FieldCodec<global::Synthesis.Gltfextras.Occurrence> _repeated_childOccurrences_codec
//         = pb::FieldCodec.ForMessage(42, global::Synthesis.Gltfextras.Occurrence.Parser);
//     private readonly pbc::RepeatedField<global::Synthesis.Gltfextras.Occurrence> childOccurrences_ = new pbc::RepeatedField<global::Synthesis.Gltfextras.Occurrence>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<global::Synthesis.Gltfextras.Occurrence> ChildOccurrences {
//       get { return childOccurrences_; }
//     }
//
//     /// <summary>Field number for the "attributes" field.</summary>
//     public const int AttributesFieldNumber = 6;
//     private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_attributes_codec
//         = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 50);
//     private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> attributes_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Attributes {
//       get { return attributes_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Occurrence);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Occurrence other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(Header, other.Header)) return false;
//       if (IsGrounded != other.IsGrounded) return false;
//       if (!object.Equals(Transform, other.Transform)) return false;
//       if (ComponentUUID != other.ComponentUUID) return false;
//       if(!childOccurrences_.Equals(other.childOccurrences_)) return false;
//       if (!Attributes.Equals(other.Attributes)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (header_ != null) hash ^= Header.GetHashCode();
//       if (IsGrounded != false) hash ^= IsGrounded.GetHashCode();
//       if (transform_ != null) hash ^= Transform.GetHashCode();
//       if (ComponentUUID.Length != 0) hash ^= ComponentUUID.GetHashCode();
//       hash ^= childOccurrences_.GetHashCode();
//       hash ^= Attributes.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (header_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(Header);
//       }
//       if (IsGrounded != false) {
//         output.WriteRawTag(16);
//         output.WriteBool(IsGrounded);
//       }
//       if (transform_ != null) {
//         output.WriteRawTag(26);
//         output.WriteMessage(Transform);
//       }
//       if (ComponentUUID.Length != 0) {
//         output.WriteRawTag(34);
//         output.WriteString(ComponentUUID);
//       }
//       childOccurrences_.WriteTo(output, _repeated_childOccurrences_codec);
//       attributes_.WriteTo(output, _map_attributes_codec);
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (header_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
//       }
//       if (IsGrounded != false) {
//         size += 1 + 1;
//       }
//       if (transform_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
//       }
//       if (ComponentUUID.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(ComponentUUID);
//       }
//       size += childOccurrences_.CalculateSize(_repeated_childOccurrences_codec);
//       size += attributes_.CalculateSize(_map_attributes_codec);
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Occurrence other) {
//       if (other == null) {
//         return;
//       }
//       if (other.header_ != null) {
//         if (header_ == null) {
//           Header = new global::Synthesis.Gltfextras.Header();
//         }
//         Header.MergeFrom(other.Header);
//       }
//       if (other.IsGrounded != false) {
//         IsGrounded = other.IsGrounded;
//       }
//       if (other.transform_ != null) {
//         if (transform_ == null) {
//           Transform = new global::Synthesis.Gltfextras.Matrix3D();
//         }
//         Transform.MergeFrom(other.Transform);
//       }
//       if (other.ComponentUUID.Length != 0) {
//         ComponentUUID = other.ComponentUUID;
//       }
//       childOccurrences_.Add(other.childOccurrences_);
//       attributes_.Add(other.attributes_);
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (header_ == null) {
//               Header = new global::Synthesis.Gltfextras.Header();
//             }
//             input.ReadMessage(Header);
//             break;
//           }
//           case 16: {
//             IsGrounded = input.ReadBool();
//             break;
//           }
//           case 26: {
//             if (transform_ == null) {
//               Transform = new global::Synthesis.Gltfextras.Matrix3D();
//             }
//             input.ReadMessage(Transform);
//             break;
//           }
//           case 34: {
//             ComponentUUID = input.ReadString();
//             break;
//           }
//           case 42: {
//             childOccurrences_.AddEntriesFrom(input, _repeated_childOccurrences_codec);
//             break;
//           }
//           case 50: {
//             attributes_.AddEntriesFrom(input, _map_attributes_codec);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class Component : pb::IMessage<Component> {
//     private static readonly pb::MessageParser<Component> _parser = new pb::MessageParser<Component>(() => new Component());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Component> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[5]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Component() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Component(Component other) : this() {
//       header_ = other.header_ != null ? other.header_.Clone() : null;
//       partNumber_ = other.partNumber_;
//       boundingBox_ = other.boundingBox_ != null ? other.boundingBox_.Clone() : null;
//       materialId_ = other.materialId_;
//       physicalProperties_ = other.physicalProperties_ != null ? other.physicalProperties_.Clone() : null;
//       meshBodies_ = other.meshBodies_.Clone();
//       attributes_ = other.attributes_.Clone();
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Component Clone() {
//       return new Component(this);
//     }
//
//     /// <summary>Field number for the "header" field.</summary>
//     public const int HeaderFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Header header_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Header Header {
//       get { return header_; }
//       set {
//         header_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "partNumber" field.</summary>
//     public const int PartNumberFieldNumber = 2;
//     private string partNumber_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string PartNumber {
//       get { return partNumber_; }
//       set {
//         partNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "boundingBox" field.</summary>
//     public const int BoundingBoxFieldNumber = 3;
//     private global::Synthesis.Gltfextras.BoundingBox3D boundingBox_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.BoundingBox3D BoundingBox {
//       get { return boundingBox_; }
//       set {
//         boundingBox_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "materialId" field.</summary>
//     public const int MaterialIdFieldNumber = 4;
//     private string materialId_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string MaterialId {
//       get { return materialId_; }
//       set {
//         materialId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "physicalProperties" field.</summary>
//     public const int PhysicalPropertiesFieldNumber = 5;
//     private global::Synthesis.Gltfextras.PhysicalProperties physicalProperties_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.PhysicalProperties PhysicalProperties {
//       get { return physicalProperties_; }
//       set {
//         physicalProperties_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "meshBodies" field.</summary>
//     public const int MeshBodiesFieldNumber = 6;
//     private static readonly pb::FieldCodec<global::Synthesis.Gltfextras.MeshBody> _repeated_meshBodies_codec
//         = pb::FieldCodec.ForMessage(50, global::Synthesis.Gltfextras.MeshBody.Parser);
//     private readonly pbc::RepeatedField<global::Synthesis.Gltfextras.MeshBody> meshBodies_ = new pbc::RepeatedField<global::Synthesis.Gltfextras.MeshBody>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<global::Synthesis.Gltfextras.MeshBody> MeshBodies {
//       get { return meshBodies_; }
//     }
//
//     /// <summary>Field number for the "attributes" field.</summary>
//     public const int AttributesFieldNumber = 7;
//     private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_attributes_codec
//         = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 58);
//     private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> attributes_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Attributes {
//       get { return attributes_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Component);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Component other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(Header, other.Header)) return false;
//       if (PartNumber != other.PartNumber) return false;
//       if (!object.Equals(BoundingBox, other.BoundingBox)) return false;
//       if (MaterialId != other.MaterialId) return false;
//       if (!object.Equals(PhysicalProperties, other.PhysicalProperties)) return false;
//       if(!meshBodies_.Equals(other.meshBodies_)) return false;
//       if (!Attributes.Equals(other.Attributes)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (header_ != null) hash ^= Header.GetHashCode();
//       if (PartNumber.Length != 0) hash ^= PartNumber.GetHashCode();
//       if (boundingBox_ != null) hash ^= BoundingBox.GetHashCode();
//       if (MaterialId.Length != 0) hash ^= MaterialId.GetHashCode();
//       if (physicalProperties_ != null) hash ^= PhysicalProperties.GetHashCode();
//       hash ^= meshBodies_.GetHashCode();
//       hash ^= Attributes.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (header_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(Header);
//       }
//       if (PartNumber.Length != 0) {
//         output.WriteRawTag(18);
//         output.WriteString(PartNumber);
//       }
//       if (boundingBox_ != null) {
//         output.WriteRawTag(26);
//         output.WriteMessage(BoundingBox);
//       }
//       if (MaterialId.Length != 0) {
//         output.WriteRawTag(34);
//         output.WriteString(MaterialId);
//       }
//       if (physicalProperties_ != null) {
//         output.WriteRawTag(42);
//         output.WriteMessage(PhysicalProperties);
//       }
//       meshBodies_.WriteTo(output, _repeated_meshBodies_codec);
//       attributes_.WriteTo(output, _map_attributes_codec);
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (header_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
//       }
//       if (PartNumber.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(PartNumber);
//       }
//       if (boundingBox_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBox);
//       }
//       if (MaterialId.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(MaterialId);
//       }
//       if (physicalProperties_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(PhysicalProperties);
//       }
//       size += meshBodies_.CalculateSize(_repeated_meshBodies_codec);
//       size += attributes_.CalculateSize(_map_attributes_codec);
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Component other) {
//       if (other == null) {
//         return;
//       }
//       if (other.header_ != null) {
//         if (header_ == null) {
//           Header = new global::Synthesis.Gltfextras.Header();
//         }
//         Header.MergeFrom(other.Header);
//       }
//       if (other.PartNumber.Length != 0) {
//         PartNumber = other.PartNumber;
//       }
//       if (other.boundingBox_ != null) {
//         if (boundingBox_ == null) {
//           BoundingBox = new global::Synthesis.Gltfextras.BoundingBox3D();
//         }
//         BoundingBox.MergeFrom(other.BoundingBox);
//       }
//       if (other.MaterialId.Length != 0) {
//         MaterialId = other.MaterialId;
//       }
//       if (other.physicalProperties_ != null) {
//         if (physicalProperties_ == null) {
//           PhysicalProperties = new global::Synthesis.Gltfextras.PhysicalProperties();
//         }
//         PhysicalProperties.MergeFrom(other.PhysicalProperties);
//       }
//       meshBodies_.Add(other.meshBodies_);
//       attributes_.Add(other.attributes_);
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (header_ == null) {
//               Header = new global::Synthesis.Gltfextras.Header();
//             }
//             input.ReadMessage(Header);
//             break;
//           }
//           case 18: {
//             PartNumber = input.ReadString();
//             break;
//           }
//           case 26: {
//             if (boundingBox_ == null) {
//               BoundingBox = new global::Synthesis.Gltfextras.BoundingBox3D();
//             }
//             input.ReadMessage(BoundingBox);
//             break;
//           }
//           case 34: {
//             MaterialId = input.ReadString();
//             break;
//           }
//           case 42: {
//             if (physicalProperties_ == null) {
//               PhysicalProperties = new global::Synthesis.Gltfextras.PhysicalProperties();
//             }
//             input.ReadMessage(PhysicalProperties);
//             break;
//           }
//           case 50: {
//             meshBodies_.AddEntriesFrom(input, _repeated_meshBodies_codec);
//             break;
//           }
//           case 58: {
//             attributes_.AddEntriesFrom(input, _map_attributes_codec);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class MeshBody : pb::IMessage<MeshBody> {
//     private static readonly pb::MessageParser<MeshBody> _parser = new pb::MessageParser<MeshBody>(() => new MeshBody());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<MeshBody> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[6]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public MeshBody() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public MeshBody(MeshBody other) : this() {
//       header_ = other.header_ != null ? other.header_.Clone() : null;
//       appearanceId_ = other.appearanceId_;
//       materialId_ = other.materialId_;
//       physicalProperties_ = other.physicalProperties_ != null ? other.physicalProperties_.Clone() : null;
//       boundingBox3D_ = other.boundingBox3D_ != null ? other.boundingBox3D_.Clone() : null;
//       triangleMesh_ = other.triangleMesh_ != null ? other.triangleMesh_.Clone() : null;
//       attributes_ = other.attributes_.Clone();
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public MeshBody Clone() {
//       return new MeshBody(this);
//     }
//
//     /// <summary>Field number for the "header" field.</summary>
//     public const int HeaderFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Header header_;
//     /// <summary>
//     /// no description
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Header Header {
//       get { return header_; }
//       set {
//         header_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "appearanceId" field.</summary>
//     public const int AppearanceIdFieldNumber = 2;
//     private string appearanceId_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string AppearanceId {
//       get { return appearanceId_; }
//       set {
//         appearanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "materialId" field.</summary>
//     public const int MaterialIdFieldNumber = 3;
//     private string materialId_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string MaterialId {
//       get { return materialId_; }
//       set {
//         materialId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "physicalProperties" field.</summary>
//     public const int PhysicalPropertiesFieldNumber = 4;
//     private global::Synthesis.Gltfextras.PhysicalProperties physicalProperties_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.PhysicalProperties PhysicalProperties {
//       get { return physicalProperties_; }
//       set {
//         physicalProperties_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "boundingBox3D" field.</summary>
//     public const int BoundingBox3DFieldNumber = 5;
//     private global::Synthesis.Gltfextras.BoundingBox3D boundingBox3D_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.BoundingBox3D BoundingBox3D {
//       get { return boundingBox3D_; }
//       set {
//         boundingBox3D_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "triangleMesh" field.</summary>
//     public const int TriangleMeshFieldNumber = 6;
//     private global::Synthesis.Gltfextras.TriangleMesh triangleMesh_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.TriangleMesh TriangleMesh {
//       get { return triangleMesh_; }
//       set {
//         triangleMesh_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "attributes" field.</summary>
//     public const int AttributesFieldNumber = 7;
//     private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_attributes_codec
//         = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 58);
//     private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> attributes_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Attributes {
//       get { return attributes_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as MeshBody);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(MeshBody other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(Header, other.Header)) return false;
//       if (AppearanceId != other.AppearanceId) return false;
//       if (MaterialId != other.MaterialId) return false;
//       if (!object.Equals(PhysicalProperties, other.PhysicalProperties)) return false;
//       if (!object.Equals(BoundingBox3D, other.BoundingBox3D)) return false;
//       if (!object.Equals(TriangleMesh, other.TriangleMesh)) return false;
//       if (!Attributes.Equals(other.Attributes)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (header_ != null) hash ^= Header.GetHashCode();
//       if (AppearanceId.Length != 0) hash ^= AppearanceId.GetHashCode();
//       if (MaterialId.Length != 0) hash ^= MaterialId.GetHashCode();
//       if (physicalProperties_ != null) hash ^= PhysicalProperties.GetHashCode();
//       if (boundingBox3D_ != null) hash ^= BoundingBox3D.GetHashCode();
//       if (triangleMesh_ != null) hash ^= TriangleMesh.GetHashCode();
//       hash ^= Attributes.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (header_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(Header);
//       }
//       if (AppearanceId.Length != 0) {
//         output.WriteRawTag(18);
//         output.WriteString(AppearanceId);
//       }
//       if (MaterialId.Length != 0) {
//         output.WriteRawTag(26);
//         output.WriteString(MaterialId);
//       }
//       if (physicalProperties_ != null) {
//         output.WriteRawTag(34);
//         output.WriteMessage(PhysicalProperties);
//       }
//       if (boundingBox3D_ != null) {
//         output.WriteRawTag(42);
//         output.WriteMessage(BoundingBox3D);
//       }
//       if (triangleMesh_ != null) {
//         output.WriteRawTag(50);
//         output.WriteMessage(TriangleMesh);
//       }
//       attributes_.WriteTo(output, _map_attributes_codec);
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (header_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
//       }
//       if (AppearanceId.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(AppearanceId);
//       }
//       if (MaterialId.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(MaterialId);
//       }
//       if (physicalProperties_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(PhysicalProperties);
//       }
//       if (boundingBox3D_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBox3D);
//       }
//       if (triangleMesh_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(TriangleMesh);
//       }
//       size += attributes_.CalculateSize(_map_attributes_codec);
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(MeshBody other) {
//       if (other == null) {
//         return;
//       }
//       if (other.header_ != null) {
//         if (header_ == null) {
//           Header = new global::Synthesis.Gltfextras.Header();
//         }
//         Header.MergeFrom(other.Header);
//       }
//       if (other.AppearanceId.Length != 0) {
//         AppearanceId = other.AppearanceId;
//       }
//       if (other.MaterialId.Length != 0) {
//         MaterialId = other.MaterialId;
//       }
//       if (other.physicalProperties_ != null) {
//         if (physicalProperties_ == null) {
//           PhysicalProperties = new global::Synthesis.Gltfextras.PhysicalProperties();
//         }
//         PhysicalProperties.MergeFrom(other.PhysicalProperties);
//       }
//       if (other.boundingBox3D_ != null) {
//         if (boundingBox3D_ == null) {
//           BoundingBox3D = new global::Synthesis.Gltfextras.BoundingBox3D();
//         }
//         BoundingBox3D.MergeFrom(other.BoundingBox3D);
//       }
//       if (other.triangleMesh_ != null) {
//         if (triangleMesh_ == null) {
//           TriangleMesh = new global::Synthesis.Gltfextras.TriangleMesh();
//         }
//         TriangleMesh.MergeFrom(other.TriangleMesh);
//       }
//       attributes_.Add(other.attributes_);
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (header_ == null) {
//               Header = new global::Synthesis.Gltfextras.Header();
//             }
//             input.ReadMessage(Header);
//             break;
//           }
//           case 18: {
//             AppearanceId = input.ReadString();
//             break;
//           }
//           case 26: {
//             MaterialId = input.ReadString();
//             break;
//           }
//           case 34: {
//             if (physicalProperties_ == null) {
//               PhysicalProperties = new global::Synthesis.Gltfextras.PhysicalProperties();
//             }
//             input.ReadMessage(PhysicalProperties);
//             break;
//           }
//           case 42: {
//             if (boundingBox3D_ == null) {
//               BoundingBox3D = new global::Synthesis.Gltfextras.BoundingBox3D();
//             }
//             input.ReadMessage(BoundingBox3D);
//             break;
//           }
//           case 50: {
//             if (triangleMesh_ == null) {
//               TriangleMesh = new global::Synthesis.Gltfextras.TriangleMesh();
//             }
//             input.ReadMessage(TriangleMesh);
//             break;
//           }
//           case 58: {
//             attributes_.AddEntriesFrom(input, _map_attributes_codec);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   /// <summary>
//   /// not using Vectors here to avoid overhead on large meshes
//   /// </summary>
//   public sealed partial class TriangleMesh : pb::IMessage<TriangleMesh> {
//     private static readonly pb::MessageParser<TriangleMesh> _parser = new pb::MessageParser<TriangleMesh>(() => new TriangleMesh());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<TriangleMesh> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[7]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public TriangleMesh() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public TriangleMesh(TriangleMesh other) : this() {
//       vertices_ = other.vertices_.Clone();
//       normals_ = other.normals_.Clone();
//       indices_ = other.indices_.Clone();
//       uvs_ = other.uvs_.Clone();
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public TriangleMesh Clone() {
//       return new TriangleMesh(this);
//     }
//
//     /// <summary>Field number for the "vertices" field.</summary>
//     public const int VerticesFieldNumber = 1;
//     private static readonly pb::FieldCodec<double> _repeated_vertices_codec
//         = pb::FieldCodec.ForDouble(10);
//     private readonly pbc::RepeatedField<double> vertices_ = new pbc::RepeatedField<double>();
//     /// <summary>
//     /// x y z x y z....
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<double> Vertices {
//       get { return vertices_; }
//     }
//
//     /// <summary>Field number for the "normals" field.</summary>
//     public const int NormalsFieldNumber = 2;
//     private static readonly pb::FieldCodec<double> _repeated_normals_codec
//         = pb::FieldCodec.ForDouble(18);
//     private readonly pbc::RepeatedField<double> normals_ = new pbc::RepeatedField<double>();
//     /// <summary>
//     /// x y z x y z....
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<double> Normals {
//       get { return normals_; }
//     }
//
//     /// <summary>Field number for the "indices" field.</summary>
//     public const int IndicesFieldNumber = 3;
//     private static readonly pb::FieldCodec<int> _repeated_indices_codec
//         = pb::FieldCodec.ForInt32(26);
//     private readonly pbc::RepeatedField<int> indices_ = new pbc::RepeatedField<int>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<int> Indices {
//       get { return indices_; }
//     }
//
//     /// <summary>Field number for the "uvs" field.</summary>
//     public const int UvsFieldNumber = 4;
//     private static readonly pb::FieldCodec<double> _repeated_uvs_codec
//         = pb::FieldCodec.ForDouble(34);
//     private readonly pbc::RepeatedField<double> uvs_ = new pbc::RepeatedField<double>();
//     /// <summary>
//     /// u v u v....
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<double> Uvs {
//       get { return uvs_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as TriangleMesh);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(TriangleMesh other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if(!vertices_.Equals(other.vertices_)) return false;
//       if(!normals_.Equals(other.normals_)) return false;
//       if(!indices_.Equals(other.indices_)) return false;
//       if(!uvs_.Equals(other.uvs_)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       hash ^= vertices_.GetHashCode();
//       hash ^= normals_.GetHashCode();
//       hash ^= indices_.GetHashCode();
//       hash ^= uvs_.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       vertices_.WriteTo(output, _repeated_vertices_codec);
//       normals_.WriteTo(output, _repeated_normals_codec);
//       indices_.WriteTo(output, _repeated_indices_codec);
//       uvs_.WriteTo(output, _repeated_uvs_codec);
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       size += vertices_.CalculateSize(_repeated_vertices_codec);
//       size += normals_.CalculateSize(_repeated_normals_codec);
//       size += indices_.CalculateSize(_repeated_indices_codec);
//       size += uvs_.CalculateSize(_repeated_uvs_codec);
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(TriangleMesh other) {
//       if (other == null) {
//         return;
//       }
//       vertices_.Add(other.vertices_);
//       normals_.Add(other.normals_);
//       indices_.Add(other.indices_);
//       uvs_.Add(other.uvs_);
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10:
//           case 9: {
//             vertices_.AddEntriesFrom(input, _repeated_vertices_codec);
//             break;
//           }
//           case 18:
//           case 17: {
//             normals_.AddEntriesFrom(input, _repeated_normals_codec);
//             break;
//           }
//           case 26:
//           case 24: {
//             indices_.AddEntriesFrom(input, _repeated_indices_codec);
//             break;
//           }
//           case 34:
//           case 33: {
//             uvs_.AddEntriesFrom(input, _repeated_uvs_codec);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class PhysicalProperties : pb::IMessage<PhysicalProperties> {
//     private static readonly pb::MessageParser<PhysicalProperties> _parser = new pb::MessageParser<PhysicalProperties>(() => new PhysicalProperties());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<PhysicalProperties> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[8]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public PhysicalProperties() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public PhysicalProperties(PhysicalProperties other) : this() {
//       density_ = other.density_;
//       mass_ = other.mass_;
//       volume_ = other.volume_;
//       area_ = other.area_;
//       centerOfMass_ = other.centerOfMass_ != null ? other.centerOfMass_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public PhysicalProperties Clone() {
//       return new PhysicalProperties(this);
//     }
//
//     /// <summary>Field number for the "density" field.</summary>
//     public const int DensityFieldNumber = 1;
//     private double density_;
//     /// <summary>
//     /// kg/(cm^3)
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double Density {
//       get { return density_; }
//       set {
//         density_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "mass" field.</summary>
//     public const int MassFieldNumber = 2;
//     private double mass_;
//     /// <summary>
//     /// kg
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double Mass {
//       get { return mass_; }
//       set {
//         mass_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "volume" field.</summary>
//     public const int VolumeFieldNumber = 3;
//     private double volume_;
//     /// <summary>
//     ///cm^3
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double Volume {
//       get { return volume_; }
//       set {
//         volume_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "area" field.</summary>
//     public const int AreaFieldNumber = 4;
//     private double area_;
//     /// <summary>
//     /// cm^2
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double Area {
//       get { return area_; }
//       set {
//         area_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "centerOfMass" field.</summary>
//     public const int CenterOfMassFieldNumber = 5;
//     private global::Synthesis.Gltfextras.Vector3D centerOfMass_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D CenterOfMass {
//       get { return centerOfMass_; }
//       set {
//         centerOfMass_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as PhysicalProperties);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(PhysicalProperties other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Density, other.Density)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mass, other.Mass)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Volume, other.Volume)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Area, other.Area)) return false;
//       if (!object.Equals(CenterOfMass, other.CenterOfMass)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (Density != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Density);
//       if (Mass != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mass);
//       if (Volume != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Volume);
//       if (Area != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Area);
//       if (centerOfMass_ != null) hash ^= CenterOfMass.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (Density != 0D) {
//         output.WriteRawTag(9);
//         output.WriteDouble(Density);
//       }
//       if (Mass != 0D) {
//         output.WriteRawTag(17);
//         output.WriteDouble(Mass);
//       }
//       if (Volume != 0D) {
//         output.WriteRawTag(25);
//         output.WriteDouble(Volume);
//       }
//       if (Area != 0D) {
//         output.WriteRawTag(33);
//         output.WriteDouble(Area);
//       }
//       if (centerOfMass_ != null) {
//         output.WriteRawTag(42);
//         output.WriteMessage(CenterOfMass);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (Density != 0D) {
//         size += 1 + 8;
//       }
//       if (Mass != 0D) {
//         size += 1 + 8;
//       }
//       if (Volume != 0D) {
//         size += 1 + 8;
//       }
//       if (Area != 0D) {
//         size += 1 + 8;
//       }
//       if (centerOfMass_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterOfMass);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(PhysicalProperties other) {
//       if (other == null) {
//         return;
//       }
//       if (other.Density != 0D) {
//         Density = other.Density;
//       }
//       if (other.Mass != 0D) {
//         Mass = other.Mass;
//       }
//       if (other.Volume != 0D) {
//         Volume = other.Volume;
//       }
//       if (other.Area != 0D) {
//         Area = other.Area;
//       }
//       if (other.centerOfMass_ != null) {
//         if (centerOfMass_ == null) {
//           CenterOfMass = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         CenterOfMass.MergeFrom(other.CenterOfMass);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 9: {
//             Density = input.ReadDouble();
//             break;
//           }
//           case 17: {
//             Mass = input.ReadDouble();
//             break;
//           }
//           case 25: {
//             Volume = input.ReadDouble();
//             break;
//           }
//           case 33: {
//             Area = input.ReadDouble();
//             break;
//           }
//           case 42: {
//             if (centerOfMass_ == null) {
//               CenterOfMass = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(CenterOfMass);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   /// <summary>
//   ///
//   ///We're choosing not to include info about the joint geometry, such as Joint.angle, Joint.isFlipped, Joint.offset, etc. as raw brep data is not encoded anyways
//   /// </summary>
//   public sealed partial class Joint : pb::IMessage<Joint> {
//     private static readonly pb::MessageParser<Joint> _parser = new pb::MessageParser<Joint>(() => new Joint());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Joint> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[9]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Joint() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Joint(Joint other) : this() {
//       header_ = other.header_ != null ? other.header_.Clone() : null;
//       origin_ = other.origin_ != null ? other.origin_.Clone() : null;
//       isLocked_ = other.isLocked_;
//       isSuppressed_ = other.isSuppressed_;
//       occurrenceOneUUID_ = other.occurrenceOneUUID_;
//       occurrenceTwoUUID_ = other.occurrenceTwoUUID_;
//       attributes_ = other.attributes_.Clone();
//       switch (other.JointMotionCase) {
//         case JointMotionOneofCase.RigidJointMotion:
//           RigidJointMotion = other.RigidJointMotion.Clone();
//           break;
//         case JointMotionOneofCase.RevoluteJointMotion:
//           RevoluteJointMotion = other.RevoluteJointMotion.Clone();
//           break;
//         case JointMotionOneofCase.SliderJointMotion:
//           SliderJointMotion = other.SliderJointMotion.Clone();
//           break;
//         case JointMotionOneofCase.CylindricalJointMotion:
//           CylindricalJointMotion = other.CylindricalJointMotion.Clone();
//           break;
//         case JointMotionOneofCase.PinSlotJointMotion:
//           PinSlotJointMotion = other.PinSlotJointMotion.Clone();
//           break;
//         case JointMotionOneofCase.PlanarJointMotion:
//           PlanarJointMotion = other.PlanarJointMotion.Clone();
//           break;
//         case JointMotionOneofCase.BallJointMotion:
//           BallJointMotion = other.BallJointMotion.Clone();
//           break;
//       }
//
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Joint Clone() {
//       return new Joint(this);
//     }
//
//     /// <summary>Field number for the "header" field.</summary>
//     public const int HeaderFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Header header_;
//     /// <summary>
//     /// no revisionId or description
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Header Header {
//       get { return header_; }
//       set {
//         header_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "origin" field.</summary>
//     public const int OriginFieldNumber = 2;
//     private global::Synthesis.Gltfextras.Vector3D origin_;
//     /// <summary>
//     /// In the root component coordinate frame
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D Origin {
//       get { return origin_; }
//       set {
//         origin_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "isLocked" field.</summary>
//     public const int IsLockedFieldNumber = 3;
//     private bool isLocked_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool IsLocked {
//       get { return isLocked_; }
//       set {
//         isLocked_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "isSuppressed" field.</summary>
//     public const int IsSuppressedFieldNumber = 4;
//     private bool isSuppressed_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool IsSuppressed {
//       get { return isSuppressed_; }
//       set {
//         isSuppressed_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "occurrenceOneUUID" field.</summary>
//     public const int OccurrenceOneUUIDFieldNumber = 5;
//     private string occurrenceOneUUID_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string OccurrenceOneUUID {
//       get { return occurrenceOneUUID_; }
//       set {
//         occurrenceOneUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "occurrenceTwoUUID" field.</summary>
//     public const int OccurrenceTwoUUIDFieldNumber = 6;
//     private string occurrenceTwoUUID_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string OccurrenceTwoUUID {
//       get { return occurrenceTwoUUID_; }
//       set {
//         occurrenceTwoUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "attributes" field.</summary>
//     public const int AttributesFieldNumber = 7;
//     private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_attributes_codec
//         = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 58);
//     private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> attributes_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Attributes {
//       get { return attributes_; }
//     }
//
//     /// <summary>Field number for the "rigidJointMotion" field.</summary>
//     public const int RigidJointMotionFieldNumber = 8;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.RigidJointMotion RigidJointMotion {
//       get { return jointMotionCase_ == JointMotionOneofCase.RigidJointMotion ? (global::Synthesis.Gltfextras.RigidJointMotion) jointMotion_ : null; }
//       set {
//         jointMotion_ = value;
//         jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.RigidJointMotion;
//       }
//     }
//
//     /// <summary>Field number for the "revoluteJointMotion" field.</summary>
//     public const int RevoluteJointMotionFieldNumber = 9;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.RevoluteJointMotion RevoluteJointMotion {
//       get { return jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion ? (global::Synthesis.Gltfextras.RevoluteJointMotion) jointMotion_ : null; }
//       set {
//         jointMotion_ = value;
//         jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.RevoluteJointMotion;
//       }
//     }
//
//     /// <summary>Field number for the "sliderJointMotion" field.</summary>
//     public const int SliderJointMotionFieldNumber = 10;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.SliderJointMotion SliderJointMotion {
//       get { return jointMotionCase_ == JointMotionOneofCase.SliderJointMotion ? (global::Synthesis.Gltfextras.SliderJointMotion) jointMotion_ : null; }
//       set {
//         jointMotion_ = value;
//         jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.SliderJointMotion;
//       }
//     }
//
//     /// <summary>Field number for the "cylindricalJointMotion" field.</summary>
//     public const int CylindricalJointMotionFieldNumber = 11;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.CylindricalJointMotion CylindricalJointMotion {
//       get { return jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion ? (global::Synthesis.Gltfextras.CylindricalJointMotion) jointMotion_ : null; }
//       set {
//         jointMotion_ = value;
//         jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.CylindricalJointMotion;
//       }
//     }
//
//     /// <summary>Field number for the "pinSlotJointMotion" field.</summary>
//     public const int PinSlotJointMotionFieldNumber = 12;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.PinSlotJointMotion PinSlotJointMotion {
//       get { return jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion ? (global::Synthesis.Gltfextras.PinSlotJointMotion) jointMotion_ : null; }
//       set {
//         jointMotion_ = value;
//         jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.PinSlotJointMotion;
//       }
//     }
//
//     /// <summary>Field number for the "planarJointMotion" field.</summary>
//     public const int PlanarJointMotionFieldNumber = 13;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.PlanarJointMotion PlanarJointMotion {
//       get { return jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion ? (global::Synthesis.Gltfextras.PlanarJointMotion) jointMotion_ : null; }
//       set {
//         jointMotion_ = value;
//         jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.PlanarJointMotion;
//       }
//     }
//
//     /// <summary>Field number for the "ballJointMotion" field.</summary>
//     public const int BallJointMotionFieldNumber = 14;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.BallJointMotion BallJointMotion {
//       get { return jointMotionCase_ == JointMotionOneofCase.BallJointMotion ? (global::Synthesis.Gltfextras.BallJointMotion) jointMotion_ : null; }
//       set {
//         jointMotion_ = value;
//         jointMotionCase_ = value == null ? JointMotionOneofCase.None : JointMotionOneofCase.BallJointMotion;
//       }
//     }
//
//     private object jointMotion_;
//     /// <summary>Enum of possible cases for the "jointMotion" oneof.</summary>
//     public enum JointMotionOneofCase {
//       None = 0,
//       RigidJointMotion = 8,
//       RevoluteJointMotion = 9,
//       SliderJointMotion = 10,
//       CylindricalJointMotion = 11,
//       PinSlotJointMotion = 12,
//       PlanarJointMotion = 13,
//       BallJointMotion = 14,
//     }
//     private JointMotionOneofCase jointMotionCase_ = JointMotionOneofCase.None;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public JointMotionOneofCase JointMotionCase {
//       get { return jointMotionCase_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void ClearJointMotion() {
//       jointMotionCase_ = JointMotionOneofCase.None;
//       jointMotion_ = null;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Joint);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Joint other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(Header, other.Header)) return false;
//       if (!object.Equals(Origin, other.Origin)) return false;
//       if (IsLocked != other.IsLocked) return false;
//       if (IsSuppressed != other.IsSuppressed) return false;
//       if (OccurrenceOneUUID != other.OccurrenceOneUUID) return false;
//       if (OccurrenceTwoUUID != other.OccurrenceTwoUUID) return false;
//       if (!Attributes.Equals(other.Attributes)) return false;
//       if (!object.Equals(RigidJointMotion, other.RigidJointMotion)) return false;
//       if (!object.Equals(RevoluteJointMotion, other.RevoluteJointMotion)) return false;
//       if (!object.Equals(SliderJointMotion, other.SliderJointMotion)) return false;
//       if (!object.Equals(CylindricalJointMotion, other.CylindricalJointMotion)) return false;
//       if (!object.Equals(PinSlotJointMotion, other.PinSlotJointMotion)) return false;
//       if (!object.Equals(PlanarJointMotion, other.PlanarJointMotion)) return false;
//       if (!object.Equals(BallJointMotion, other.BallJointMotion)) return false;
//       if (JointMotionCase != other.JointMotionCase) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (header_ != null) hash ^= Header.GetHashCode();
//       if (origin_ != null) hash ^= Origin.GetHashCode();
//       if (IsLocked != false) hash ^= IsLocked.GetHashCode();
//       if (IsSuppressed != false) hash ^= IsSuppressed.GetHashCode();
//       if (OccurrenceOneUUID.Length != 0) hash ^= OccurrenceOneUUID.GetHashCode();
//       if (OccurrenceTwoUUID.Length != 0) hash ^= OccurrenceTwoUUID.GetHashCode();
//       hash ^= Attributes.GetHashCode();
//       if (jointMotionCase_ == JointMotionOneofCase.RigidJointMotion) hash ^= RigidJointMotion.GetHashCode();
//       if (jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion) hash ^= RevoluteJointMotion.GetHashCode();
//       if (jointMotionCase_ == JointMotionOneofCase.SliderJointMotion) hash ^= SliderJointMotion.GetHashCode();
//       if (jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion) hash ^= CylindricalJointMotion.GetHashCode();
//       if (jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion) hash ^= PinSlotJointMotion.GetHashCode();
//       if (jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion) hash ^= PlanarJointMotion.GetHashCode();
//       if (jointMotionCase_ == JointMotionOneofCase.BallJointMotion) hash ^= BallJointMotion.GetHashCode();
//       hash ^= (int) jointMotionCase_;
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (header_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(Header);
//       }
//       if (origin_ != null) {
//         output.WriteRawTag(18);
//         output.WriteMessage(Origin);
//       }
//       if (IsLocked != false) {
//         output.WriteRawTag(24);
//         output.WriteBool(IsLocked);
//       }
//       if (IsSuppressed != false) {
//         output.WriteRawTag(32);
//         output.WriteBool(IsSuppressed);
//       }
//       if (OccurrenceOneUUID.Length != 0) {
//         output.WriteRawTag(42);
//         output.WriteString(OccurrenceOneUUID);
//       }
//       if (OccurrenceTwoUUID.Length != 0) {
//         output.WriteRawTag(50);
//         output.WriteString(OccurrenceTwoUUID);
//       }
//       attributes_.WriteTo(output, _map_attributes_codec);
//       if (jointMotionCase_ == JointMotionOneofCase.RigidJointMotion) {
//         output.WriteRawTag(66);
//         output.WriteMessage(RigidJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion) {
//         output.WriteRawTag(74);
//         output.WriteMessage(RevoluteJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.SliderJointMotion) {
//         output.WriteRawTag(82);
//         output.WriteMessage(SliderJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion) {
//         output.WriteRawTag(90);
//         output.WriteMessage(CylindricalJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion) {
//         output.WriteRawTag(98);
//         output.WriteMessage(PinSlotJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion) {
//         output.WriteRawTag(106);
//         output.WriteMessage(PlanarJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.BallJointMotion) {
//         output.WriteRawTag(114);
//         output.WriteMessage(BallJointMotion);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (header_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
//       }
//       if (origin_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
//       }
//       if (IsLocked != false) {
//         size += 1 + 1;
//       }
//       if (IsSuppressed != false) {
//         size += 1 + 1;
//       }
//       if (OccurrenceOneUUID.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(OccurrenceOneUUID);
//       }
//       if (OccurrenceTwoUUID.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(OccurrenceTwoUUID);
//       }
//       size += attributes_.CalculateSize(_map_attributes_codec);
//       if (jointMotionCase_ == JointMotionOneofCase.RigidJointMotion) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RigidJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevoluteJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.SliderJointMotion) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(SliderJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(CylindricalJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(PinSlotJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlanarJointMotion);
//       }
//       if (jointMotionCase_ == JointMotionOneofCase.BallJointMotion) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(BallJointMotion);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Joint other) {
//       if (other == null) {
//         return;
//       }
//       if (other.header_ != null) {
//         if (header_ == null) {
//           Header = new global::Synthesis.Gltfextras.Header();
//         }
//         Header.MergeFrom(other.Header);
//       }
//       if (other.origin_ != null) {
//         if (origin_ == null) {
//           Origin = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         Origin.MergeFrom(other.Origin);
//       }
//       if (other.IsLocked != false) {
//         IsLocked = other.IsLocked;
//       }
//       if (other.IsSuppressed != false) {
//         IsSuppressed = other.IsSuppressed;
//       }
//       if (other.OccurrenceOneUUID.Length != 0) {
//         OccurrenceOneUUID = other.OccurrenceOneUUID;
//       }
//       if (other.OccurrenceTwoUUID.Length != 0) {
//         OccurrenceTwoUUID = other.OccurrenceTwoUUID;
//       }
//       attributes_.Add(other.attributes_);
//       switch (other.JointMotionCase) {
//         case JointMotionOneofCase.RigidJointMotion:
//           if (RigidJointMotion == null) {
//             RigidJointMotion = new global::Synthesis.Gltfextras.RigidJointMotion();
//           }
//           RigidJointMotion.MergeFrom(other.RigidJointMotion);
//           break;
//         case JointMotionOneofCase.RevoluteJointMotion:
//           if (RevoluteJointMotion == null) {
//             RevoluteJointMotion = new global::Synthesis.Gltfextras.RevoluteJointMotion();
//           }
//           RevoluteJointMotion.MergeFrom(other.RevoluteJointMotion);
//           break;
//         case JointMotionOneofCase.SliderJointMotion:
//           if (SliderJointMotion == null) {
//             SliderJointMotion = new global::Synthesis.Gltfextras.SliderJointMotion();
//           }
//           SliderJointMotion.MergeFrom(other.SliderJointMotion);
//           break;
//         case JointMotionOneofCase.CylindricalJointMotion:
//           if (CylindricalJointMotion == null) {
//             CylindricalJointMotion = new global::Synthesis.Gltfextras.CylindricalJointMotion();
//           }
//           CylindricalJointMotion.MergeFrom(other.CylindricalJointMotion);
//           break;
//         case JointMotionOneofCase.PinSlotJointMotion:
//           if (PinSlotJointMotion == null) {
//             PinSlotJointMotion = new global::Synthesis.Gltfextras.PinSlotJointMotion();
//           }
//           PinSlotJointMotion.MergeFrom(other.PinSlotJointMotion);
//           break;
//         case JointMotionOneofCase.PlanarJointMotion:
//           if (PlanarJointMotion == null) {
//             PlanarJointMotion = new global::Synthesis.Gltfextras.PlanarJointMotion();
//           }
//           PlanarJointMotion.MergeFrom(other.PlanarJointMotion);
//           break;
//         case JointMotionOneofCase.BallJointMotion:
//           if (BallJointMotion == null) {
//             BallJointMotion = new global::Synthesis.Gltfextras.BallJointMotion();
//           }
//           BallJointMotion.MergeFrom(other.BallJointMotion);
//           break;
//       }
//
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (header_ == null) {
//               Header = new global::Synthesis.Gltfextras.Header();
//             }
//             input.ReadMessage(Header);
//             break;
//           }
//           case 18: {
//             if (origin_ == null) {
//               Origin = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(Origin);
//             break;
//           }
//           case 24: {
//             IsLocked = input.ReadBool();
//             break;
//           }
//           case 32: {
//             IsSuppressed = input.ReadBool();
//             break;
//           }
//           case 42: {
//             OccurrenceOneUUID = input.ReadString();
//             break;
//           }
//           case 50: {
//             OccurrenceTwoUUID = input.ReadString();
//             break;
//           }
//           case 58: {
//             attributes_.AddEntriesFrom(input, _map_attributes_codec);
//             break;
//           }
//           case 66: {
//             global::Synthesis.Gltfextras.RigidJointMotion subBuilder = new global::Synthesis.Gltfextras.RigidJointMotion();
//             if (jointMotionCase_ == JointMotionOneofCase.RigidJointMotion) {
//               subBuilder.MergeFrom(RigidJointMotion);
//             }
//             input.ReadMessage(subBuilder);
//             RigidJointMotion = subBuilder;
//             break;
//           }
//           case 74: {
//             global::Synthesis.Gltfextras.RevoluteJointMotion subBuilder = new global::Synthesis.Gltfextras.RevoluteJointMotion();
//             if (jointMotionCase_ == JointMotionOneofCase.RevoluteJointMotion) {
//               subBuilder.MergeFrom(RevoluteJointMotion);
//             }
//             input.ReadMessage(subBuilder);
//             RevoluteJointMotion = subBuilder;
//             break;
//           }
//           case 82: {
//             global::Synthesis.Gltfextras.SliderJointMotion subBuilder = new global::Synthesis.Gltfextras.SliderJointMotion();
//             if (jointMotionCase_ == JointMotionOneofCase.SliderJointMotion) {
//               subBuilder.MergeFrom(SliderJointMotion);
//             }
//             input.ReadMessage(subBuilder);
//             SliderJointMotion = subBuilder;
//             break;
//           }
//           case 90: {
//             global::Synthesis.Gltfextras.CylindricalJointMotion subBuilder = new global::Synthesis.Gltfextras.CylindricalJointMotion();
//             if (jointMotionCase_ == JointMotionOneofCase.CylindricalJointMotion) {
//               subBuilder.MergeFrom(CylindricalJointMotion);
//             }
//             input.ReadMessage(subBuilder);
//             CylindricalJointMotion = subBuilder;
//             break;
//           }
//           case 98: {
//             global::Synthesis.Gltfextras.PinSlotJointMotion subBuilder = new global::Synthesis.Gltfextras.PinSlotJointMotion();
//             if (jointMotionCase_ == JointMotionOneofCase.PinSlotJointMotion) {
//               subBuilder.MergeFrom(PinSlotJointMotion);
//             }
//             input.ReadMessage(subBuilder);
//             PinSlotJointMotion = subBuilder;
//             break;
//           }
//           case 106: {
//             global::Synthesis.Gltfextras.PlanarJointMotion subBuilder = new global::Synthesis.Gltfextras.PlanarJointMotion();
//             if (jointMotionCase_ == JointMotionOneofCase.PlanarJointMotion) {
//               subBuilder.MergeFrom(PlanarJointMotion);
//             }
//             input.ReadMessage(subBuilder);
//             PlanarJointMotion = subBuilder;
//             break;
//           }
//           case 114: {
//             global::Synthesis.Gltfextras.BallJointMotion subBuilder = new global::Synthesis.Gltfextras.BallJointMotion();
//             if (jointMotionCase_ == JointMotionOneofCase.BallJointMotion) {
//               subBuilder.MergeFrom(BallJointMotion);
//             }
//             input.ReadMessage(subBuilder);
//             BallJointMotion = subBuilder;
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class RigidJointMotion : pb::IMessage<RigidJointMotion> {
//     private static readonly pb::MessageParser<RigidJointMotion> _parser = new pb::MessageParser<RigidJointMotion>(() => new RigidJointMotion());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<RigidJointMotion> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[10]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public RigidJointMotion() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public RigidJointMotion(RigidJointMotion other) : this() {
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public RigidJointMotion Clone() {
//       return new RigidJointMotion(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as RigidJointMotion);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(RigidJointMotion other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(RigidJointMotion other) {
//       if (other == null) {
//         return;
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class RevoluteJointMotion : pb::IMessage<RevoluteJointMotion> {
//     private static readonly pb::MessageParser<RevoluteJointMotion> _parser = new pb::MessageParser<RevoluteJointMotion>(() => new RevoluteJointMotion());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<RevoluteJointMotion> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[11]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public RevoluteJointMotion() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public RevoluteJointMotion(RevoluteJointMotion other) : this() {
//       rotationAxisVector_ = other.rotationAxisVector_ != null ? other.rotationAxisVector_.Clone() : null;
//       rotationValue_ = other.rotationValue_;
//       rotationLimits_ = other.rotationLimits_ != null ? other.rotationLimits_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public RevoluteJointMotion Clone() {
//       return new RevoluteJointMotion(this);
//     }
//
//     /// <summary>Field number for the "rotationAxisVector" field.</summary>
//     public const int RotationAxisVectorFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Vector3D rotationAxisVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D RotationAxisVector {
//       get { return rotationAxisVector_; }
//       set {
//         rotationAxisVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rotationValue" field.</summary>
//     public const int RotationValueFieldNumber = 2;
//     private double rotationValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double RotationValue {
//       get { return rotationValue_; }
//       set {
//         rotationValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rotationLimits" field.</summary>
//     public const int RotationLimitsFieldNumber = 3;
//     private global::Synthesis.Gltfextras.JointLimits rotationLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits RotationLimits {
//       get { return rotationLimits_; }
//       set {
//         rotationLimits_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as RevoluteJointMotion);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(RevoluteJointMotion other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(RotationAxisVector, other.RotationAxisVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotationValue, other.RotationValue)) return false;
//       if (!object.Equals(RotationLimits, other.RotationLimits)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (rotationAxisVector_ != null) hash ^= RotationAxisVector.GetHashCode();
//       if (RotationValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotationValue);
//       if (rotationLimits_ != null) hash ^= RotationLimits.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (rotationAxisVector_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(RotationAxisVector);
//       }
//       if (RotationValue != 0D) {
//         output.WriteRawTag(17);
//         output.WriteDouble(RotationValue);
//       }
//       if (rotationLimits_ != null) {
//         output.WriteRawTag(26);
//         output.WriteMessage(RotationLimits);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (rotationAxisVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationAxisVector);
//       }
//       if (RotationValue != 0D) {
//         size += 1 + 8;
//       }
//       if (rotationLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationLimits);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(RevoluteJointMotion other) {
//       if (other == null) {
//         return;
//       }
//       if (other.rotationAxisVector_ != null) {
//         if (rotationAxisVector_ == null) {
//           RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         RotationAxisVector.MergeFrom(other.RotationAxisVector);
//       }
//       if (other.RotationValue != 0D) {
//         RotationValue = other.RotationValue;
//       }
//       if (other.rotationLimits_ != null) {
//         if (rotationLimits_ == null) {
//           RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         RotationLimits.MergeFrom(other.RotationLimits);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (rotationAxisVector_ == null) {
//               RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(RotationAxisVector);
//             break;
//           }
//           case 17: {
//             RotationValue = input.ReadDouble();
//             break;
//           }
//           case 26: {
//             if (rotationLimits_ == null) {
//               RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(RotationLimits);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class SliderJointMotion : pb::IMessage<SliderJointMotion> {
//     private static readonly pb::MessageParser<SliderJointMotion> _parser = new pb::MessageParser<SliderJointMotion>(() => new SliderJointMotion());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<SliderJointMotion> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[12]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public SliderJointMotion() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public SliderJointMotion(SliderJointMotion other) : this() {
//       slideDirectionVector_ = other.slideDirectionVector_ != null ? other.slideDirectionVector_.Clone() : null;
//       slideValue_ = other.slideValue_;
//       slideLimits_ = other.slideLimits_ != null ? other.slideLimits_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public SliderJointMotion Clone() {
//       return new SliderJointMotion(this);
//     }
//
//     /// <summary>Field number for the "slideDirectionVector" field.</summary>
//     public const int SlideDirectionVectorFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Vector3D slideDirectionVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D SlideDirectionVector {
//       get { return slideDirectionVector_; }
//       set {
//         slideDirectionVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "slideValue" field.</summary>
//     public const int SlideValueFieldNumber = 2;
//     private double slideValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double SlideValue {
//       get { return slideValue_; }
//       set {
//         slideValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "slideLimits" field.</summary>
//     public const int SlideLimitsFieldNumber = 3;
//     private global::Synthesis.Gltfextras.JointLimits slideLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits SlideLimits {
//       get { return slideLimits_; }
//       set {
//         slideLimits_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as SliderJointMotion);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(SliderJointMotion other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(SlideDirectionVector, other.SlideDirectionVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SlideValue, other.SlideValue)) return false;
//       if (!object.Equals(SlideLimits, other.SlideLimits)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (slideDirectionVector_ != null) hash ^= SlideDirectionVector.GetHashCode();
//       if (SlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SlideValue);
//       if (slideLimits_ != null) hash ^= SlideLimits.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (slideDirectionVector_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(SlideDirectionVector);
//       }
//       if (SlideValue != 0D) {
//         output.WriteRawTag(17);
//         output.WriteDouble(SlideValue);
//       }
//       if (slideLimits_ != null) {
//         output.WriteRawTag(26);
//         output.WriteMessage(SlideLimits);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (slideDirectionVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideDirectionVector);
//       }
//       if (SlideValue != 0D) {
//         size += 1 + 8;
//       }
//       if (slideLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideLimits);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(SliderJointMotion other) {
//       if (other == null) {
//         return;
//       }
//       if (other.slideDirectionVector_ != null) {
//         if (slideDirectionVector_ == null) {
//           SlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         SlideDirectionVector.MergeFrom(other.SlideDirectionVector);
//       }
//       if (other.SlideValue != 0D) {
//         SlideValue = other.SlideValue;
//       }
//       if (other.slideLimits_ != null) {
//         if (slideLimits_ == null) {
//           SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         SlideLimits.MergeFrom(other.SlideLimits);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (slideDirectionVector_ == null) {
//               SlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(SlideDirectionVector);
//             break;
//           }
//           case 17: {
//             SlideValue = input.ReadDouble();
//             break;
//           }
//           case 26: {
//             if (slideLimits_ == null) {
//               SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(SlideLimits);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class CylindricalJointMotion : pb::IMessage<CylindricalJointMotion> {
//     private static readonly pb::MessageParser<CylindricalJointMotion> _parser = new pb::MessageParser<CylindricalJointMotion>(() => new CylindricalJointMotion());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<CylindricalJointMotion> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[13]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public CylindricalJointMotion() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public CylindricalJointMotion(CylindricalJointMotion other) : this() {
//       rotationAxisVector_ = other.rotationAxisVector_ != null ? other.rotationAxisVector_.Clone() : null;
//       rotationValue_ = other.rotationValue_;
//       rotationLimits_ = other.rotationLimits_ != null ? other.rotationLimits_.Clone() : null;
//       slideValue_ = other.slideValue_;
//       slideLimits_ = other.slideLimits_ != null ? other.slideLimits_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public CylindricalJointMotion Clone() {
//       return new CylindricalJointMotion(this);
//     }
//
//     /// <summary>Field number for the "rotationAxisVector" field.</summary>
//     public const int RotationAxisVectorFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Vector3D rotationAxisVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D RotationAxisVector {
//       get { return rotationAxisVector_; }
//       set {
//         rotationAxisVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rotationValue" field.</summary>
//     public const int RotationValueFieldNumber = 2;
//     private double rotationValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double RotationValue {
//       get { return rotationValue_; }
//       set {
//         rotationValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rotationLimits" field.</summary>
//     public const int RotationLimitsFieldNumber = 3;
//     private global::Synthesis.Gltfextras.JointLimits rotationLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits RotationLimits {
//       get { return rotationLimits_; }
//       set {
//         rotationLimits_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "slideValue" field.</summary>
//     public const int SlideValueFieldNumber = 4;
//     private double slideValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double SlideValue {
//       get { return slideValue_; }
//       set {
//         slideValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "slideLimits" field.</summary>
//     public const int SlideLimitsFieldNumber = 5;
//     private global::Synthesis.Gltfextras.JointLimits slideLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits SlideLimits {
//       get { return slideLimits_; }
//       set {
//         slideLimits_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as CylindricalJointMotion);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(CylindricalJointMotion other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(RotationAxisVector, other.RotationAxisVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotationValue, other.RotationValue)) return false;
//       if (!object.Equals(RotationLimits, other.RotationLimits)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SlideValue, other.SlideValue)) return false;
//       if (!object.Equals(SlideLimits, other.SlideLimits)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (rotationAxisVector_ != null) hash ^= RotationAxisVector.GetHashCode();
//       if (RotationValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotationValue);
//       if (rotationLimits_ != null) hash ^= RotationLimits.GetHashCode();
//       if (SlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SlideValue);
//       if (slideLimits_ != null) hash ^= SlideLimits.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (rotationAxisVector_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(RotationAxisVector);
//       }
//       if (RotationValue != 0D) {
//         output.WriteRawTag(17);
//         output.WriteDouble(RotationValue);
//       }
//       if (rotationLimits_ != null) {
//         output.WriteRawTag(26);
//         output.WriteMessage(RotationLimits);
//       }
//       if (SlideValue != 0D) {
//         output.WriteRawTag(33);
//         output.WriteDouble(SlideValue);
//       }
//       if (slideLimits_ != null) {
//         output.WriteRawTag(42);
//         output.WriteMessage(SlideLimits);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (rotationAxisVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationAxisVector);
//       }
//       if (RotationValue != 0D) {
//         size += 1 + 8;
//       }
//       if (rotationLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationLimits);
//       }
//       if (SlideValue != 0D) {
//         size += 1 + 8;
//       }
//       if (slideLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideLimits);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(CylindricalJointMotion other) {
//       if (other == null) {
//         return;
//       }
//       if (other.rotationAxisVector_ != null) {
//         if (rotationAxisVector_ == null) {
//           RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         RotationAxisVector.MergeFrom(other.RotationAxisVector);
//       }
//       if (other.RotationValue != 0D) {
//         RotationValue = other.RotationValue;
//       }
//       if (other.rotationLimits_ != null) {
//         if (rotationLimits_ == null) {
//           RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         RotationLimits.MergeFrom(other.RotationLimits);
//       }
//       if (other.SlideValue != 0D) {
//         SlideValue = other.SlideValue;
//       }
//       if (other.slideLimits_ != null) {
//         if (slideLimits_ == null) {
//           SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         SlideLimits.MergeFrom(other.SlideLimits);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (rotationAxisVector_ == null) {
//               RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(RotationAxisVector);
//             break;
//           }
//           case 17: {
//             RotationValue = input.ReadDouble();
//             break;
//           }
//           case 26: {
//             if (rotationLimits_ == null) {
//               RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(RotationLimits);
//             break;
//           }
//           case 33: {
//             SlideValue = input.ReadDouble();
//             break;
//           }
//           case 42: {
//             if (slideLimits_ == null) {
//               SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(SlideLimits);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class PinSlotJointMotion : pb::IMessage<PinSlotJointMotion> {
//     private static readonly pb::MessageParser<PinSlotJointMotion> _parser = new pb::MessageParser<PinSlotJointMotion>(() => new PinSlotJointMotion());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<PinSlotJointMotion> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[14]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public PinSlotJointMotion() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public PinSlotJointMotion(PinSlotJointMotion other) : this() {
//       rotationAxisVector_ = other.rotationAxisVector_ != null ? other.rotationAxisVector_.Clone() : null;
//       rotationValue_ = other.rotationValue_;
//       rotationLimits_ = other.rotationLimits_ != null ? other.rotationLimits_.Clone() : null;
//       slideDirectionVector_ = other.slideDirectionVector_ != null ? other.slideDirectionVector_.Clone() : null;
//       slideValue_ = other.slideValue_;
//       slideLimits_ = other.slideLimits_ != null ? other.slideLimits_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public PinSlotJointMotion Clone() {
//       return new PinSlotJointMotion(this);
//     }
//
//     /// <summary>Field number for the "rotationAxisVector" field.</summary>
//     public const int RotationAxisVectorFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Vector3D rotationAxisVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D RotationAxisVector {
//       get { return rotationAxisVector_; }
//       set {
//         rotationAxisVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rotationValue" field.</summary>
//     public const int RotationValueFieldNumber = 2;
//     private double rotationValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double RotationValue {
//       get { return rotationValue_; }
//       set {
//         rotationValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rotationLimits" field.</summary>
//     public const int RotationLimitsFieldNumber = 3;
//     private global::Synthesis.Gltfextras.JointLimits rotationLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits RotationLimits {
//       get { return rotationLimits_; }
//       set {
//         rotationLimits_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "slideDirectionVector" field.</summary>
//     public const int SlideDirectionVectorFieldNumber = 4;
//     private global::Synthesis.Gltfextras.Vector3D slideDirectionVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D SlideDirectionVector {
//       get { return slideDirectionVector_; }
//       set {
//         slideDirectionVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "slideValue" field.</summary>
//     public const int SlideValueFieldNumber = 5;
//     private double slideValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double SlideValue {
//       get { return slideValue_; }
//       set {
//         slideValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "slideLimits" field.</summary>
//     public const int SlideLimitsFieldNumber = 6;
//     private global::Synthesis.Gltfextras.JointLimits slideLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits SlideLimits {
//       get { return slideLimits_; }
//       set {
//         slideLimits_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as PinSlotJointMotion);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(PinSlotJointMotion other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(RotationAxisVector, other.RotationAxisVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotationValue, other.RotationValue)) return false;
//       if (!object.Equals(RotationLimits, other.RotationLimits)) return false;
//       if (!object.Equals(SlideDirectionVector, other.SlideDirectionVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SlideValue, other.SlideValue)) return false;
//       if (!object.Equals(SlideLimits, other.SlideLimits)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (rotationAxisVector_ != null) hash ^= RotationAxisVector.GetHashCode();
//       if (RotationValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotationValue);
//       if (rotationLimits_ != null) hash ^= RotationLimits.GetHashCode();
//       if (slideDirectionVector_ != null) hash ^= SlideDirectionVector.GetHashCode();
//       if (SlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SlideValue);
//       if (slideLimits_ != null) hash ^= SlideLimits.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (rotationAxisVector_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(RotationAxisVector);
//       }
//       if (RotationValue != 0D) {
//         output.WriteRawTag(17);
//         output.WriteDouble(RotationValue);
//       }
//       if (rotationLimits_ != null) {
//         output.WriteRawTag(26);
//         output.WriteMessage(RotationLimits);
//       }
//       if (slideDirectionVector_ != null) {
//         output.WriteRawTag(34);
//         output.WriteMessage(SlideDirectionVector);
//       }
//       if (SlideValue != 0D) {
//         output.WriteRawTag(41);
//         output.WriteDouble(SlideValue);
//       }
//       if (slideLimits_ != null) {
//         output.WriteRawTag(50);
//         output.WriteMessage(SlideLimits);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (rotationAxisVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationAxisVector);
//       }
//       if (RotationValue != 0D) {
//         size += 1 + 8;
//       }
//       if (rotationLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationLimits);
//       }
//       if (slideDirectionVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideDirectionVector);
//       }
//       if (SlideValue != 0D) {
//         size += 1 + 8;
//       }
//       if (slideLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlideLimits);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(PinSlotJointMotion other) {
//       if (other == null) {
//         return;
//       }
//       if (other.rotationAxisVector_ != null) {
//         if (rotationAxisVector_ == null) {
//           RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         RotationAxisVector.MergeFrom(other.RotationAxisVector);
//       }
//       if (other.RotationValue != 0D) {
//         RotationValue = other.RotationValue;
//       }
//       if (other.rotationLimits_ != null) {
//         if (rotationLimits_ == null) {
//           RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         RotationLimits.MergeFrom(other.RotationLimits);
//       }
//       if (other.slideDirectionVector_ != null) {
//         if (slideDirectionVector_ == null) {
//           SlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         SlideDirectionVector.MergeFrom(other.SlideDirectionVector);
//       }
//       if (other.SlideValue != 0D) {
//         SlideValue = other.SlideValue;
//       }
//       if (other.slideLimits_ != null) {
//         if (slideLimits_ == null) {
//           SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         SlideLimits.MergeFrom(other.SlideLimits);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (rotationAxisVector_ == null) {
//               RotationAxisVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(RotationAxisVector);
//             break;
//           }
//           case 17: {
//             RotationValue = input.ReadDouble();
//             break;
//           }
//           case 26: {
//             if (rotationLimits_ == null) {
//               RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(RotationLimits);
//             break;
//           }
//           case 34: {
//             if (slideDirectionVector_ == null) {
//               SlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(SlideDirectionVector);
//             break;
//           }
//           case 41: {
//             SlideValue = input.ReadDouble();
//             break;
//           }
//           case 50: {
//             if (slideLimits_ == null) {
//               SlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(SlideLimits);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class PlanarJointMotion : pb::IMessage<PlanarJointMotion> {
//     private static readonly pb::MessageParser<PlanarJointMotion> _parser = new pb::MessageParser<PlanarJointMotion>(() => new PlanarJointMotion());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<PlanarJointMotion> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[15]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public PlanarJointMotion() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public PlanarJointMotion(PlanarJointMotion other) : this() {
//       normalDirectionVector_ = other.normalDirectionVector_ != null ? other.normalDirectionVector_.Clone() : null;
//       primarySlideDirectionVector_ = other.primarySlideDirectionVector_ != null ? other.primarySlideDirectionVector_.Clone() : null;
//       primarySlideValue_ = other.primarySlideValue_;
//       primarySlideLimits_ = other.primarySlideLimits_ != null ? other.primarySlideLimits_.Clone() : null;
//       secondarySlideDirectionVector_ = other.secondarySlideDirectionVector_ != null ? other.secondarySlideDirectionVector_.Clone() : null;
//       secondarySlideValue_ = other.secondarySlideValue_;
//       secondarySlideLimits_ = other.secondarySlideLimits_ != null ? other.secondarySlideLimits_.Clone() : null;
//       rotationValue_ = other.rotationValue_;
//       rotationLimits_ = other.rotationLimits_ != null ? other.rotationLimits_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public PlanarJointMotion Clone() {
//       return new PlanarJointMotion(this);
//     }
//
//     /// <summary>Field number for the "normalDirectionVector" field.</summary>
//     public const int NormalDirectionVectorFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Vector3D normalDirectionVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D NormalDirectionVector {
//       get { return normalDirectionVector_; }
//       set {
//         normalDirectionVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "primarySlideDirectionVector" field.</summary>
//     public const int PrimarySlideDirectionVectorFieldNumber = 2;
//     private global::Synthesis.Gltfextras.Vector3D primarySlideDirectionVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D PrimarySlideDirectionVector {
//       get { return primarySlideDirectionVector_; }
//       set {
//         primarySlideDirectionVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "primarySlideValue" field.</summary>
//     public const int PrimarySlideValueFieldNumber = 3;
//     private double primarySlideValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double PrimarySlideValue {
//       get { return primarySlideValue_; }
//       set {
//         primarySlideValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "primarySlideLimits" field.</summary>
//     public const int PrimarySlideLimitsFieldNumber = 4;
//     private global::Synthesis.Gltfextras.JointLimits primarySlideLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits PrimarySlideLimits {
//       get { return primarySlideLimits_; }
//       set {
//         primarySlideLimits_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "secondarySlideDirectionVector" field.</summary>
//     public const int SecondarySlideDirectionVectorFieldNumber = 5;
//     private global::Synthesis.Gltfextras.Vector3D secondarySlideDirectionVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D SecondarySlideDirectionVector {
//       get { return secondarySlideDirectionVector_; }
//       set {
//         secondarySlideDirectionVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "secondarySlideValue" field.</summary>
//     public const int SecondarySlideValueFieldNumber = 6;
//     private double secondarySlideValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double SecondarySlideValue {
//       get { return secondarySlideValue_; }
//       set {
//         secondarySlideValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "secondarySlideLimits" field.</summary>
//     public const int SecondarySlideLimitsFieldNumber = 7;
//     private global::Synthesis.Gltfextras.JointLimits secondarySlideLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits SecondarySlideLimits {
//       get { return secondarySlideLimits_; }
//       set {
//         secondarySlideLimits_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rotationValue" field.</summary>
//     public const int RotationValueFieldNumber = 8;
//     private double rotationValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double RotationValue {
//       get { return rotationValue_; }
//       set {
//         rotationValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rotationLimits" field.</summary>
//     public const int RotationLimitsFieldNumber = 9;
//     private global::Synthesis.Gltfextras.JointLimits rotationLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits RotationLimits {
//       get { return rotationLimits_; }
//       set {
//         rotationLimits_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as PlanarJointMotion);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(PlanarJointMotion other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(NormalDirectionVector, other.NormalDirectionVector)) return false;
//       if (!object.Equals(PrimarySlideDirectionVector, other.PrimarySlideDirectionVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PrimarySlideValue, other.PrimarySlideValue)) return false;
//       if (!object.Equals(PrimarySlideLimits, other.PrimarySlideLimits)) return false;
//       if (!object.Equals(SecondarySlideDirectionVector, other.SecondarySlideDirectionVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SecondarySlideValue, other.SecondarySlideValue)) return false;
//       if (!object.Equals(SecondarySlideLimits, other.SecondarySlideLimits)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RotationValue, other.RotationValue)) return false;
//       if (!object.Equals(RotationLimits, other.RotationLimits)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (normalDirectionVector_ != null) hash ^= NormalDirectionVector.GetHashCode();
//       if (primarySlideDirectionVector_ != null) hash ^= PrimarySlideDirectionVector.GetHashCode();
//       if (PrimarySlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PrimarySlideValue);
//       if (primarySlideLimits_ != null) hash ^= PrimarySlideLimits.GetHashCode();
//       if (secondarySlideDirectionVector_ != null) hash ^= SecondarySlideDirectionVector.GetHashCode();
//       if (SecondarySlideValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SecondarySlideValue);
//       if (secondarySlideLimits_ != null) hash ^= SecondarySlideLimits.GetHashCode();
//       if (RotationValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RotationValue);
//       if (rotationLimits_ != null) hash ^= RotationLimits.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (normalDirectionVector_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(NormalDirectionVector);
//       }
//       if (primarySlideDirectionVector_ != null) {
//         output.WriteRawTag(18);
//         output.WriteMessage(PrimarySlideDirectionVector);
//       }
//       if (PrimarySlideValue != 0D) {
//         output.WriteRawTag(25);
//         output.WriteDouble(PrimarySlideValue);
//       }
//       if (primarySlideLimits_ != null) {
//         output.WriteRawTag(34);
//         output.WriteMessage(PrimarySlideLimits);
//       }
//       if (secondarySlideDirectionVector_ != null) {
//         output.WriteRawTag(42);
//         output.WriteMessage(SecondarySlideDirectionVector);
//       }
//       if (SecondarySlideValue != 0D) {
//         output.WriteRawTag(49);
//         output.WriteDouble(SecondarySlideValue);
//       }
//       if (secondarySlideLimits_ != null) {
//         output.WriteRawTag(58);
//         output.WriteMessage(SecondarySlideLimits);
//       }
//       if (RotationValue != 0D) {
//         output.WriteRawTag(65);
//         output.WriteDouble(RotationValue);
//       }
//       if (rotationLimits_ != null) {
//         output.WriteRawTag(74);
//         output.WriteMessage(RotationLimits);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (normalDirectionVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalDirectionVector);
//       }
//       if (primarySlideDirectionVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimarySlideDirectionVector);
//       }
//       if (PrimarySlideValue != 0D) {
//         size += 1 + 8;
//       }
//       if (primarySlideLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimarySlideLimits);
//       }
//       if (secondarySlideDirectionVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondarySlideDirectionVector);
//       }
//       if (SecondarySlideValue != 0D) {
//         size += 1 + 8;
//       }
//       if (secondarySlideLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecondarySlideLimits);
//       }
//       if (RotationValue != 0D) {
//         size += 1 + 8;
//       }
//       if (rotationLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RotationLimits);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(PlanarJointMotion other) {
//       if (other == null) {
//         return;
//       }
//       if (other.normalDirectionVector_ != null) {
//         if (normalDirectionVector_ == null) {
//           NormalDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         NormalDirectionVector.MergeFrom(other.NormalDirectionVector);
//       }
//       if (other.primarySlideDirectionVector_ != null) {
//         if (primarySlideDirectionVector_ == null) {
//           PrimarySlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         PrimarySlideDirectionVector.MergeFrom(other.PrimarySlideDirectionVector);
//       }
//       if (other.PrimarySlideValue != 0D) {
//         PrimarySlideValue = other.PrimarySlideValue;
//       }
//       if (other.primarySlideLimits_ != null) {
//         if (primarySlideLimits_ == null) {
//           PrimarySlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         PrimarySlideLimits.MergeFrom(other.PrimarySlideLimits);
//       }
//       if (other.secondarySlideDirectionVector_ != null) {
//         if (secondarySlideDirectionVector_ == null) {
//           SecondarySlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         SecondarySlideDirectionVector.MergeFrom(other.SecondarySlideDirectionVector);
//       }
//       if (other.SecondarySlideValue != 0D) {
//         SecondarySlideValue = other.SecondarySlideValue;
//       }
//       if (other.secondarySlideLimits_ != null) {
//         if (secondarySlideLimits_ == null) {
//           SecondarySlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         SecondarySlideLimits.MergeFrom(other.SecondarySlideLimits);
//       }
//       if (other.RotationValue != 0D) {
//         RotationValue = other.RotationValue;
//       }
//       if (other.rotationLimits_ != null) {
//         if (rotationLimits_ == null) {
//           RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         RotationLimits.MergeFrom(other.RotationLimits);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (normalDirectionVector_ == null) {
//               NormalDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(NormalDirectionVector);
//             break;
//           }
//           case 18: {
//             if (primarySlideDirectionVector_ == null) {
//               PrimarySlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(PrimarySlideDirectionVector);
//             break;
//           }
//           case 25: {
//             PrimarySlideValue = input.ReadDouble();
//             break;
//           }
//           case 34: {
//             if (primarySlideLimits_ == null) {
//               PrimarySlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(PrimarySlideLimits);
//             break;
//           }
//           case 42: {
//             if (secondarySlideDirectionVector_ == null) {
//               SecondarySlideDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(SecondarySlideDirectionVector);
//             break;
//           }
//           case 49: {
//             SecondarySlideValue = input.ReadDouble();
//             break;
//           }
//           case 58: {
//             if (secondarySlideLimits_ == null) {
//               SecondarySlideLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(SecondarySlideLimits);
//             break;
//           }
//           case 65: {
//             RotationValue = input.ReadDouble();
//             break;
//           }
//           case 74: {
//             if (rotationLimits_ == null) {
//               RotationLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(RotationLimits);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class BallJointMotion : pb::IMessage<BallJointMotion> {
//     private static readonly pb::MessageParser<BallJointMotion> _parser = new pb::MessageParser<BallJointMotion>(() => new BallJointMotion());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<BallJointMotion> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[16]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public BallJointMotion() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public BallJointMotion(BallJointMotion other) : this() {
//       rollDirectionVector_ = other.rollDirectionVector_ != null ? other.rollDirectionVector_.Clone() : null;
//       rollValue_ = other.rollValue_;
//       rollLimits_ = other.rollLimits_ != null ? other.rollLimits_.Clone() : null;
//       pitchDirectionVector_ = other.pitchDirectionVector_ != null ? other.pitchDirectionVector_.Clone() : null;
//       pitchValue_ = other.pitchValue_;
//       pitchLimits_ = other.pitchLimits_ != null ? other.pitchLimits_.Clone() : null;
//       yawDirectionVector_ = other.yawDirectionVector_ != null ? other.yawDirectionVector_.Clone() : null;
//       yawValue_ = other.yawValue_;
//       yawLimits_ = other.yawLimits_ != null ? other.yawLimits_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public BallJointMotion Clone() {
//       return new BallJointMotion(this);
//     }
//
//     /// <summary>Field number for the "rollDirectionVector" field.</summary>
//     public const int RollDirectionVectorFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Vector3D rollDirectionVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D RollDirectionVector {
//       get { return rollDirectionVector_; }
//       set {
//         rollDirectionVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rollValue" field.</summary>
//     public const int RollValueFieldNumber = 2;
//     private double rollValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double RollValue {
//       get { return rollValue_; }
//       set {
//         rollValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "rollLimits" field.</summary>
//     public const int RollLimitsFieldNumber = 3;
//     private global::Synthesis.Gltfextras.JointLimits rollLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits RollLimits {
//       get { return rollLimits_; }
//       set {
//         rollLimits_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "pitchDirectionVector" field.</summary>
//     public const int PitchDirectionVectorFieldNumber = 4;
//     private global::Synthesis.Gltfextras.Vector3D pitchDirectionVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D PitchDirectionVector {
//       get { return pitchDirectionVector_; }
//       set {
//         pitchDirectionVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "pitchValue" field.</summary>
//     public const int PitchValueFieldNumber = 5;
//     private double pitchValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double PitchValue {
//       get { return pitchValue_; }
//       set {
//         pitchValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "pitchLimits" field.</summary>
//     public const int PitchLimitsFieldNumber = 6;
//     private global::Synthesis.Gltfextras.JointLimits pitchLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits PitchLimits {
//       get { return pitchLimits_; }
//       set {
//         pitchLimits_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "yawDirectionVector" field.</summary>
//     public const int YawDirectionVectorFieldNumber = 7;
//     private global::Synthesis.Gltfextras.Vector3D yawDirectionVector_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D YawDirectionVector {
//       get { return yawDirectionVector_; }
//       set {
//         yawDirectionVector_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "yawValue" field.</summary>
//     public const int YawValueFieldNumber = 8;
//     private double yawValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double YawValue {
//       get { return yawValue_; }
//       set {
//         yawValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "yawLimits" field.</summary>
//     public const int YawLimitsFieldNumber = 9;
//     private global::Synthesis.Gltfextras.JointLimits yawLimits_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.JointLimits YawLimits {
//       get { return yawLimits_; }
//       set {
//         yawLimits_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as BallJointMotion);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(BallJointMotion other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(RollDirectionVector, other.RollDirectionVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RollValue, other.RollValue)) return false;
//       if (!object.Equals(RollLimits, other.RollLimits)) return false;
//       if (!object.Equals(PitchDirectionVector, other.PitchDirectionVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PitchValue, other.PitchValue)) return false;
//       if (!object.Equals(PitchLimits, other.PitchLimits)) return false;
//       if (!object.Equals(YawDirectionVector, other.YawDirectionVector)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YawValue, other.YawValue)) return false;
//       if (!object.Equals(YawLimits, other.YawLimits)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (rollDirectionVector_ != null) hash ^= RollDirectionVector.GetHashCode();
//       if (RollValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RollValue);
//       if (rollLimits_ != null) hash ^= RollLimits.GetHashCode();
//       if (pitchDirectionVector_ != null) hash ^= PitchDirectionVector.GetHashCode();
//       if (PitchValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PitchValue);
//       if (pitchLimits_ != null) hash ^= PitchLimits.GetHashCode();
//       if (yawDirectionVector_ != null) hash ^= YawDirectionVector.GetHashCode();
//       if (YawValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YawValue);
//       if (yawLimits_ != null) hash ^= YawLimits.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (rollDirectionVector_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(RollDirectionVector);
//       }
//       if (RollValue != 0D) {
//         output.WriteRawTag(17);
//         output.WriteDouble(RollValue);
//       }
//       if (rollLimits_ != null) {
//         output.WriteRawTag(26);
//         output.WriteMessage(RollLimits);
//       }
//       if (pitchDirectionVector_ != null) {
//         output.WriteRawTag(34);
//         output.WriteMessage(PitchDirectionVector);
//       }
//       if (PitchValue != 0D) {
//         output.WriteRawTag(41);
//         output.WriteDouble(PitchValue);
//       }
//       if (pitchLimits_ != null) {
//         output.WriteRawTag(50);
//         output.WriteMessage(PitchLimits);
//       }
//       if (yawDirectionVector_ != null) {
//         output.WriteRawTag(58);
//         output.WriteMessage(YawDirectionVector);
//       }
//       if (YawValue != 0D) {
//         output.WriteRawTag(65);
//         output.WriteDouble(YawValue);
//       }
//       if (yawLimits_ != null) {
//         output.WriteRawTag(74);
//         output.WriteMessage(YawLimits);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (rollDirectionVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RollDirectionVector);
//       }
//       if (RollValue != 0D) {
//         size += 1 + 8;
//       }
//       if (rollLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(RollLimits);
//       }
//       if (pitchDirectionVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(PitchDirectionVector);
//       }
//       if (PitchValue != 0D) {
//         size += 1 + 8;
//       }
//       if (pitchLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(PitchLimits);
//       }
//       if (yawDirectionVector_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(YawDirectionVector);
//       }
//       if (YawValue != 0D) {
//         size += 1 + 8;
//       }
//       if (yawLimits_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(YawLimits);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(BallJointMotion other) {
//       if (other == null) {
//         return;
//       }
//       if (other.rollDirectionVector_ != null) {
//         if (rollDirectionVector_ == null) {
//           RollDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         RollDirectionVector.MergeFrom(other.RollDirectionVector);
//       }
//       if (other.RollValue != 0D) {
//         RollValue = other.RollValue;
//       }
//       if (other.rollLimits_ != null) {
//         if (rollLimits_ == null) {
//           RollLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         RollLimits.MergeFrom(other.RollLimits);
//       }
//       if (other.pitchDirectionVector_ != null) {
//         if (pitchDirectionVector_ == null) {
//           PitchDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         PitchDirectionVector.MergeFrom(other.PitchDirectionVector);
//       }
//       if (other.PitchValue != 0D) {
//         PitchValue = other.PitchValue;
//       }
//       if (other.pitchLimits_ != null) {
//         if (pitchLimits_ == null) {
//           PitchLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         PitchLimits.MergeFrom(other.PitchLimits);
//       }
//       if (other.yawDirectionVector_ != null) {
//         if (yawDirectionVector_ == null) {
//           YawDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         YawDirectionVector.MergeFrom(other.YawDirectionVector);
//       }
//       if (other.YawValue != 0D) {
//         YawValue = other.YawValue;
//       }
//       if (other.yawLimits_ != null) {
//         if (yawLimits_ == null) {
//           YawLimits = new global::Synthesis.Gltfextras.JointLimits();
//         }
//         YawLimits.MergeFrom(other.YawLimits);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (rollDirectionVector_ == null) {
//               RollDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(RollDirectionVector);
//             break;
//           }
//           case 17: {
//             RollValue = input.ReadDouble();
//             break;
//           }
//           case 26: {
//             if (rollLimits_ == null) {
//               RollLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(RollLimits);
//             break;
//           }
//           case 34: {
//             if (pitchDirectionVector_ == null) {
//               PitchDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(PitchDirectionVector);
//             break;
//           }
//           case 41: {
//             PitchValue = input.ReadDouble();
//             break;
//           }
//           case 50: {
//             if (pitchLimits_ == null) {
//               PitchLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(PitchLimits);
//             break;
//           }
//           case 58: {
//             if (yawDirectionVector_ == null) {
//               YawDirectionVector = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(YawDirectionVector);
//             break;
//           }
//           case 65: {
//             YawValue = input.ReadDouble();
//             break;
//           }
//           case 74: {
//             if (yawLimits_ == null) {
//               YawLimits = new global::Synthesis.Gltfextras.JointLimits();
//             }
//             input.ReadMessage(YawLimits);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class JointLimits : pb::IMessage<JointLimits> {
//     private static readonly pb::MessageParser<JointLimits> _parser = new pb::MessageParser<JointLimits>(() => new JointLimits());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<JointLimits> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[17]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public JointLimits() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public JointLimits(JointLimits other) : this() {
//       isMaximumValueEnabled_ = other.isMaximumValueEnabled_;
//       isMinimumValueEnabled_ = other.isMinimumValueEnabled_;
//       isRestValueEnabled_ = other.isRestValueEnabled_;
//       maximumValue_ = other.maximumValue_;
//       minimumValue_ = other.minimumValue_;
//       restValue_ = other.restValue_;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public JointLimits Clone() {
//       return new JointLimits(this);
//     }
//
//     /// <summary>Field number for the "isMaximumValueEnabled" field.</summary>
//     public const int IsMaximumValueEnabledFieldNumber = 1;
//     private bool isMaximumValueEnabled_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool IsMaximumValueEnabled {
//       get { return isMaximumValueEnabled_; }
//       set {
//         isMaximumValueEnabled_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "isMinimumValueEnabled" field.</summary>
//     public const int IsMinimumValueEnabledFieldNumber = 2;
//     private bool isMinimumValueEnabled_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool IsMinimumValueEnabled {
//       get { return isMinimumValueEnabled_; }
//       set {
//         isMinimumValueEnabled_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "isRestValueEnabled" field.</summary>
//     public const int IsRestValueEnabledFieldNumber = 3;
//     private bool isRestValueEnabled_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool IsRestValueEnabled {
//       get { return isRestValueEnabled_; }
//       set {
//         isRestValueEnabled_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "maximumValue" field.</summary>
//     public const int MaximumValueFieldNumber = 4;
//     private double maximumValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double MaximumValue {
//       get { return maximumValue_; }
//       set {
//         maximumValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "minimumValue" field.</summary>
//     public const int MinimumValueFieldNumber = 5;
//     private double minimumValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double MinimumValue {
//       get { return minimumValue_; }
//       set {
//         minimumValue_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "restValue" field.</summary>
//     public const int RestValueFieldNumber = 6;
//     private double restValue_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double RestValue {
//       get { return restValue_; }
//       set {
//         restValue_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as JointLimits);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(JointLimits other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (IsMaximumValueEnabled != other.IsMaximumValueEnabled) return false;
//       if (IsMinimumValueEnabled != other.IsMinimumValueEnabled) return false;
//       if (IsRestValueEnabled != other.IsRestValueEnabled) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaximumValue, other.MaximumValue)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinimumValue, other.MinimumValue)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RestValue, other.RestValue)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (IsMaximumValueEnabled != false) hash ^= IsMaximumValueEnabled.GetHashCode();
//       if (IsMinimumValueEnabled != false) hash ^= IsMinimumValueEnabled.GetHashCode();
//       if (IsRestValueEnabled != false) hash ^= IsRestValueEnabled.GetHashCode();
//       if (MaximumValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaximumValue);
//       if (MinimumValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinimumValue);
//       if (RestValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RestValue);
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (IsMaximumValueEnabled != false) {
//         output.WriteRawTag(8);
//         output.WriteBool(IsMaximumValueEnabled);
//       }
//       if (IsMinimumValueEnabled != false) {
//         output.WriteRawTag(16);
//         output.WriteBool(IsMinimumValueEnabled);
//       }
//       if (IsRestValueEnabled != false) {
//         output.WriteRawTag(24);
//         output.WriteBool(IsRestValueEnabled);
//       }
//       if (MaximumValue != 0D) {
//         output.WriteRawTag(33);
//         output.WriteDouble(MaximumValue);
//       }
//       if (MinimumValue != 0D) {
//         output.WriteRawTag(41);
//         output.WriteDouble(MinimumValue);
//       }
//       if (RestValue != 0D) {
//         output.WriteRawTag(49);
//         output.WriteDouble(RestValue);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (IsMaximumValueEnabled != false) {
//         size += 1 + 1;
//       }
//       if (IsMinimumValueEnabled != false) {
//         size += 1 + 1;
//       }
//       if (IsRestValueEnabled != false) {
//         size += 1 + 1;
//       }
//       if (MaximumValue != 0D) {
//         size += 1 + 8;
//       }
//       if (MinimumValue != 0D) {
//         size += 1 + 8;
//       }
//       if (RestValue != 0D) {
//         size += 1 + 8;
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(JointLimits other) {
//       if (other == null) {
//         return;
//       }
//       if (other.IsMaximumValueEnabled != false) {
//         IsMaximumValueEnabled = other.IsMaximumValueEnabled;
//       }
//       if (other.IsMinimumValueEnabled != false) {
//         IsMinimumValueEnabled = other.IsMinimumValueEnabled;
//       }
//       if (other.IsRestValueEnabled != false) {
//         IsRestValueEnabled = other.IsRestValueEnabled;
//       }
//       if (other.MaximumValue != 0D) {
//         MaximumValue = other.MaximumValue;
//       }
//       if (other.MinimumValue != 0D) {
//         MinimumValue = other.MinimumValue;
//       }
//       if (other.RestValue != 0D) {
//         RestValue = other.RestValue;
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 8: {
//             IsMaximumValueEnabled = input.ReadBool();
//             break;
//           }
//           case 16: {
//             IsMinimumValueEnabled = input.ReadBool();
//             break;
//           }
//           case 24: {
//             IsRestValueEnabled = input.ReadBool();
//             break;
//           }
//           case 33: {
//             MaximumValue = input.ReadDouble();
//             break;
//           }
//           case 41: {
//             MinimumValue = input.ReadDouble();
//             break;
//           }
//           case 49: {
//             RestValue = input.ReadDouble();
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class Material : pb::IMessage<Material> {
//     private static readonly pb::MessageParser<Material> _parser = new pb::MessageParser<Material>(() => new Material());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Material> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[18]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Material() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Material(Material other) : this() {
//       id_ = other.id_;
//       name_ = other.name_;
//       appearanceId_ = other.appearanceId_;
//       properties_ = other.properties_ != null ? other.properties_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Material Clone() {
//       return new Material(this);
//     }
//
//     /// <summary>Field number for the "id" field.</summary>
//     public const int IdFieldNumber = 1;
//     private string id_ = "";
//     /// <summary>
//     /// unique id, ex. "MaterialInv_072"
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Id {
//       get { return id_; }
//       set {
//         id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "name" field.</summary>
//     public const int NameFieldNumber = 2;
//     private string name_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Name {
//       get { return name_; }
//       set {
//         name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "appearanceId" field.</summary>
//     public const int AppearanceIdFieldNumber = 3;
//     private string appearanceId_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string AppearanceId {
//       get { return appearanceId_; }
//       set {
//         appearanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "properties" field.</summary>
//     public const int PropertiesFieldNumber = 4;
//     private global::Synthesis.Gltfextras.MaterialProperties properties_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.MaterialProperties Properties {
//       get { return properties_; }
//       set {
//         properties_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Material);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Material other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (Id != other.Id) return false;
//       if (Name != other.Name) return false;
//       if (AppearanceId != other.AppearanceId) return false;
//       if (!object.Equals(Properties, other.Properties)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (Id.Length != 0) hash ^= Id.GetHashCode();
//       if (Name.Length != 0) hash ^= Name.GetHashCode();
//       if (AppearanceId.Length != 0) hash ^= AppearanceId.GetHashCode();
//       if (properties_ != null) hash ^= Properties.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (Id.Length != 0) {
//         output.WriteRawTag(10);
//         output.WriteString(Id);
//       }
//       if (Name.Length != 0) {
//         output.WriteRawTag(18);
//         output.WriteString(Name);
//       }
//       if (AppearanceId.Length != 0) {
//         output.WriteRawTag(26);
//         output.WriteString(AppearanceId);
//       }
//       if (properties_ != null) {
//         output.WriteRawTag(34);
//         output.WriteMessage(Properties);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (Id.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
//       }
//       if (Name.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
//       }
//       if (AppearanceId.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(AppearanceId);
//       }
//       if (properties_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Material other) {
//       if (other == null) {
//         return;
//       }
//       if (other.Id.Length != 0) {
//         Id = other.Id;
//       }
//       if (other.Name.Length != 0) {
//         Name = other.Name;
//       }
//       if (other.AppearanceId.Length != 0) {
//         AppearanceId = other.AppearanceId;
//       }
//       if (other.properties_ != null) {
//         if (properties_ == null) {
//           Properties = new global::Synthesis.Gltfextras.MaterialProperties();
//         }
//         Properties.MergeFrom(other.Properties);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             Id = input.ReadString();
//             break;
//           }
//           case 18: {
//             Name = input.ReadString();
//             break;
//           }
//           case 26: {
//             AppearanceId = input.ReadString();
//             break;
//           }
//           case 34: {
//             if (properties_ == null) {
//               Properties = new global::Synthesis.Gltfextras.MaterialProperties();
//             }
//             input.ReadMessage(Properties);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   /// <summary>
//   /// todo: support for other mechanical/thermal properties
//   /// </summary>
//   public sealed partial class MaterialProperties : pb::IMessage<MaterialProperties> {
//     private static readonly pb::MessageParser<MaterialProperties> _parser = new pb::MessageParser<MaterialProperties>(() => new MaterialProperties());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<MaterialProperties> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[19]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public MaterialProperties() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public MaterialProperties(MaterialProperties other) : this() {
//       density_ = other.density_;
//       yieldStrength_ = other.yieldStrength_;
//       tensileStrength_ = other.tensileStrength_;
//       attributes_ = other.attributes_.Clone();
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public MaterialProperties Clone() {
//       return new MaterialProperties(this);
//     }
//
//     /// <summary>Field number for the "density" field.</summary>
//     public const int DensityFieldNumber = 1;
//     private int density_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int Density {
//       get { return density_; }
//       set {
//         density_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "yieldStrength" field.</summary>
//     public const int YieldStrengthFieldNumber = 2;
//     private int yieldStrength_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int YieldStrength {
//       get { return yieldStrength_; }
//       set {
//         yieldStrength_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "tensileStrength" field.</summary>
//     public const int TensileStrengthFieldNumber = 3;
//     private int tensileStrength_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int TensileStrength {
//       get { return tensileStrength_; }
//       set {
//         tensileStrength_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "attributes" field.</summary>
//     public const int AttributesFieldNumber = 4;
//     private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_attributes_codec
//         = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 34);
//     private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> attributes_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Attributes {
//       get { return attributes_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as MaterialProperties);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(MaterialProperties other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (Density != other.Density) return false;
//       if (YieldStrength != other.YieldStrength) return false;
//       if (TensileStrength != other.TensileStrength) return false;
//       if (!Attributes.Equals(other.Attributes)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (Density != 0) hash ^= Density.GetHashCode();
//       if (YieldStrength != 0) hash ^= YieldStrength.GetHashCode();
//       if (TensileStrength != 0) hash ^= TensileStrength.GetHashCode();
//       hash ^= Attributes.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (Density != 0) {
//         output.WriteRawTag(8);
//         output.WriteInt32(Density);
//       }
//       if (YieldStrength != 0) {
//         output.WriteRawTag(16);
//         output.WriteInt32(YieldStrength);
//       }
//       if (TensileStrength != 0) {
//         output.WriteRawTag(24);
//         output.WriteInt32(TensileStrength);
//       }
//       attributes_.WriteTo(output, _map_attributes_codec);
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (Density != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(Density);
//       }
//       if (YieldStrength != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(YieldStrength);
//       }
//       if (TensileStrength != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(TensileStrength);
//       }
//       size += attributes_.CalculateSize(_map_attributes_codec);
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(MaterialProperties other) {
//       if (other == null) {
//         return;
//       }
//       if (other.Density != 0) {
//         Density = other.Density;
//       }
//       if (other.YieldStrength != 0) {
//         YieldStrength = other.YieldStrength;
//       }
//       if (other.TensileStrength != 0) {
//         TensileStrength = other.TensileStrength;
//       }
//       attributes_.Add(other.attributes_);
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 8: {
//             Density = input.ReadInt32();
//             break;
//           }
//           case 16: {
//             YieldStrength = input.ReadInt32();
//             break;
//           }
//           case 24: {
//             TensileStrength = input.ReadInt32();
//             break;
//           }
//           case 34: {
//             attributes_.AddEntriesFrom(input, _map_attributes_codec);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class Appearance : pb::IMessage<Appearance> {
//     private static readonly pb::MessageParser<Appearance> _parser = new pb::MessageParser<Appearance>(() => new Appearance());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Appearance> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[20]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Appearance() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Appearance(Appearance other) : this() {
//       id_ = other.id_;
//       name_ = other.name_;
//       hasTexture_ = other.hasTexture_;
//       properties_ = other.properties_ != null ? other.properties_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Appearance Clone() {
//       return new Appearance(this);
//     }
//
//     /// <summary>Field number for the "id" field.</summary>
//     public const int IdFieldNumber = 1;
//     private string id_ = "";
//     /// <summary>
//     /// unique id, ex. "PrismMaterial-079_physmat_aspects:Prism-121"
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Id {
//       get { return id_; }
//       set {
//         id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "name" field.</summary>
//     public const int NameFieldNumber = 2;
//     private string name_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Name {
//       get { return name_; }
//       set {
//         name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "hasTexture" field.</summary>
//     public const int HasTextureFieldNumber = 3;
//     private bool hasTexture_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool HasTexture {
//       get { return hasTexture_; }
//       set {
//         hasTexture_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "properties" field.</summary>
//     public const int PropertiesFieldNumber = 4;
//     private global::Synthesis.Gltfextras.AppearanceProperties properties_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.AppearanceProperties Properties {
//       get { return properties_; }
//       set {
//         properties_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Appearance);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Appearance other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (Id != other.Id) return false;
//       if (Name != other.Name) return false;
//       if (HasTexture != other.HasTexture) return false;
//       if (!object.Equals(Properties, other.Properties)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (Id.Length != 0) hash ^= Id.GetHashCode();
//       if (Name.Length != 0) hash ^= Name.GetHashCode();
//       if (HasTexture != false) hash ^= HasTexture.GetHashCode();
//       if (properties_ != null) hash ^= Properties.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (Id.Length != 0) {
//         output.WriteRawTag(10);
//         output.WriteString(Id);
//       }
//       if (Name.Length != 0) {
//         output.WriteRawTag(18);
//         output.WriteString(Name);
//       }
//       if (HasTexture != false) {
//         output.WriteRawTag(24);
//         output.WriteBool(HasTexture);
//       }
//       if (properties_ != null) {
//         output.WriteRawTag(34);
//         output.WriteMessage(Properties);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (Id.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
//       }
//       if (Name.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
//       }
//       if (HasTexture != false) {
//         size += 1 + 1;
//       }
//       if (properties_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Appearance other) {
//       if (other == null) {
//         return;
//       }
//       if (other.Id.Length != 0) {
//         Id = other.Id;
//       }
//       if (other.Name.Length != 0) {
//         Name = other.Name;
//       }
//       if (other.HasTexture != false) {
//         HasTexture = other.HasTexture;
//       }
//       if (other.properties_ != null) {
//         if (properties_ == null) {
//           Properties = new global::Synthesis.Gltfextras.AppearanceProperties();
//         }
//         Properties.MergeFrom(other.Properties);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             Id = input.ReadString();
//             break;
//           }
//           case 18: {
//             Name = input.ReadString();
//             break;
//           }
//           case 24: {
//             HasTexture = input.ReadBool();
//             break;
//           }
//           case 34: {
//             if (properties_ == null) {
//               Properties = new global::Synthesis.Gltfextras.AppearanceProperties();
//             }
//             input.ReadMessage(Properties);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   /// <summary>
//   /// todo: support for textures/images, bump maps, etc.
//   /// </summary>
//   public sealed partial class AppearanceProperties : pb::IMessage<AppearanceProperties> {
//     private static readonly pb::MessageParser<AppearanceProperties> _parser = new pb::MessageParser<AppearanceProperties>(() => new AppearanceProperties());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<AppearanceProperties> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[21]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public AppearanceProperties() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public AppearanceProperties(AppearanceProperties other) : this() {
//       albedo_ = other.albedo_ != null ? other.albedo_.Clone() : null;
//       glossiness_ = other.glossiness_;
//       highlights_ = other.highlights_;
//       reflectivityDirect_ = other.reflectivityDirect_;
//       reflectivityOblique_ = other.reflectivityOblique_;
//       transparency_ = other.transparency_;
//       translucency_ = other.translucency_;
//       refractiveIndex_ = other.refractiveIndex_;
//       selfIlluminationColor_ = other.selfIlluminationColor_ != null ? other.selfIlluminationColor_.Clone() : null;
//       selfIlluminationLuminance_ = other.selfIlluminationLuminance_;
//       selfIlluminationColorTemp_ = other.selfIlluminationColorTemp_;
//       attributes_ = other.attributes_.Clone();
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public AppearanceProperties Clone() {
//       return new AppearanceProperties(this);
//     }
//
//     /// <summary>Field number for the "albedo" field.</summary>
//     public const int AlbedoFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Color albedo_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Color Albedo {
//       get { return albedo_; }
//       set {
//         albedo_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "glossiness" field.</summary>
//     public const int GlossinessFieldNumber = 2;
//     private int glossiness_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int Glossiness {
//       get { return glossiness_; }
//       set {
//         glossiness_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "highlights" field.</summary>
//     public const int HighlightsFieldNumber = 3;
//     private global::Synthesis.Gltfextras.AppearanceProperties.Types.HighlightsMode highlights_ = global::Synthesis.Gltfextras.AppearanceProperties.Types.HighlightsMode.Metallic;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.AppearanceProperties.Types.HighlightsMode Highlights {
//       get { return highlights_; }
//       set {
//         highlights_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "reflectivityDirect" field.</summary>
//     public const int ReflectivityDirectFieldNumber = 4;
//     private int reflectivityDirect_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int ReflectivityDirect {
//       get { return reflectivityDirect_; }
//       set {
//         reflectivityDirect_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "reflectivityOblique" field.</summary>
//     public const int ReflectivityObliqueFieldNumber = 5;
//     private int reflectivityOblique_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int ReflectivityOblique {
//       get { return reflectivityOblique_; }
//       set {
//         reflectivityOblique_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "transparency" field.</summary>
//     public const int TransparencyFieldNumber = 6;
//     private int transparency_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int Transparency {
//       get { return transparency_; }
//       set {
//         transparency_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "translucency" field.</summary>
//     public const int TranslucencyFieldNumber = 7;
//     private int translucency_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int Translucency {
//       get { return translucency_; }
//       set {
//         translucency_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "refractiveIndex" field.</summary>
//     public const int RefractiveIndexFieldNumber = 8;
//     private int refractiveIndex_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int RefractiveIndex {
//       get { return refractiveIndex_; }
//       set {
//         refractiveIndex_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "selfIlluminationColor" field.</summary>
//     public const int SelfIlluminationColorFieldNumber = 9;
//     private global::Synthesis.Gltfextras.Color selfIlluminationColor_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Color SelfIlluminationColor {
//       get { return selfIlluminationColor_; }
//       set {
//         selfIlluminationColor_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "selfIlluminationLuminance" field.</summary>
//     public const int SelfIlluminationLuminanceFieldNumber = 10;
//     private int selfIlluminationLuminance_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int SelfIlluminationLuminance {
//       get { return selfIlluminationLuminance_; }
//       set {
//         selfIlluminationLuminance_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "selfIlluminationColorTemp" field.</summary>
//     public const int SelfIlluminationColorTempFieldNumber = 11;
//     private int selfIlluminationColorTemp_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int SelfIlluminationColorTemp {
//       get { return selfIlluminationColorTemp_; }
//       set {
//         selfIlluminationColorTemp_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "attributes" field.</summary>
//     public const int AttributesFieldNumber = 12;
//     private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_attributes_codec
//         = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 98);
//     private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> attributes_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Attributes {
//       get { return attributes_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as AppearanceProperties);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(AppearanceProperties other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(Albedo, other.Albedo)) return false;
//       if (Glossiness != other.Glossiness) return false;
//       if (Highlights != other.Highlights) return false;
//       if (ReflectivityDirect != other.ReflectivityDirect) return false;
//       if (ReflectivityOblique != other.ReflectivityOblique) return false;
//       if (Transparency != other.Transparency) return false;
//       if (Translucency != other.Translucency) return false;
//       if (RefractiveIndex != other.RefractiveIndex) return false;
//       if (!object.Equals(SelfIlluminationColor, other.SelfIlluminationColor)) return false;
//       if (SelfIlluminationLuminance != other.SelfIlluminationLuminance) return false;
//       if (SelfIlluminationColorTemp != other.SelfIlluminationColorTemp) return false;
//       if (!Attributes.Equals(other.Attributes)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (albedo_ != null) hash ^= Albedo.GetHashCode();
//       if (Glossiness != 0) hash ^= Glossiness.GetHashCode();
//       if (Highlights != global::Synthesis.Gltfextras.AppearanceProperties.Types.HighlightsMode.Metallic) hash ^= Highlights.GetHashCode();
//       if (ReflectivityDirect != 0) hash ^= ReflectivityDirect.GetHashCode();
//       if (ReflectivityOblique != 0) hash ^= ReflectivityOblique.GetHashCode();
//       if (Transparency != 0) hash ^= Transparency.GetHashCode();
//       if (Translucency != 0) hash ^= Translucency.GetHashCode();
//       if (RefractiveIndex != 0) hash ^= RefractiveIndex.GetHashCode();
//       if (selfIlluminationColor_ != null) hash ^= SelfIlluminationColor.GetHashCode();
//       if (SelfIlluminationLuminance != 0) hash ^= SelfIlluminationLuminance.GetHashCode();
//       if (SelfIlluminationColorTemp != 0) hash ^= SelfIlluminationColorTemp.GetHashCode();
//       hash ^= Attributes.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (albedo_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(Albedo);
//       }
//       if (Glossiness != 0) {
//         output.WriteRawTag(16);
//         output.WriteInt32(Glossiness);
//       }
//       if (Highlights != global::Synthesis.Gltfextras.AppearanceProperties.Types.HighlightsMode.Metallic) {
//         output.WriteRawTag(24);
//         output.WriteEnum((int) Highlights);
//       }
//       if (ReflectivityDirect != 0) {
//         output.WriteRawTag(32);
//         output.WriteInt32(ReflectivityDirect);
//       }
//       if (ReflectivityOblique != 0) {
//         output.WriteRawTag(40);
//         output.WriteInt32(ReflectivityOblique);
//       }
//       if (Transparency != 0) {
//         output.WriteRawTag(48);
//         output.WriteInt32(Transparency);
//       }
//       if (Translucency != 0) {
//         output.WriteRawTag(56);
//         output.WriteInt32(Translucency);
//       }
//       if (RefractiveIndex != 0) {
//         output.WriteRawTag(64);
//         output.WriteInt32(RefractiveIndex);
//       }
//       if (selfIlluminationColor_ != null) {
//         output.WriteRawTag(74);
//         output.WriteMessage(SelfIlluminationColor);
//       }
//       if (SelfIlluminationLuminance != 0) {
//         output.WriteRawTag(80);
//         output.WriteInt32(SelfIlluminationLuminance);
//       }
//       if (SelfIlluminationColorTemp != 0) {
//         output.WriteRawTag(88);
//         output.WriteInt32(SelfIlluminationColorTemp);
//       }
//       attributes_.WriteTo(output, _map_attributes_codec);
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (albedo_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(Albedo);
//       }
//       if (Glossiness != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(Glossiness);
//       }
//       if (Highlights != global::Synthesis.Gltfextras.AppearanceProperties.Types.HighlightsMode.Metallic) {
//         size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Highlights);
//       }
//       if (ReflectivityDirect != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReflectivityDirect);
//       }
//       if (ReflectivityOblique != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReflectivityOblique);
//       }
//       if (Transparency != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(Transparency);
//       }
//       if (Translucency != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(Translucency);
//       }
//       if (RefractiveIndex != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefractiveIndex);
//       }
//       if (selfIlluminationColor_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfIlluminationColor);
//       }
//       if (SelfIlluminationLuminance != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfIlluminationLuminance);
//       }
//       if (SelfIlluminationColorTemp != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelfIlluminationColorTemp);
//       }
//       size += attributes_.CalculateSize(_map_attributes_codec);
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(AppearanceProperties other) {
//       if (other == null) {
//         return;
//       }
//       if (other.albedo_ != null) {
//         if (albedo_ == null) {
//           Albedo = new global::Synthesis.Gltfextras.Color();
//         }
//         Albedo.MergeFrom(other.Albedo);
//       }
//       if (other.Glossiness != 0) {
//         Glossiness = other.Glossiness;
//       }
//       if (other.Highlights != global::Synthesis.Gltfextras.AppearanceProperties.Types.HighlightsMode.Metallic) {
//         Highlights = other.Highlights;
//       }
//       if (other.ReflectivityDirect != 0) {
//         ReflectivityDirect = other.ReflectivityDirect;
//       }
//       if (other.ReflectivityOblique != 0) {
//         ReflectivityOblique = other.ReflectivityOblique;
//       }
//       if (other.Transparency != 0) {
//         Transparency = other.Transparency;
//       }
//       if (other.Translucency != 0) {
//         Translucency = other.Translucency;
//       }
//       if (other.RefractiveIndex != 0) {
//         RefractiveIndex = other.RefractiveIndex;
//       }
//       if (other.selfIlluminationColor_ != null) {
//         if (selfIlluminationColor_ == null) {
//           SelfIlluminationColor = new global::Synthesis.Gltfextras.Color();
//         }
//         SelfIlluminationColor.MergeFrom(other.SelfIlluminationColor);
//       }
//       if (other.SelfIlluminationLuminance != 0) {
//         SelfIlluminationLuminance = other.SelfIlluminationLuminance;
//       }
//       if (other.SelfIlluminationColorTemp != 0) {
//         SelfIlluminationColorTemp = other.SelfIlluminationColorTemp;
//       }
//       attributes_.Add(other.attributes_);
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (albedo_ == null) {
//               Albedo = new global::Synthesis.Gltfextras.Color();
//             }
//             input.ReadMessage(Albedo);
//             break;
//           }
//           case 16: {
//             Glossiness = input.ReadInt32();
//             break;
//           }
//           case 24: {
//             Highlights = (global::Synthesis.Gltfextras.AppearanceProperties.Types.HighlightsMode) input.ReadEnum();
//             break;
//           }
//           case 32: {
//             ReflectivityDirect = input.ReadInt32();
//             break;
//           }
//           case 40: {
//             ReflectivityOblique = input.ReadInt32();
//             break;
//           }
//           case 48: {
//             Transparency = input.ReadInt32();
//             break;
//           }
//           case 56: {
//             Translucency = input.ReadInt32();
//             break;
//           }
//           case 64: {
//             RefractiveIndex = input.ReadInt32();
//             break;
//           }
//           case 74: {
//             if (selfIlluminationColor_ == null) {
//               SelfIlluminationColor = new global::Synthesis.Gltfextras.Color();
//             }
//             input.ReadMessage(SelfIlluminationColor);
//             break;
//           }
//           case 80: {
//             SelfIlluminationLuminance = input.ReadInt32();
//             break;
//           }
//           case 88: {
//             SelfIlluminationColorTemp = input.ReadInt32();
//             break;
//           }
//           case 98: {
//             attributes_.AddEntriesFrom(input, _map_attributes_codec);
//             break;
//           }
//         }
//       }
//     }
//
//     #region Nested types
//     /// <summary>Container for nested types declared in the AppearanceProperties message type.</summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static partial class Types {
//       public enum HighlightsMode {
//         [pbr::OriginalName("METALLIC")] Metallic = 0,
//         [pbr::OriginalName("NON_METALLIC")] NonMetallic = 1,
//       }
//
//     }
//     #endregion
//
//   }
//
//   public sealed partial class Header : pb::IMessage<Header> {
//     private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Header> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[22]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Header() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Header(Header other) : this() {
//       uuid_ = other.uuid_;
//       name_ = other.name_;
//       description_ = other.description_;
//       revisionId_ = other.revisionId_;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Header Clone() {
//       return new Header(this);
//     }
//
//     /// <summary>Field number for the "uuid" field.</summary>
//     public const int UuidFieldNumber = 1;
//     private string uuid_ = "";
//     /// <summary>
//     /// generated with apper's item_id and persistant in fusion file
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Uuid {
//       get { return uuid_; }
//       set {
//         uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "name" field.</summary>
//     public const int NameFieldNumber = 2;
//     private string name_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Name {
//       get { return name_; }
//       set {
//         name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "description" field.</summary>
//     public const int DescriptionFieldNumber = 3;
//     private string description_ = "";
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string Description {
//       get { return description_; }
//       set {
//         description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     /// <summary>Field number for the "revisionId" field.</summary>
//     public const int RevisionIdFieldNumber = 4;
//     private string revisionId_ = "";
//     /// <summary>
//     /// fusion generated id, changes
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public string RevisionId {
//       get { return revisionId_; }
//       set {
//         revisionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Header);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Header other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (Uuid != other.Uuid) return false;
//       if (Name != other.Name) return false;
//       if (Description != other.Description) return false;
//       if (RevisionId != other.RevisionId) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
//       if (Name.Length != 0) hash ^= Name.GetHashCode();
//       if (Description.Length != 0) hash ^= Description.GetHashCode();
//       if (RevisionId.Length != 0) hash ^= RevisionId.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (Uuid.Length != 0) {
//         output.WriteRawTag(10);
//         output.WriteString(Uuid);
//       }
//       if (Name.Length != 0) {
//         output.WriteRawTag(18);
//         output.WriteString(Name);
//       }
//       if (Description.Length != 0) {
//         output.WriteRawTag(26);
//         output.WriteString(Description);
//       }
//       if (RevisionId.Length != 0) {
//         output.WriteRawTag(34);
//         output.WriteString(RevisionId);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (Uuid.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
//       }
//       if (Name.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
//       }
//       if (Description.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
//       }
//       if (RevisionId.Length != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeStringSize(RevisionId);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Header other) {
//       if (other == null) {
//         return;
//       }
//       if (other.Uuid.Length != 0) {
//         Uuid = other.Uuid;
//       }
//       if (other.Name.Length != 0) {
//         Name = other.Name;
//       }
//       if (other.Description.Length != 0) {
//         Description = other.Description;
//       }
//       if (other.RevisionId.Length != 0) {
//         RevisionId = other.RevisionId;
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             Uuid = input.ReadString();
//             break;
//           }
//           case 18: {
//             Name = input.ReadString();
//             break;
//           }
//           case 26: {
//             Description = input.ReadString();
//             break;
//           }
//           case 34: {
//             RevisionId = input.ReadString();
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   /// <summary>
//   /// RGBA 0-255
//   /// </summary>
//   public sealed partial class Color : pb::IMessage<Color> {
//     private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Color> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[23]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Color() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Color(Color other) : this() {
//       r_ = other.r_;
//       g_ = other.g_;
//       b_ = other.b_;
//       a_ = other.a_;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Color Clone() {
//       return new Color(this);
//     }
//
//     /// <summary>Field number for the "R" field.</summary>
//     public const int RFieldNumber = 1;
//     private int r_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int R {
//       get { return r_; }
//       set {
//         r_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "G" field.</summary>
//     public const int GFieldNumber = 2;
//     private int g_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int G {
//       get { return g_; }
//       set {
//         g_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "B" field.</summary>
//     public const int BFieldNumber = 3;
//     private int b_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int B {
//       get { return b_; }
//       set {
//         b_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "A" field.</summary>
//     public const int AFieldNumber = 4;
//     private int a_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int A {
//       get { return a_; }
//       set {
//         a_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Color);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Color other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (R != other.R) return false;
//       if (G != other.G) return false;
//       if (B != other.B) return false;
//       if (A != other.A) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (R != 0) hash ^= R.GetHashCode();
//       if (G != 0) hash ^= G.GetHashCode();
//       if (B != 0) hash ^= B.GetHashCode();
//       if (A != 0) hash ^= A.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (R != 0) {
//         output.WriteRawTag(8);
//         output.WriteInt32(R);
//       }
//       if (G != 0) {
//         output.WriteRawTag(16);
//         output.WriteInt32(G);
//       }
//       if (B != 0) {
//         output.WriteRawTag(24);
//         output.WriteInt32(B);
//       }
//       if (A != 0) {
//         output.WriteRawTag(32);
//         output.WriteInt32(A);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (R != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
//       }
//       if (G != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
//       }
//       if (B != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
//       }
//       if (A != 0) {
//         size += 1 + pb::CodedOutputStream.ComputeInt32Size(A);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Color other) {
//       if (other == null) {
//         return;
//       }
//       if (other.R != 0) {
//         R = other.R;
//       }
//       if (other.G != 0) {
//         G = other.G;
//       }
//       if (other.B != 0) {
//         B = other.B;
//       }
//       if (other.A != 0) {
//         A = other.A;
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 8: {
//             R = input.ReadInt32();
//             break;
//           }
//           case 16: {
//             G = input.ReadInt32();
//             break;
//           }
//           case 24: {
//             B = input.ReadInt32();
//             break;
//           }
//           case 32: {
//             A = input.ReadInt32();
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class BoundingBox3D : pb::IMessage<BoundingBox3D> {
//     private static readonly pb::MessageParser<BoundingBox3D> _parser = new pb::MessageParser<BoundingBox3D>(() => new BoundingBox3D());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<BoundingBox3D> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[24]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public BoundingBox3D() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public BoundingBox3D(BoundingBox3D other) : this() {
//       maxPoint_ = other.maxPoint_ != null ? other.maxPoint_.Clone() : null;
//       minPoint_ = other.minPoint_ != null ? other.minPoint_.Clone() : null;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public BoundingBox3D Clone() {
//       return new BoundingBox3D(this);
//     }
//
//     /// <summary>Field number for the "maxPoint" field.</summary>
//     public const int MaxPointFieldNumber = 1;
//     private global::Synthesis.Gltfextras.Vector3D maxPoint_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D MaxPoint {
//       get { return maxPoint_; }
//       set {
//         maxPoint_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "minPoint" field.</summary>
//     public const int MinPointFieldNumber = 2;
//     private global::Synthesis.Gltfextras.Vector3D minPoint_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public global::Synthesis.Gltfextras.Vector3D MinPoint {
//       get { return minPoint_; }
//       set {
//         minPoint_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as BoundingBox3D);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(BoundingBox3D other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!object.Equals(MaxPoint, other.MaxPoint)) return false;
//       if (!object.Equals(MinPoint, other.MinPoint)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (maxPoint_ != null) hash ^= MaxPoint.GetHashCode();
//       if (minPoint_ != null) hash ^= MinPoint.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (maxPoint_ != null) {
//         output.WriteRawTag(10);
//         output.WriteMessage(MaxPoint);
//       }
//       if (minPoint_ != null) {
//         output.WriteRawTag(18);
//         output.WriteMessage(MinPoint);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (maxPoint_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxPoint);
//       }
//       if (minPoint_ != null) {
//         size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinPoint);
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(BoundingBox3D other) {
//       if (other == null) {
//         return;
//       }
//       if (other.maxPoint_ != null) {
//         if (maxPoint_ == null) {
//           MaxPoint = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         MaxPoint.MergeFrom(other.MaxPoint);
//       }
//       if (other.minPoint_ != null) {
//         if (minPoint_ == null) {
//           MinPoint = new global::Synthesis.Gltfextras.Vector3D();
//         }
//         MinPoint.MergeFrom(other.MinPoint);
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10: {
//             if (maxPoint_ == null) {
//               MaxPoint = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(MaxPoint);
//             break;
//           }
//           case 18: {
//             if (minPoint_ == null) {
//               MinPoint = new global::Synthesis.Gltfextras.Vector3D();
//             }
//             input.ReadMessage(MinPoint);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class Vector3D : pb::IMessage<Vector3D> {
//     private static readonly pb::MessageParser<Vector3D> _parser = new pb::MessageParser<Vector3D>(() => new Vector3D());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Vector3D> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[25]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Vector3D() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Vector3D(Vector3D other) : this() {
//       x_ = other.x_;
//       y_ = other.y_;
//       z_ = other.z_;
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Vector3D Clone() {
//       return new Vector3D(this);
//     }
//
//     /// <summary>Field number for the "x" field.</summary>
//     public const int XFieldNumber = 1;
//     private double x_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double X {
//       get { return x_; }
//       set {
//         x_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "y" field.</summary>
//     public const int YFieldNumber = 2;
//     private double y_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double Y {
//       get { return y_; }
//       set {
//         y_ = value;
//       }
//     }
//
//     /// <summary>Field number for the "z" field.</summary>
//     public const int ZFieldNumber = 3;
//     private double z_;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public double Z {
//       get { return z_; }
//       set {
//         z_ = value;
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Vector3D);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Vector3D other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
//       if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
//       if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
//       if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       if (X != 0D) {
//         output.WriteRawTag(9);
//         output.WriteDouble(X);
//       }
//       if (Y != 0D) {
//         output.WriteRawTag(17);
//         output.WriteDouble(Y);
//       }
//       if (Z != 0D) {
//         output.WriteRawTag(25);
//         output.WriteDouble(Z);
//       }
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       if (X != 0D) {
//         size += 1 + 8;
//       }
//       if (Y != 0D) {
//         size += 1 + 8;
//       }
//       if (Z != 0D) {
//         size += 1 + 8;
//       }
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Vector3D other) {
//       if (other == null) {
//         return;
//       }
//       if (other.X != 0D) {
//         X = other.X;
//       }
//       if (other.Y != 0D) {
//         Y = other.Y;
//       }
//       if (other.Z != 0D) {
//         Z = other.Z;
//       }
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 9: {
//             X = input.ReadDouble();
//             break;
//           }
//           case 17: {
//             Y = input.ReadDouble();
//             break;
//           }
//           case 25: {
//             Z = input.ReadDouble();
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   public sealed partial class Matrix3D : pb::IMessage<Matrix3D> {
//     private static readonly pb::MessageParser<Matrix3D> _parser = new pb::MessageParser<Matrix3D>(() => new Matrix3D());
//     private pb::UnknownFieldSet _unknownFields;
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pb::MessageParser<Matrix3D> Parser { get { return _parser; } }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public static pbr::MessageDescriptor Descriptor {
//       get { return global::Synthesis.Gltfextras.GltfExtrasReflection.Descriptor.MessageTypes[26]; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     pbr::MessageDescriptor pb::IMessage.Descriptor {
//       get { return Descriptor; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Matrix3D() {
//       OnConstruction();
//     }
//
//     partial void OnConstruction();
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Matrix3D(Matrix3D other) : this() {
//       cells_ = other.cells_.Clone();
//       _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public Matrix3D Clone() {
//       return new Matrix3D(this);
//     }
//
//     /// <summary>Field number for the "cells" field.</summary>
//     public const int CellsFieldNumber = 1;
//     private static readonly pb::FieldCodec<double> _repeated_cells_codec
//         = pb::FieldCodec.ForDouble(10);
//     private readonly pbc::RepeatedField<double> cells_ = new pbc::RepeatedField<double>();
//     /// <summary>
//     /// 16 cells (no fixed length arrays in protobuf??)
//     /// </summary>
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public pbc::RepeatedField<double> Cells {
//       get { return cells_; }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override bool Equals(object other) {
//       return Equals(other as Matrix3D);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public bool Equals(Matrix3D other) {
//       if (ReferenceEquals(other, null)) {
//         return false;
//       }
//       if (ReferenceEquals(other, this)) {
//         return true;
//       }
//       if(!cells_.Equals(other.cells_)) return false;
//       return Equals(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override int GetHashCode() {
//       int hash = 1;
//       hash ^= cells_.GetHashCode();
//       if (_unknownFields != null) {
//         hash ^= _unknownFields.GetHashCode();
//       }
//       return hash;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public override string ToString() {
//       return pb::JsonFormatter.ToDiagnosticString(this);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void WriteTo(pb::CodedOutputStream output) {
//       cells_.WriteTo(output, _repeated_cells_codec);
//       if (_unknownFields != null) {
//         _unknownFields.WriteTo(output);
//       }
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public int CalculateSize() {
//       int size = 0;
//       size += cells_.CalculateSize(_repeated_cells_codec);
//       if (_unknownFields != null) {
//         size += _unknownFields.CalculateSize();
//       }
//       return size;
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(Matrix3D other) {
//       if (other == null) {
//         return;
//       }
//       cells_.Add(other.cells_);
//       _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
//     }
//
//     [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
//     public void MergeFrom(pb::CodedInputStream input) {
//       uint tag;
//       while ((tag = input.ReadTag()) != 0) {
//         switch(tag) {
//           default:
//             _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
//             break;
//           case 10:
//           case 9: {
//             cells_.AddEntriesFrom(input, _repeated_cells_codec);
//             break;
//           }
//         }
//       }
//     }
//
//   }
//
//   #endregion
//
// }
//
// #endregion Designer generated code
