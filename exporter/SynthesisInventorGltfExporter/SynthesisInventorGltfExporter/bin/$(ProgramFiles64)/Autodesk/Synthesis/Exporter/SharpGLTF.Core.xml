<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpGLTF.Core</name>
    </assembly>
    <members>
        <member name="T:SharpGLTF.Animations.Vector3CubicSampler">
            <summary>
            Defines a <see cref="T:System.Numerics.Vector3"/> curve sampler that can be sampled with CUBIC interpolation.
            </summary>
        </member>
        <member name="T:SharpGLTF.Animations.QuaternionCubicSampler">
            <summary>
            Defines a <see cref="T:System.Numerics.Quaternion"/> curve sampler that can be sampled with CUBIC interpolation.
            </summary>
        </member>
        <member name="T:SharpGLTF.Animations.SparseCubicSampler">
            <summary>
            Defines a <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> curve sampler that can be sampled with CUBIC interpolation.
            </summary>
        </member>
        <member name="T:SharpGLTF.Animations.ArrayCubicSampler">
            <summary>
            Defines a <see cref="T:System.Single"/>[] curve sampler that can be sampled with CUBIC interpolation.
            </summary>
        </member>
        <member name="T:SharpGLTF.Animations.FastSampler`1">
            <summary>
            Wraps a collection of samplers split over time to speed up key retrieval.
            </summary>
            <typeparam name="T">The value sampled at any offset</typeparam>
        </member>
        <member name="T:SharpGLTF.Animations.ICurveSampler`1">
            <summary>
            Defines a curve that can be sampled at specific points.
            </summary>
            <typeparam name="T">The type of a point in the curve.</typeparam>
        </member>
        <member name="T:SharpGLTF.Animations.IConvertibleCurve`1">
            <summary>
            Defines methods that convert the current curve to a Step, Linear or Spline curve.
            </summary>
            <typeparam name="T">The type of a point of the curve</typeparam>
        </member>
        <member name="P:SharpGLTF.Animations.IConvertibleCurve`1.MaxDegree">
            <summary>
            Gets a value indicating the maximum degree of the curve, current values are:
            0: STEP.
            1: LINEAR.
            3: CUBIC.
            </summary>
        </member>
        <member name="T:SharpGLTF.Animations.Vector3LinearSampler">
            <summary>
            Defines a <see cref="T:System.Numerics.Vector3"/> curve sampler that can be sampled with STEP or LINEAR interpolations.
            </summary>
        </member>
        <member name="T:SharpGLTF.Animations.QuaternionLinearSampler">
            <summary>
            Defines a <see cref="T:System.Numerics.Quaternion"/> curve sampler that can be sampled with STEP or LINEAR interpolations.
            </summary>
        </member>
        <member name="T:SharpGLTF.Animations.SparseLinearSampler">
            <summary>
            Defines a <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> curve sampler that can be sampled with STEP or LINEAR interpolation.
            </summary>
        </member>
        <member name="T:SharpGLTF.Animations.ArrayLinearSampler">
            <summary>
            Defines a <see cref="T:System.Single"/>[] curve sampler that can be sampled with STEP or LINEAR interpolations.
            </summary>
        </member>
        <member name="T:SharpGLTF.Animations.SamplerFactory">
            <summary>
            Utility class to create samplers from curve collections.
            </summary>
        </member>
        <member name="M:SharpGLTF.Animations.SamplerFactory.CreateHermitePointWeights(System.Single)">
            <summary>
            Calculates the Hermite point weights for a given <paramref name="amount"/>
            </summary>
            <param name="amount">The input amount (must be between 0 and 1)</param>
            <returns>
            The output weights.
            - StartPosition: Weight for Start point
            - EndPosition: Weight for End point
            - StartTangent: Weight for Start Outgoing Tangent
            - EndTangent: Weight for End Incoming Tangent
            </returns>
        </member>
        <member name="M:SharpGLTF.Animations.SamplerFactory.CreateHermiteTangentWeights(System.Single)">
            <summary>
            Calculates the Hermite tangent weights for a given <paramref name="amount"/>
            </summary>
            <param name="amount">The input amount (must be between 0 and 1)</param>
            <returns>
            The output weights.
            - StartPosition: Weight for Start point
            - EndPosition: Weight for End point
            - StartTangent: Weight for Start Outgoing Tangent
            - EndTangent: Weight for End Incoming Tangent
            </returns>
        </member>
        <member name="M:SharpGLTF.Animations.SamplerFactory.FindPairContainingOffset``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Single,``0}},System.Single)">
            <summary>
            Given a <paramref name="sequence"/> of float+<typeparamref name="T"/> pairs and an <paramref name="offset"/>,
            it finds two consecutive values that contain <paramref name="offset"/> between them.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="sequence">A sequence of float+<typeparamref name="T"/> pairs sorted in ascending order.</param>
            <param name="offset">the offset to look for in the sequence.</param>
            <returns>Two consecutive <typeparamref name="T"/> values and a float amount to LERP amount.</returns>
        </member>
        <member name="M:SharpGLTF.Animations.SamplerFactory.FindPairContainingOffset(System.Collections.Generic.IEnumerable{System.Single},System.Single)">
            <summary>
            Given a <paramref name="sequence"/> of offsets and an <paramref name="offset"/>,
            it finds two consecutive offsets that contain <paramref name="offset"/> between them.
            </summary>
            <param name="sequence">A sequence of offsets sorted in ascending order.</param>
            <param name="offset">the offset to look for in the sequence.</param>
            <returns>Two consecutive offsets and a LERP amount.</returns>
        </member>
        <member name="T:SharpGLTF.Collections.ReadOnlyLinqDictionary`3">
            <summary>
            Wraps a standard dictionary, but performs a transform in the value
            </summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValueIn">The internal value type.</typeparam>
            <typeparam name="TValueOut">The exposed value type.</typeparam>
        </member>
        <member name="T:SharpGLTF.Collections.NamedList`1">
            <summary>
            Stores values by index, and optionally, by name.
            </summary>
            <typeparam name="T">Any type.</typeparam>
        </member>
        <member name="T:SharpGLTF.Collections.ReferenceComparer`1">
            <summary>
            this class is used to compare two T class references,
            bypassing any equality operator implemented by the T class.
            </summary>
            <typeparam name="T">Any ByRef type.</typeparam>
            <see href="https://stackoverflow.com/questions/4901320/is-there-any-kind-of-referencecomparer-in-net"/>
        </member>
        <member name="M:SharpGLTF.Schema2.BinarySerialization.IsBinaryCompatible(SharpGLTF.Schema2.ModelRoot)">
            <summary>
            Tells if a given model can be stored as Binary format.
            </summary>
            <param name="model">the model to test</param>
            <returns>null if it can be stored as binary, or an exception object if it can't</returns>
            <remarks>
            Due to the limitations of Binary Format, not all models can be saved as Binary.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.BinarySerialization.WriteBinaryModel(System.IO.BinaryWriter,SharpGLTF.Schema2.ModelRoot)">
            <summary>
            Writes a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="binaryWriter">The destination <see cref="T:System.IO.BinaryWriter"/> stream.</param>
            <param name="model">The source <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialClearCoat">
            <summary>
            glTF extension that defines the clearcoat material layer.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.PunctualLight">
            <summary>
            A directional, point, or spot light.
            </summary>
            <remarks>
            This is part of <see href="https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual"/> extension.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.PunctualLight.SetSpotCone(System.Single,System.Single)">
            <summary>
            Sets the cone angles for the <see cref="F:SharpGLTF.Schema2.PunctualLightType.Spot"/> light.
            </summary>
            <param name="innerConeAngle">
            Gets the Angle, in radians, from centre of spotlight where falloff begins.
            Must be greater than or equal to 0 and less than outerConeAngle.
            </param>
            <param name="outerConeAngle">
            Gets Angle, in radians, from centre of spotlight where falloff ends.
            Must be greater than innerConeAngle and less than or equal to PI / 2.0.
            </param>
        </member>
        <member name="M:SharpGLTF.Schema2.PunctualLight.SetColor(System.Numerics.Vector3,System.Single,System.Single)">
            <summary>
            Defines the light color, intensity and range for the current <see cref="T:SharpGLTF.Schema2.PunctualLight"/>.
            </summary>
            <param name="color">RGB value for light's color in linear space.</param>
            <param name="intensity">
            Brightness of light in. The units that this is defined in depend on the type of light.
            point and spot lights use luminous intensity in candela (lm/sr) while directional
            lights use illuminance in lux (lm/m2)
            </param>
            <param name="range">
            Hint defining a distance cutoff at which the light's intensity may be considered
            to have reached zero. Supported only for point and spot lights. Must be > 0.
            When undefined, range is assumed to be infinite.
            </param>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.LocalDirection">
            <summary>
            Gets the Local light direction.
            </summary>
            <remarks>
            For light types that have a direction (directional and spot lights),
            the light's direction is defined as the 3-vector (0.0, 0.0, -1.0)
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.PunctualLight"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalPunctualLights"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.LightType">
            <summary>
            Gets the type of light.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.InnerConeAngle">
            <summary>
            Gets the Angle, in radians, from centre of spotlight where falloff begins.
            Must be greater than or equal to 0 and less than outerConeAngle.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.OuterConeAngle">
            <summary>
            Gets Angle, in radians, from centre of spotlight where falloff ends.
            Must be greater than innerConeAngle and less than or equal to PI / 2.0.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.Color">
            <summary>
            Gets or sets the RGB value for light's color in linear space.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.Intensity">
            <summary>
            Gets or sets the Brightness of light in. The units that this is defined in depend on the type of light.
            point and spot lights use luminous intensity in candela (lm/sr) while directional
            lights use illuminance in lux (lm/m2)
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.PunctualLight.Range">
            <summary>
            Gets or sets a Hint defining a distance cutoff at which the light's intensity may be considered
            to have reached zero. Supported only for point and spot lights. Must be > 0.
            When undefined, range is assumed to be infinite.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureDDS">
            <summary>
            glTF extension to specify textures using the DirectDraw Surface file format (DDS).
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialPBRSpecularGlossiness">
            <summary>
            glTF extension that defines the specular-glossiness material model from Physically-Based Rendering (PBR) methodology.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureTransform">
            <summary>
            glTF extension that enables shifting and scaling UV coordinates on a per-texture basis
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.TextureTransform.TextureCoordinateOverride">
            <summary>
            Gets or sets a value that overrides <see cref="P:SharpGLTF.Schema2.TextureInfo.TextureCoordinate"/> if supplied, and if this extension is supported.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureWEBP">
            <summary>
            glTF extension to specify textures using the WebP image format.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialUnlit">
            <summary>
            glTF extension that defines the unlit material model.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.IndexEncodingType">
            <summary>
            The indices data type.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.EncodingType">
            <summary>
            The datatype of components in the attribute.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.DimensionType">
            <summary>
            Specifies if the attribute is a scalar, vector, or matrix.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.PropertyPath">
            <summary>
            The name of the node's TRS property to modify, or the "weights" of the Morph Targets it instantiates. For the "translation" property, the values that are provided by the sampler are the translation along the x, y, and z axes. For the "rotation" property, the values are a quaternion in the order (x, y, z, w), where w is the scalar. For the "scale" property, the values are the scaling factors along the x, y, and z axes.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AnimationInterpolationMode">
            <summary>
            Interpolation algorithm.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.BufferMode">
            <summary>
            The target that the GPU buffer should be bound to.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.CameraType">
            <summary>
            Specifies if the camera uses a perspective or orthographic projection.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AlphaMode">
            <summary>
            The alpha rendering mode of the material.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.PrimitiveType">
            <summary>
            The type of primitives to render.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureInterpolationFilter">
            <summary>
            Magnification filter.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureMipMapFilter">
            <summary>
            Minification filter.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureWrapMode">
            <summary>
            t wrapping mode.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.LogicalChildOfRoot">
            <summary>
            All gltf elements stored in ModelRoot must inherit from this class.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.LogicalChildOfRoot.LogicalParent">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance that owns this object.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.LogicalChildOfRoot.RenameLogicalElements``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Renames all the unnamed and duplicate name items in the collection so all the items have a unique valid name.
            </summary>
            <typeparam name="T">Any <see cref="T:SharpGLTF.Schema2.LogicalChildOfRoot"/> derived type.</typeparam>
            <param name="collection">The source collection.</param>
            <param name="namePrefix">The name prefix to use.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.AccessorSparseIndices">
            <summary>
            Indices of those attributes that deviate from their initialization value.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AccessorSparseValues">
            <summary>
            Array of size `accessor.sparse.count` times number of components storing the displaced accessor attributes pointed by `accessor.sparse.indices`.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AccessorSparse">
            <summary>
            Sparse storage of attributes that deviate from their initialization value.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Accessor">
            <summary>
            A typed view into a bufferView.
            A bufferView contains raw binary data.
            An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's `vertexAttribPointer()` defines an attribute in a buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Accessor"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalAccessors"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.SourceBufferView">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.BufferView"/> buffer that contains the items as an encoded byte array.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.ByteOffset">
            <summary>
            Gets the starting byte offset within <see cref="P:SharpGLTF.Schema2.Accessor.SourceBufferView"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.ByteLength">
            <summary>
            Gets the number of bytes, starting at <see cref="P:SharpGLTF.Schema2.Accessor.ByteOffset"/> use by this <see cref="T:SharpGLTF.Schema2.Accessor"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.Dimensions">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.DimensionType"/> of an item.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.Encoding">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.EncodingType"/> of an item.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.Normalized">
            <summary>
            Gets a value indicating whether the items values are normalized.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.IsSparse">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.Accessor"/> has a sparse structure.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Accessor.ElementByteSize">
            <summary>
            Gets the number of bytes required to encode a single item in <see cref="P:SharpGLTF.Schema2.Accessor.SourceBufferView"/>
            Given the current <see cref="P:SharpGLTF.Schema2.Accessor.Dimensions"/> and <see cref="P:SharpGLTF.Schema2.Accessor.Encoding"/> states.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Accessor.SetData(SharpGLTF.Schema2.BufferView,System.Int32,System.Int32,SharpGLTF.Schema2.DimensionType,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Associates this <see cref="T:SharpGLTF.Schema2.Accessor"/> with a <see cref="T:SharpGLTF.Schema2.BufferView"/>
            </summary>
            <param name="buffer">The <see cref="T:SharpGLTF.Schema2.BufferView"/> source.</param>
            <param name="bufferByteOffset">The start byte offset within <paramref name="buffer"/>.</param>
            <param name="itemCount">The number of items in the accessor.</param>
            <param name="dimensions">The <see cref="T:SharpGLTF.Schema2.DimensionType"/> item type.</param>
            <param name="encoding">The <see cref="T:SharpGLTF.Schema2.EncodingType"/> item encoding.</param>
            <param name="normalized">The item normalization mode.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Accessor.SetIndexData(SharpGLTF.Schema2.BufferView,System.Int32,System.Int32,SharpGLTF.Schema2.IndexEncodingType)">
            <summary>
            Associates this <see cref="T:SharpGLTF.Schema2.Accessor"/> with a <see cref="T:SharpGLTF.Schema2.BufferView"/>
            </summary>
            <param name="buffer">The <see cref="T:SharpGLTF.Schema2.BufferView"/> source.</param>
            <param name="bufferByteOffset">The start byte offset within <paramref name="buffer"/>.</param>
            <param name="itemCount">The number of items in the accessor.</param>
            <param name="encoding">The <see cref="T:SharpGLTF.Schema2.IndexEncodingType"/> item encoding.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Accessor.SetVertexData(SharpGLTF.Schema2.BufferView,System.Int32,System.Int32,SharpGLTF.Schema2.DimensionType,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Associates this <see cref="T:SharpGLTF.Schema2.Accessor"/> with a <see cref="T:SharpGLTF.Schema2.BufferView"/>
            </summary>
            <param name="buffer">The <see cref="T:SharpGLTF.Schema2.BufferView"/> source.</param>
            <param name="bufferByteOffset">The start byte offset within <paramref name="buffer"/>.</param>
            <param name="itemCount">The number of items in the accessor.</param>
            <param name="dimensions">The <see cref="T:SharpGLTF.Schema2.DimensionType"/> item type.</param>
            <param name="encoding">The <see cref="T:SharpGLTF.Schema2.EncodingType"/> item encoding.</param>
            <param name="normalized">The item normalization mode.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.AnimationChannelTarget">
            <summary>
            The index of the node and TRS property that an animation channel targets.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AnimationChannel">
            <summary>
            Targets an animation's sampler at a node's property.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationChannel.LogicalParent">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.Animation"/> instance that owns this object.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationChannel.Sampler">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.AnimationSampler"/> instance used by this <see cref="T:SharpGLTF.Schema2.AnimationChannel"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.AnimationSampler">
            <summary>
            Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationSampler.LogicalParent">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.Animation"/> instance that owns this <see cref="T:SharpGLTF.Schema2.AnimationSampler"/> instance.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.AnimationSampler.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.AnimationSampler"/> at <see cref="F:SharpGLTF.Schema2.Animation._samplers"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Animation">
            <summary>
            A keyframe animation.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Animation.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Animation"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalAnimations"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Animation._UseChannel(SharpGLTF.Schema2.Node,SharpGLTF.Schema2.PropertyPath)">
            <remarks>
            There can only be one <see cref="T:SharpGLTF.Schema2.AnimationChannel"/> for every node and path
            </remarks>
        </member>
        <member name="T:SharpGLTF.Schema2.Asset">
            <summary>
            Metadata about the glTF asset.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Buffer">
            <summary>
            A buffer points to binary geometry, animation, or skins.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.Buffer._Content">
            <summary>
            Immediately after deserialization, binary buffer is loaded/parsed and stored here
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Buffer.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Buffer"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Buffer._WriteToSatellite(SharpGLTF.IO.WriteContext,System.String)">
            <summary>
            Called internally by the serializer when the buffer content is to be written as an external file
            </summary>
            <param name="writer">The satellite asset writer</param>
            <param name="satelliteUri">A local satellite URI</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Buffer._WriteToInternal">
            <summary>
            Called internally by the serializer when the buffer content is to be written internally.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Buffer._ClearAfterWrite">
            <summary>
            Called by the serializer immediatelly after
            calling <see cref="M:SharpGLTF.Schema2.Buffer._WriteToSatellite(SharpGLTF.IO.WriteContext,System.String)"/>
            or <see cref="M:SharpGLTF.Schema2.Buffer._WriteToInternal"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.BufferView">
            <summary>
            A view into a buffer generally representing a subset of the buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.BufferView"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBufferViews"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.IsVertexBuffer">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.BufferView"/> defines a GPU Ready Vertex Buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.IsIndexBuffer">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.BufferView"/> defines a GPU Ready Index Buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.IsDataBuffer">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.BufferView"/> defines a general purpose data buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.ByteStride">
            <summary>
            Gets the number of bytes between the beginnings of successive elements, or Zero.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.BufferView.Content">
            <summary>
            Gets the actual bytes defined by this <see cref="T:SharpGLTF.Schema2.BufferView"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.BufferView.FindAccessors">
            <summary>
            Finds all the accessors using this BufferView
            </summary>
            <returns>A collection of accessors</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.BufferView.IsInterleaved(System.Collections.Generic.IEnumerable{SharpGLTF.Schema2.Accessor})">
            <summary>
            Checks if <paramref name="accessors"/> use this buffer in interleaved arrangement
            </summary>
            <param name="accessors">A collection of accessors that use this buffer</param>
            <returns>true if the buffer is interleaved</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.BufferView.GetAccessorByteLength(SharpGLTF.Memory.AttributeFormat@,System.Int32)">
            <summary>
            Calculates the number of bytes to which this accessors reads
            taking into account if the source <see cref="T:SharpGLTF.Schema2.BufferView"/> is strided.
            </summary>
            <returns>The number of bytes to access.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.CameraOrthographic">
            <summary>
            An orthographic camera containing properties to create an orthographic projection matrix.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.XMag">
            <summary>
            Gets the magnification factor in the X axis
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.YMag">
            <summary>
            Gets the magnification factor in the Y axis
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.ZNear">
            <summary>
            Gets the near plane distance in the Z axis.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.ZFar">
            <summary>
            Gets the far plane distance in the Z axis.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraOrthographic.Matrix">
            <summary>
            Gets the projection matrix for the current settings
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.CameraPerspective">
            <summary>
            A perspective camera containing properties to create a perspective projection matrix.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.AspectRatio">
            <summary>
            Gets the aspect ratio between horizontal window size and vertical window size.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.VerticalFOV">
            <summary>
            Gets the vertical field of view, in radians
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.ZNear">
            <summary>
            Gets the near plane distance in the Z axis.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.ZFar">
            <summary>
            Gets the far plane distance in the Z axis.
            </summary>
            <remarks>
            This value can be a finite value, or positive infinity.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.CameraPerspective.Matrix">
            <summary>
            Gets the projection matrix for the current settings
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Camera">
            <summary>
            A camera's projection.
            A node can reference a camera to apply a transform to place the camera in the scene.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Camera.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Camera"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalCameras"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Camera.Matrix">
            <summary>
            Gets the projection matrix for the current <see cref="P:SharpGLTF.Schema2.Camera.Settings"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Camera.SetOrthographicMode(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Configures this <see cref="T:SharpGLTF.Schema2.Camera"/> to use Orthographic projection.
            </summary>
            <param name="xmag">Magnification in the X axis.</param>
            <param name="ymag">Magnification in the Y axis.</param>
            <param name="znear">Distance to the near pane in the Z axis.</param>
            <param name="zfar">Distance to the far plane in the Z axis.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Camera.SetPerspectiveMode(System.Nullable{System.Single},System.Single,System.Single,System.Single)">
            <summary>
            Configures this <see cref="T:SharpGLTF.Schema2.Camera"/> to use perspective projection.
            </summary>
            <param name="aspectRatio">The aspect ratio between horizontal and vertical. (optional)</param>
            <param name="yfov">The vertical field of view, in radians.</param>
            <param name="znear">Distance to the near pane in the Z axis.</param>
            <param name="zfar">Distance to the far plane in the Z axis.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureInfo">
            <summary>
            Reference to a texture.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.TextureInfo.TextureCoordinate">
            <summary>
            Gets or sets the index of texture's TEXCOORD_[index] attribute used for texture coordinate mapping.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialPBRMetallicRoughness">
            <summary>
            A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Material">
            <summary>
            The material appearance of a primitive.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Material"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMaterials"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.Alpha">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.AlphaMode"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.AlphaCutoff">
            <summary>
            Gets or sets the <see cref="P:SharpGLTF.Schema2.Material.AlphaCutoff"/> value for <see cref="P:SharpGLTF.Schema2.Material.Alpha"/> = <see cref="F:SharpGLTF.Schema2.AlphaMode.MASK"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.DoubleSided">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SharpGLTF.Schema2.Material"/> will render as Double Sided.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.Unlit">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpGLTF.Schema2.Material"/> instance has Unlit extension.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Material.Channels">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.MaterialChannel"/> elements available in this <see cref="T:SharpGLTF.Schema2.Material"/> instance.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Material.FindChannel(System.String)">
            <summary>
            Finds an instance of <see cref="T:SharpGLTF.Schema2.MaterialChannel"/>
            </summary>
            <param name="channelKey">
            The channel key. Currently, these values are used:
            - "Normal"
            - "Occlusion"
            - "Emissive"
            - When material is <see cref="T:SharpGLTF.Schema2.MaterialPBRMetallicRoughness"/>:
              - "BaseColor"
              - "MetallicRoughness"
            - When material is <see cref="T:SharpGLTF.Schema2.MaterialPBRSpecularGlossiness"/>:
              - "Diffuse"
              - "SpecularGlossiness"
            </param>
            <returns>A <see cref="T:SharpGLTF.Schema2.MaterialChannel"/> structure. or null if it does not exist</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Material.InitializePBRMetallicRoughness">
            <summary>
            Initializes this <see cref="T:SharpGLTF.Schema2.Material"/> instance with PBR Metallic Roughness attributes.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Material.InitializePBRMetallicRoughnessClearCoat">
            <summary>
            Initializes this <see cref="T:SharpGLTF.Schema2.Material"/> instance with PBR Metallic Roughness attributes and Clear Coat extension.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Material.InitializePBRSpecularGlossiness(System.Boolean)">
            <summary>
            Initializes this <see cref="T:SharpGLTF.Schema2.Material"/> instance with PBR Specular Glossiness attributes.
            </summary>
            <param name="useFallback">true to add a PBRMetallicRoughness fallback material.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Material.InitializeUnlit">
            <summary>
            Initializes this <see cref="T:SharpGLTF.Schema2.Material"/> instance with Unlit attributes.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.MeshPrimitive">
            <summary>
            Geometry to be rendered with the given material.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MeshPrimitive.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.MeshPrimitive"/> at <see cref="P:SharpGLTF.Schema2.Mesh.Primitives"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MeshPrimitive.LogicalParent">
            <summary>
            Gets the <see cref="T:SharpGLTF.Schema2.Mesh"/> instance that owns this <see cref="T:SharpGLTF.Schema2.MeshPrimitive"/> instance.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MeshPrimitive.Material">
            <summary>
            Gets or sets the <see cref="P:SharpGLTF.Schema2.MeshPrimitive.Material"/> instance, or null.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.MeshPrimitive.GetIndices">
            <summary>
            Gets the raw list of indices of this primitive.
            </summary>
            <returns>A list of indices, or null.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.MeshPrimitive.GetPointIndices">
            <summary>
            Decodes the raw indices and returns a list of indexed points.
            </summary>
            <returns>A sequence of indexed points.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.MeshPrimitive.GetLineIndices">
            <summary>
            Decodes the raw indices and returns a list of indexed lines.
            </summary>
            <returns>A sequence of indexed lines.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.MeshPrimitive.GetTriangleIndices">
            <summary>
            Decodes the raw indices and returns a list of indexed triangles.
            </summary>
            <returns>A sequence of indexed triangles.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.Mesh">
            <summary>
            A set of primitives to be rendered.
            A node can contain one mesh.
            A node's transform places the mesh in the scene.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Mesh.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Mesh"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMeshes"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Mesh.CreatePrimitive">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.MeshPrimitive"/> instance
            and adds it to the current <see cref="T:SharpGLTF.Schema2.Mesh"/>.
            </summary>
            <returns>A <see cref="T:SharpGLTF.Schema2.MeshPrimitive"/> instance.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.Node">
            <summary>
            A node in the node hierarchy.
            When the node contains `skin`, all `mesh.primitives` must contain `JOINTS_0` and `WEIGHTS_0` attributes.
            A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Node"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalNodes"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.VisualParent">
            <summary>
            Gets the visual parent <see cref="T:SharpGLTF.Schema2.Node"/> instance that contains this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.VisualRoot">
            <summary>
            Gets the visual root <see cref="T:SharpGLTF.Schema2.Node"/> instance that contains this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.VisualScenes">
            <summary>
            Gets the collection of <see cref="T:SharpGLTF.Schema2.Scene"/> instances that reference this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.VisualChildren">
            <summary>
            Gets the visual children <see cref="T:SharpGLTF.Schema2.Node"/> instances contained in this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.IsSkinJoint">
            <summary>
            Gets a value indicating whether this node is used as a Bone joint in a <see cref="P:SharpGLTF.Schema2.Node.Skin"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.IsSkinSkeleton">
            <summary>
            Gets a value indicating whether this node is used as a Skeleton node in a <see cref="P:SharpGLTF.Schema2.Node.Skin"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.Camera">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.Camera"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.Mesh">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.Mesh"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.Skin">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.Skin"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.MorphWeights">
            <summary>
            Gets the Morph Weights of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.LocalTransform">
            <summary>
            Gets or sets the local Scale, Rotation and Translation of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.LocalMatrix">
            <summary>
            Gets or sets the local transform <see cref="T:System.Numerics.Matrix4x4"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.WorldMatrix">
            <summary>
            Gets or sets the world transform <see cref="T:System.Numerics.Matrix4x4"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.IsTransformAnimated">
            <summary>
            Gets a value indicating whether this transform is affected by any animation.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.CreateNode(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Node"/> instance,
            adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalNodes"/>
            and references it as a child in the current graph.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Node"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.Flatten(SharpGLTF.Schema2.IVisualNodeContainer)">
            <summary>
            Returns all the <see cref="T:SharpGLTF.Schema2.Node"/> instances of a visual hierarchy as a flattened list.
            </summary>
            <param name="container">A <see cref="T:SharpGLTF.Schema2.IVisualNodeContainer"/> instance.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.FindNodesUsingMesh(SharpGLTF.Schema2.Mesh)">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances using <paramref name="mesh"/>.
            </summary>
            <param name="mesh">A <see cref="P:SharpGLTF.Schema2.Node.Mesh"/> instance.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Node.FindNodesUsingSkin(SharpGLTF.Schema2.Skin)">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances using <paramref name="skin"/>.
            </summary>
            <param name="skin">A <see cref="P:SharpGLTF.Schema2.Node.Skin"/> instance.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances.</returns>
        </member>
        <member name="P:SharpGLTF.Schema2.Node.PunctualLight">
            <summary>
            Gets or sets the <see cref="T:SharpGLTF.Schema2.PunctualLight"/> of this <see cref="T:SharpGLTF.Schema2.Node"/>.
            </summary>
            <remarks>
            This is part of <see href="https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual"/> extension.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Schema2.TextureSampler">
            <summary>
            Texture sampler properties for filtering and wrapping modes.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.TextureSampler.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.TextureSampler"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalTextureSamplers"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.Scene">
            <summary>
            The root nodes of a scene.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Scene.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Scene"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalScenes"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Scene.CreateNode(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Node"/> instance,
            adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalNodes"/>
            and references it as a child in the current graph.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Node"/> instance.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.Skin">
            <summary>
            Joints and matrices defining a skin.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Skin.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Skin"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalSkins"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Skin.VisualParents">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.Node"/> instances using this <see cref="T:SharpGLTF.Schema2.Skin"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Skin.JointsCount">
            <summary>
            Gets the number of joints
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Skin.Skeleton">
            <summary>
            Gets or sets the Skeleton <see cref="T:SharpGLTF.Schema2.Node"/>, which represents the root of a joints hierarchy.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.BindJoints(System.Numerics.Matrix4x4,SharpGLTF.Schema2.Node[])">
            <summary>
            Binds a bone armature of <see cref="T:SharpGLTF.Schema2.Node"/> to the associated skinned mesh.
            </summary>
            <param name="meshBindTransform">The world transform matrix of the mesh at the time of binding.</param>
            <param name="joints">A collection of <see cref="T:SharpGLTF.Schema2.Node"/> joints.</param>
            <remarks>
            This method uses the <see cref="P:SharpGLTF.Schema2.Node.WorldMatrix"/> value of each joint to computer the inverse bind matrix.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.BindJoints(System.ValueTuple{SharpGLTF.Schema2.Node,System.Numerics.Matrix4x4}[])">
            <summary>
            Binds a bone armature of <see cref="T:SharpGLTF.Schema2.Node"/> to the associated skinned mesh.
            </summary>
            <param name="joints">
            A collection of <see cref="T:SharpGLTF.Schema2.Node"/> joints,
            where each joint has an Inverse Bind Matrix.
            </param>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.IsMatch(SharpGLTF.Schema2.Node,System.Collections.Generic.KeyValuePair{SharpGLTF.Schema2.Node,System.Numerics.Matrix4x4}[])">
            <summary>
            Returns true if this <see cref="T:SharpGLTF.Schema2.Skin"/> matches the input values.
            </summary>
            <param name="skeleton">A <see cref="T:SharpGLTF.Schema2.Node"/> instance that represents the skeleton root.</param>
            <param name="joints">A key value pair collection of <see cref="T:SharpGLTF.Schema2.Node"/> joints and their binding matrices.</param>
            <returns>True if the input values match this <see cref="T:SharpGLTF.Schema2.Skin"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.FindSkinsUsingJoint(SharpGLTF.Schema2.Node)">
            <summary>
            Finds all the skins that are using the given <see cref="T:SharpGLTF.Schema2.Node"/> as a joint.
            </summary>
            <param name="jointNode">A <see cref="T:SharpGLTF.Schema2.Node"/> joint.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Skin"/> instances.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin.FindSkinsUsingSkeleton(SharpGLTF.Schema2.Node)">
            <summary>
            Finds all the skins that are using the given <see cref="T:SharpGLTF.Schema2.Node"/> as a skeleton.
            </summary>
            <param name="skeletonNode">A <see cref="T:SharpGLTF.Schema2.Node"/> skeleton.</param>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.Skin"/> instances.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Skin._FindCommonAncestor(System.Collections.Generic.IEnumerable{SharpGLTF.Schema2.Node})">
            <summary>
            Validates the node tree, ensuring that all nodes share a common ancestor node, and returns it.
            </summary>
            <param name="nodes">A collection of <see cref="T:SharpGLTF.Schema2.Node"/> joints arranged in a tree.</param>
            <returns>The <see cref="T:SharpGLTF.Schema2.Node"/> root of the tree.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.Texture">
            <summary>
            A texture and its sampler.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Texture.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Texture"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalTextures"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.ModelRoot">
            <summary>
            The root object for a glTF asset.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateAccessor(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Accessor"/> instance
            and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalAccessors"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Accessor"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateAnimation(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Animation"/> instance and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalAnimations"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Animation"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateBuffer(System.Int32)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Buffer"/> instance
            and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/>.
            </summary>
            <param name="byteCount">the size of the buffer, in bytes.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Buffer"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseBuffer(System.Byte[])">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Buffer"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/>.
            </summary>
            <param name="content">the byte array to be wrapped as a buffer</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Buffer"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.MergeBuffers">
            <summary>
            Merges all the <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/> instances into a single big one.
            </summary>
            <remarks>
            When merging the buffers, it also adjusts the BufferView offsets so the data they point to remains the same.
            If images are required to be included in the binary, call <see cref="M:SharpGLTF.Schema2.ModelRoot.MergeImages"/> before calling <see cref="M:SharpGLTF.Schema2.ModelRoot.MergeBuffers"/>
            This action cannot be reversed.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.IsolateMemory">
            <summary>
            Refreshes all internal memory buffers.
            </summary>
            <remarks>
            <see cref="T:SharpGLTF.Schema2.Buffer"/> instances can be created using external <see cref="T:System.Byte"/> arrays, which
            can potentially be shared with other instances. Editing these arrays directly can lead to data
            corruption.
            This method refreshes all internal memory buffers, by copying the data into newly allocated
            buffers. This ensures that at this point, all memory buffers are not shared and of exclusive
            use of this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseBufferView(System.ArraySegment{System.Byte},System.Int32,System.Nullable{SharpGLTF.Schema2.BufferMode})">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.BufferView"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBufferViews"/>.
            </summary>
            <param name="data">The array range to wrap.</param>
            <param name="byteStride">For strided vertex buffers, it must be a value multiple of 4, 0 otherwise</param>
            <param name="target">The type hardware device buffer, or null</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.BufferView"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseBufferView(System.Byte[],System.Int32,System.Nullable{System.Int32},System.Int32,System.Nullable{SharpGLTF.Schema2.BufferMode})">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.BufferView"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBufferViews"/>.
            </summary>
            <param name="buffer">The array to wrap.</param>
            <param name="byteOffset">The zero-based index of the first Byte in <paramref name="buffer"/></param>
            <param name="byteLength">The number of elements in <paramref name="buffer"/></param>
            <param name="byteStride">For strided vertex buffers, it must be a value multiple of 4, 0 otherwise</param>
            <param name="target">The type hardware device buffer, or null</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.BufferView"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseBufferView(SharpGLTF.Schema2.Buffer,System.Int32,System.Nullable{System.Int32},System.Int32,System.Nullable{SharpGLTF.Schema2.BufferMode})">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.BufferView"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBufferViews"/>.
            </summary>
            <param name="buffer">The buffer to wrap.</param>
            <param name="byteOffset">The zero-based index of the first Byte in <paramref name="buffer"/></param>
            <param name="byteLength">The number of elements in <paramref name="buffer"/></param>
            <param name="byteStride">For strided vertex buffers, it must be a value multiple of 4, 0 otherwise</param>
            <param name="target">The type hardware device buffer, or null</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.BufferView"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateCamera(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Camera"/> instance.
            and appends it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalCameras"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Camera"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot._FindMeshQuantizationExtension">
            <summary>
            Immediatelly called after deserialization, it assigns
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateImage(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Image"/> instance.
            and appends it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalImages"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Image"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseImage(SharpGLTF.Memory.MemoryImage)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Image"/> instance.
            </summary>
            <param name="imageContent">An image encoded in PNG, JPEG or DDS</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Image"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.MergeImages">
             <summary>
             Transfers all the <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalImages"/> content into <see cref="T:SharpGLTF.Schema2.BufferView"/> instances
             </summary>
             <remarks>
             Images can be stored in three different ways:
             - As satellite files.
             - Embedded as MIME64 into the JSON document
             - Referenced with <see cref="T:SharpGLTF.Schema2.BufferView"/>
            
             This call ensures all images will be internalized as <see cref="T:SharpGLTF.Schema2.BufferView"/> instances.
            
             This action cannot be reversed.
             </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateMaterial(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Material"/> instance and appends it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMaterials"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Material"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateMesh(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Mesh"/> instance
            and appends it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMeshes"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Mesh"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.ApplyBasisTransform(System.Numerics.Matrix4x4,System.String)">
            <summary>
            Applies a world transform to all the scenes of the model.
            </summary>
            <param name="basisTransform">The transform to apply.</param>
            <param name="basisNodeName">The name of the new root node, if it needs to be created.</param>
            <remarks>
            This method is appropiate to apply a general axis or scale change to the whole model.
            Animations are preserved by encapsulating animated nodes inside a master basis transform node.
            Meanwhile, unanimated nodes are transformed directly.
            If the determinant of <paramref name="basisTransform"/> is negative, the face culling should be
            flipped when rendering.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateModel">
            <summary>
            Creates a new <see cref = "T:SharpGLTF.Schema2.ModelRoot" /> instance.
            </summary>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.DeepClone">
            <summary>
            Creates a complete clone of this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.
            </summary>
            <returns>A new <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
            <remarks>
            Deep cloning is performed as a brute force operation; by serializing
            the whole model to GLTF into memory, and then deserializing it back.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseScene(System.Int32)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Scene"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalScenes"/>.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:SharpGLTF.Schema2.Scene"/> in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalScenes"/>.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Scene"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseScene(System.String)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Scene"/> instance that has the
            same <paramref name="name"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalScenes"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Scene"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.Load(System.String,SharpGLTF.Schema2.ReadSettings)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a path pointing to a GLB or a GLTF file
            </summary>
            <param name="filePath">A valid file path.</param>
            <param name="settings">Optional settings.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.ParseGLB(System.ArraySegment{System.Byte},SharpGLTF.Schema2.ReadSettings)">
            <summary>
            Parses a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.Byte"/> array representing a GLB file
            </summary>
            <param name="glb">A <see cref="T:System.Byte"/> array representing a GLB file</param>
            <param name="settings">Optional settings.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.ReadGLB(System.IO.Stream,SharpGLTF.Schema2.ReadSettings)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.IO.Stream"/> representing a GLB file
            </summary>
            <param name="stream">The source <see cref="T:System.IO.Stream"/>.</param>
            <param name="settings">Optional settings.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.GetSatellitePaths(System.String)">
            <summary>
            Gets the list of satellite / dependency files for a given glTF file.
            This includes binary blobs and texture images.
            </summary>
            <param name="filePath">A valid file path.</param>
            <returns>A list of relative file paths, as found in the file.</returns>
            <remarks>
            This method is designed to be as fast as possible, and it avoids performing much
            of the validation and parsing of a glTf file, it just blindly looks for URI fields.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.Save(System.String,SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a file in GLTF or GLB based on the extension of <paramref name="filePath"/>.
            </summary>
            <param name="filePath">A valid file path to write to.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.SaveGLB(System.String,SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a file in GLB format.
            </summary>
            <param name="filePath">A valid file path to write to.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.SaveGLTF(System.String,SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a file in GLTF format.
            </summary>
            <param name="filePath">A valid file path to write to.</param>
            <param name="settings">Optional settings.</param>
            <remarks>
            Satellite files like buffers and images are also saved with the file name formatted as "FILE_{Index}.EXT".
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.GetJSON(System.Boolean)">
            <summary>
            Gets the JSON document of this <see cref="T:SharpGLTF.Schema2.ModelRoot"/>.
            </summary>
            <param name="indented">The formatting of the JSON document.</param>
            <returns>A JSON content.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.WriteGLB(SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a <see cref="T:System.Byte"/> array in GLB format.
            </summary>
            <param name="settings">Optional settings.</param>
            <returns>A <see cref="T:System.Byte"/> array containing a GLB file.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.WriteGLB(System.IO.Stream,SharpGLTF.Schema2.WriteSettings)">
            <summary>
            Writes this <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to a <see cref="T:System.IO.Stream"/> in GLB format.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> open for writing.</param>
            <param name="settings">Optional settings.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreateSkin(System.String)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.Skin"/> instance
            and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalSkins"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Skin"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseTextureSampler(SharpGLTF.Schema2.TextureWrapMode,SharpGLTF.Schema2.TextureWrapMode,SharpGLTF.Schema2.TextureMipMapFilter,SharpGLTF.Schema2.TextureInterpolationFilter)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.TextureSampler"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalTextureSamplers"/>.
            </summary>
            <param name="ws">The <see cref="T:SharpGLTF.Schema2.TextureWrapMode"/> in the S axis.</param>
            <param name="wt">The <see cref="T:SharpGLTF.Schema2.TextureWrapMode"/> in the T axis.</param>
            <param name="min">A value of <see cref="T:SharpGLTF.Schema2.TextureMipMapFilter"/>.</param>
            <param name="mag">A value of <see cref="T:SharpGLTF.Schema2.TextureInterpolationFilter"/>.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.TextureSampler"/> instance, or null if all the arguments are default values.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseTexture(SharpGLTF.Schema2.Image,SharpGLTF.Schema2.TextureSampler)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Texture"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalTextures"/>.
            </summary>
            <param name="primary">The source <see cref="T:SharpGLTF.Schema2.Image"/>.</param>
            <param name="sampler">The source <see cref="T:SharpGLTF.Schema2.TextureSampler"/>.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Texture"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.UseTexture(SharpGLTF.Schema2.Image,SharpGLTF.Schema2.Image,SharpGLTF.Schema2.TextureSampler)">
            <summary>
            Creates or reuses a <see cref="T:SharpGLTF.Schema2.Texture"/> instance
            at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalTextures"/>.
            </summary>
            <param name="primary">The source <see cref="T:SharpGLTF.Schema2.Image"/>.</param>
            <param name="fallback">The source <see cref="T:SharpGLTF.Schema2.Image"/>.</param>
            <param name="sampler">The source <see cref="T:SharpGLTF.Schema2.TextureSampler"/>.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.Texture"/> instance.</returns>
        </member>
        <member name="P:SharpGLTF.Schema2.ModelRoot.LogicalPunctualLights">
            <summary>
            Gets A collection of <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instances.
            </summary>
            <remarks>
            This is part of <see href="https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual">KHR_lights_punctual</see> extension.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreatePunctualLight(SharpGLTF.Schema2.PunctualLightType)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instance and
            adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalPunctualLights"/>.
            </summary>
            <param name="lightType">A value of <see cref="T:SharpGLTF.Schema2.PunctualLightType"/> describing the type of light to create.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ModelRoot.CreatePunctualLight(System.String,SharpGLTF.Schema2.PunctualLightType)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instance.
            and adds it to <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalPunctualLights"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="lightType">A value of <see cref="T:SharpGLTF.Schema2.PunctualLightType"/> describing the type of light to create.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.PunctualLight"/> instance.</returns>
        </member>
        <member name="T:SharpGLTF.Schema2.Image">
            <summary>
            Image data used to create a texture. Image can be referenced by URI or `bufferView` index. `mimeType` is required in the latter case.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.Image._SatelliteContent">
            <summary>
            this is the not a raw bitmap, but tha actual compressed image in PNG or JPEG.
            </summary>
            <remarks>
            When a model is loaded, the image file is loaded into memory and assigned to this
            field, and the <see cref="F:SharpGLTF.Schema2.Image._uri"/> and <see cref="F:SharpGLTF.Schema2.Image._mimeType"/> fields are nullified.
            When writing a gltf file with external images, the <see cref="F:SharpGLTF.Schema2.Image._uri"/> and <see cref="F:SharpGLTF.Schema2.Image._mimeType"/>
            fields are briefly reassigned so the JSON can be serialized correctly.
            After serialization <see cref="F:SharpGLTF.Schema2.Image._uri"/> and <see cref="F:SharpGLTF.Schema2.Image._mimeType"/> fields are set back to null.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.Image.LogicalIndex">
            <summary>
            Gets the zero-based index of this <see cref="T:SharpGLTF.Schema2.Image"/> at <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalImages"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Image.MemoryImage">
            <summary>
            Gets or sets the in-memory representation of the image file.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.Image.Content">
            <summary>
            Gets or sets the in-memory representation of the image file.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Image.GetSatelliteContent">
            <summary>
            Retrieves the image file as a segment of bytes.
            </summary>
            <returns>A <see cref="T:System.ArraySegment`1"/> segment containing the image file, which can be a PNG, JPG, DDS or WEBP format.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.Image.SetSatelliteContent(SharpGLTF.Memory.MemoryImage)">
            <summary>
            Initializes this <see cref="T:SharpGLTF.Schema2.Image"/> with an image stored in a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="content">A <see cref="T:System.Byte"/> array containing a PNG or JPEG image.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Image.TransferToInternalBuffer">
            <summary>
            If the image is stored externaly as an image file,
            it creates a new BufferView and stores the image in the BufferView.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Image._WriteToInternal">
            <summary>
            Called internally by the serializer when the image content is to be embedded into the JSON document.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.Image._WriteToSatellite(SharpGLTF.IO.WriteContext,System.String)">
            <summary>
            Called internally by the serializer when the image content is to be written as an external file
            </summary>
            <param name="writer">The satellite asset writer</param>
            <param name="satelliteUri">A local satellite URI</param>
        </member>
        <member name="M:SharpGLTF.Schema2.Image._ClearAfterWrite">
            <summary>
            Called by the serializer immediatelly after
            calling <see cref="M:SharpGLTF.Schema2.Image._WriteToSatellite(SharpGLTF.IO.WriteContext,System.String)"/>
            or <see cref="M:SharpGLTF.Schema2.Image._WriteToInternal"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.IAnimationSampler`1.InterpolationMode">
            <summary>
            Gets a value indicating the interpolation being used.
            If the value is <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.STEP"/> or <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.LINEAR"/>, <see cref="M:SharpGLTF.Schema2.IAnimationSampler`1.GetLinearKeys"/> should be used.
            If the value is <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.CUBICSPLINE"/>, <see cref="M:SharpGLTF.Schema2.IAnimationSampler`1.GetCubicKeys"/> should be used.
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.IAnimationSampler`1.GetLinearKeys">
            <summary>
            Gets the linear animation entries for <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.STEP"/> and <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.LINEAR"/> modes.
            </summary>
            <returns>A sequence of Time-Value keys.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.IAnimationSampler`1.GetCubicKeys">
            <summary>
            Gets the cubic animation entries fot <see cref="F:SharpGLTF.Schema2.AnimationInterpolationMode.CUBICSPLINE"/> mode.
            </summary>
            <returns>A sequence of Time-(TangentIn,Value,TangentOut) keys.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.IAnimationSampler`1.CreateCurveSampler(System.Boolean)">
            <summary>
            Creates an interpolation sampler that can be used to query the value of the curve at any time.
            </summary>
            <param name="isolateMemory">
            If true, this call will do an internal copy of the curve data,
            so it will not reference the source date in the original document.
            </param>
            <returns>An object that can be used to sample the curve at any time.</returns>
            <remarks>
            When <paramref name="isolateMemory"/> is true, it also arranges the data so it's much
            faster to query.
            </remarks>
        </member>
        <member name="T:SharpGLTF.Schema2._StaticBufferBuilder">
            <summary>
            Utility class to merge BufferViews into a single big buffer
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.ICamera">
            <summary>
            Common interface for <see cref="T:SharpGLTF.Schema2.CameraOrthographic"/> and <see cref="T:SharpGLTF.Schema2.CameraPerspective"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.ExtraProperties.Extensions">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.IO.JsonSerializable"/> instances.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.ExtraProperties.Extras">
            <summary>
            Gets the extras value, where the value can be either an intrinsic type <see cref="T:System.TypeCode"/> , a <see cref="T:SharpGLTF.IO.JsonList"/> or a <see cref="T:SharpGLTF.IO.JsonDictionary"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtraProperties.GetLogicalChildren">
            <summary>
            Gets a collection of <see cref="T:SharpGLTF.Schema2.ExtraProperties"/> instances stored by this object.
            </summary>
            <returns>A collection of <see cref="T:SharpGLTF.Schema2.ExtraProperties"/> instances.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtraProperties.TryUseExtrasAsDictionary(System.Boolean)">
            <summary>
            Gets the Extras property as a <see cref="T:SharpGLTF.IO.JsonDictionary"/>
            </summary>
            <param name="overwrite">true if the current value is to be replaced by a <see cref="T:SharpGLTF.IO.JsonDictionary"/> instance.</param>
            <returns>A <see cref="T:SharpGLTF.IO.JsonDictionary"/> instance or null.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtraProperties.TryUseExtrasAsList(System.Boolean)">
            <summary>
            Gets the Extras property as a <see cref="T:SharpGLTF.IO.JsonList"/>
            </summary>
            <param name="overwrite">true if the current value is to be replaced by a <see cref="T:SharpGLTF.IO.JsonList"/> instance.</param>
            <returns>A <see cref="T:SharpGLTF.IO.JsonDictionary"/> instance or null.</returns>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtraProperties.SerializeProperties(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Writes the properties of the current instance to a <see cref="T:System.Text.Json.Utf8JsonWriter"/>.
            </summary>
            <param name="writer">The target writer.</param>
        </member>
        <member name="M:SharpGLTF.Schema2.ExtraProperties.DeserializeProperty(System.String,System.Text.Json.Utf8JsonReader@)">
            <summary>
            Reads the properties of the current instance from a <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
            <param name="property">The name of the property.</param>
            <param name="reader">The source reader.</param>
        </member>
        <member name="T:SharpGLTF.Schema2.MaterialChannel">
            <summary>
            Represents a material sub-channel, which usually contains a texture.
            </summary>
            <remarks>
            This structure is not part of the gltf schema,
            but wraps several components of the material
            to have an homogeneous and easy to use API.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Schema2.MaterialChannel.Parameter">
            <summary>
            Gets or sets the <see cref="T:System.Numerics.Vector4"/> parameter of this channel.
            The meaning of the <see cref="F:System.Numerics.Vector4.X"/>, <see cref="F:System.Numerics.Vector4.Y"/>. <see cref="F:System.Numerics.Vector4.Z"/> and <see cref="F:System.Numerics.Vector4.W"/>
            depend on the type of channel.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MaterialChannel.Texture">
            <summary>
            Gets the <see cref="P:SharpGLTF.Schema2.MaterialChannel.Texture"/> instance used by this Material, or null.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.MaterialChannel.TextureCoordinate">
            <summary>
            Gets the index of texture's TEXCOORD_[index] attribute used for texture coordinate mapping.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.ReadSettings">
            <summary>
            Settings to customize how <see cref="T:SharpGLTF.Schema2.ModelRoot"/> files are read.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.ReadSettings.Validation">
            <summary>
            Gets or sets a value indicating the level of validation applied when loading a file.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.ResourceWriteMode">
            <summary>
            Determines how resources are written.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ResourceWriteMode.Default">
            <summary>
            Use the most appropiate mode.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ResourceWriteMode.SatelliteFile">
            <summary>
            Resources will be stored as external satellite files.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ResourceWriteMode.Embedded">
            <summary>
            Resources will be embedded into the JSON encoded in MIME64.
            </summary>
        </member>
        <member name="F:SharpGLTF.Schema2.ResourceWriteMode.BufferView">
            <summary>
            Resources will be stored as internal binary buffers. Valid only for <see cref="T:SharpGLTF.Schema2.Image"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.ImageWriting">
            <summary>
            Gets or sets a value indicating how to write the images of the model.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.ImageWriteCallback">
            <summary>
            Gets or sets a callback hook that controls the image writing behavior.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.MergeBuffers">
            <summary>
            Gets or sets a value indicating whether to merge all the buffers in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalBuffers"/> into a single buffer.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.JsonIndented">
            <summary>
            Gets or sets a value indicating how to format the JSON document of the glTF.
            </summary>
        </member>
        <member name="P:SharpGLTF.Schema2.WriteSettings.Validation">
            <summary>
            Gets or sets a value indicating the level of validation applied when loading a file.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.IConvertibleToGltf2">
            <summary>
            Defines a method that converts the implementing reference to a <see cref="T:SharpGLTF.Schema2.ModelRoot"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2.PunctualLightType">
            <summary>
            Defines all the types of <see cref="T:SharpGLTF.Schema2.PunctualLight"/> types.
            </summary>
        </member>
        <member name="T:SharpGLTF.Schema2._Schema2Extensions">
            <summary>
            Extensions used internally.
            </summary>
        </member>
        <member name="T:SharpGLTF.IO.FileReaderCallback">
            <summary>
            Callback used for loading associated files of current model.
            </summary>
            <param name="assetName">the asset relative path.</param>
            <returns>The file contents as a <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="T:SharpGLTF.IO.ReadContext">
            <summary>
            Context for reading a <see cref="T:SharpGLTF.Schema2.ModelRoot"/>.
            </summary>
        </member>
        <member name="F:SharpGLTF.IO.ReadContext._BinaryChunk">
            <summary>
            When loading a GLB, this represents the internal binary data chunk.
            </summary>
        </member>
        <member name="M:SharpGLTF.IO.ReadContext.OpenFile(System.String)">
            <summary>
            Opens a file relative to this <see cref="T:SharpGLTF.IO.ReadContext"/>.
            </summary>
            <param name="fileName">A relative file Name path.</param>
            <returns>A <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:SharpGLTF.IO.ReadContext.ReadSchema2(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.IO.Stream"/> containing a GLB or a GLTF file.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.IO.ReadContext.ReadTextSchema2(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.IO.Stream"/> containing a GLTF file.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.IO.ReadContext.ReadBinarySchema2(System.IO.Stream)">
            <summary>
            Reads a <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance from a <see cref="T:System.IO.Stream"/> containing a GLB file.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> to read from.</param>
            <returns>A <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</returns>
        </member>
        <member name="T:SharpGLTF.IO.FileWriterCallback">
            <summary>
            Callback used for saving associated files of the current model.
            </summary>
            <param name="assetName">The asset relative path.</param>
            <param name="assetData">The file contents as a <see cref="T:System.Byte"/> array.</param>
        </member>
        <member name="T:SharpGLTF.IO.ImageWriterCallback">
            <summary>
            Callback to control the image writing behavior.
            </summary>
            <param name="context">The current model writing context.</param>
            <param name="assetName">The default gltf URI used to reference the image.</param>
            <param name="image">The image to write.</param>
            <returns>The final glTF URI. If it didn't change, return the value of <para name="assetName"/>.</returns>
        </member>
        <member name="T:SharpGLTF.IO.WriteContext">
            <summary>
            Configuration settings for writing model files.
            </summary>
        </member>
        <member name="M:SharpGLTF.IO.WriteContext.WithDeepCloneSettings">
            <summary>
            These settings are used exclusively by <see cref="M:SharpGLTF.Schema2.ModelRoot.DeepClone"/>.
            </summary>
            <returns>A <see cref="T:SharpGLTF.IO.WriteContext"/> instance to be used by <see cref="M:SharpGLTF.Schema2.ModelRoot.DeepClone"/></returns>
        </member>
        <member name="P:SharpGLTF.IO.WriteContext._UpdateSupportedExtensions">
            <summary>
            Gets a value indicating whether to scan the whole model for used extensions.
            </summary>
        </member>
        <member name="P:SharpGLTF.IO.WriteContext._NoCloneWatchdog">
            <summary>
            Gets a value indicating whether creating a defensive copy before serialization is not allowed.
            </summary>
        </member>
        <member name="M:SharpGLTF.IO.WriteContext.WriteTextSchema2(System.String,SharpGLTF.Schema2.ModelRoot)">
            <summary>
            Writes <paramref name="model"/> to this context.
            </summary>
            <param name="baseName">The base name to use for asset files, without extension.</param>
            <param name="model">The <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to write.</param>
        </member>
        <member name="M:SharpGLTF.IO.WriteContext.WriteBinarySchema2(System.String,SharpGLTF.Schema2.ModelRoot)">
            <summary>
            Writes <paramref name="model"/> to this context.
            </summary>
            <param name="baseName">The base name to use for asset files, without extension.</param>
            <param name="model">The <see cref="T:SharpGLTF.Schema2.ModelRoot"/> to write.</param>
        </member>
        <member name="M:SharpGLTF.IO.WriteContext._ValidateBeforeWriting(SharpGLTF.Schema2.ModelRoot)">
            <summary>
            This needs to be called immediately before writing to json,
            but immediately after preprocessing and buffer setup, so the model can be correctly validated.
            </summary>
            <param name="model">The model to validate.</param>
        </member>
        <member name="M:SharpGLTF.IO.WriteContext._PreprocessSchema2(SharpGLTF.Schema2.ModelRoot,System.Boolean,System.Boolean)">
            <summary>
            Prepares the model for writing with the appropiate settings, creating a defensive copy if neccesary.
            </summary>
            <param name="model">The source <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance.</param>
            <param name="imagesAsBufferViews">true if images should be stored as buffer views.</param>
            <param name="mergeBuffers">true if it's required the model must have a single buffer.</param>
            <returns>The source <see cref="T:SharpGLTF.Schema2.ModelRoot"/> instance, or a cloned and modified instance if current settings required it.</returns>
        </member>
        <member name="T:SharpGLTF.Memory.AttributeFormat">
            <summary>
            Defines the formatting in which a byte sequence can be encoded/decoded to attribute elements.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.ColorArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an array of <see cref="T:System.Numerics.Vector4"/> values.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.ColorArray.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.ColorArray"/> struct.
            </summary>
            <param name="source">The array to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="dimensions">The number of elements per item. Currently only values 3 and 4 are supported.</param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
            <param name="defaultW">If <paramref name="dimensions"/> is 3, the W values are filled with this value</param>
        </member>
        <member name="M:SharpGLTF.Memory.ColorArray.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.ColorArray"/> struct.
            </summary>
            <param name="source">The array to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.Numerics.Vector4"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="dimensions">The number of elements per item. Currently only values 3 and 4 are supported.</param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
            <param name="defaultW">If <paramref name="dimensions"/> is 3, the W values are filled with this value</param>
        </member>
        <member name="T:SharpGLTF.Memory.FloatingAccessor">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an array of strided <see cref="T:System.Single"/> values.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.ScalarArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.ScalarArray.#ctor(System.Memory{System.Byte},System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.ScalarArray"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="M:SharpGLTF.Memory.ScalarArray.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.ScalarArray"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.Single"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="T:SharpGLTF.Memory.Vector2Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.Vector2Array.#ctor(System.Memory{System.Byte},System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector2Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="M:SharpGLTF.Memory.Vector2Array.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector2Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">>The number of <see cref="T:System.Numerics.Vector2"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="T:SharpGLTF.Memory.Vector3Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.Vector3Array.#ctor(System.Memory{System.Byte},System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector3Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="M:SharpGLTF.Memory.Vector3Array.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector3Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.Numerics.Vector3"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="T:SharpGLTF.Memory.Vector4Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.Vector4Array.#ctor(System.Memory{System.Byte},System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector4Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="M:SharpGLTF.Memory.Vector4Array.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,System.Int32,SharpGLTF.Schema2.EncodingType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.Vector4Array"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.Numerics.Vector3"/> items in <paramref name="source"/>.</param>
            <param name="byteStride">
            The byte stride between elements.
            If the value is zero, the size of the item is used instead.
            </param>
            <param name="encoding">A value of <see cref="T:SharpGLTF.Schema2.EncodingType"/>.</param>
            <param name="normalized">True if values are normalized.</param>
        </member>
        <member name="T:SharpGLTF.Memory.QuaternionArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.Matrix4x4Array">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MultiArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an IList{Single[]}/>.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.IntegerArray">
            <summary>
            Wraps an encoded <see cref="T:System.Memory`1"/> and exposes it as an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.IntegerArray.#ctor(System.Memory{System.Byte},SharpGLTF.Schema2.IndexEncodingType)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.IntegerArray"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="encoding">Byte encoding.</param>
        </member>
        <member name="M:SharpGLTF.Memory.IntegerArray.#ctor(System.Memory{System.Byte},System.Int32,System.Int32,SharpGLTF.Schema2.IndexEncodingType)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Memory.IntegerArray"/> struct.
            </summary>
            <param name="source">The array range to wrap.</param>
            <param name="byteOffset">The zero-based index of the first <see cref="T:System.Byte"/> in <paramref name="source"/>.</param>
            <param name="itemsCount">The number of <see cref="T:System.UInt32"/> items in <paramref name="source"/>.</param>
            <param name="encoding">Byte encoding.</param>
        </member>
        <member name="P:SharpGLTF.Memory.IntegerArray.Count">
            <summary>
            Gets the number of elements in the range delimited by the <see cref="T:SharpGLTF.Memory.IntegerArray"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MemoryAccessInfo">
            <summary>
            Defines the memory encoding pattern for an arbitrary <see cref="T:System.ArraySegment`1"/>.
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.Name">
            <summary>
            If set, it can be used to identify the data with an attribute name: POSITION, NORMAL, etc
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.ByteOffset">
            <summary>
            number of bytes to advance to the beginning of the first item.
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.ItemsCount">
            <summary>
            Total number of items
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.ByteStride">
            <summary>
            number of bytes to advance to the beginning of the next item
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.Dimensions">
            <summary>
            number of sub-elements of each item.
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.Encoding">
            <summary>
            byte encoding of sub-elements of each item.
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryAccessInfo.Normalized">
            <summary>
            normalization of sub-elements of each item.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryAccessInfo.StepByteLength">
            <summary>
            number of bytes to advance to the next item.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MemoryAccessInfo.AttributeComparer">
            <summary>
            Comparer used to sort attribute names in a friendly order.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MemoryAccessor">
            <summary>
            Wraps a <see cref="T:System.ArraySegment`1"/> decoding it and exposing its content as arrays of different types.
            </summary>
        </member>
        <member name="T:SharpGLTF.Memory.MemoryImage">
            <summary>
            Represents an image file stored as an in-memory byte array
            </summary>
        </member>
        <member name="F:SharpGLTF.Memory.MemoryImage.DEFAULT_PNG_IMAGE">
            <summary>
            Represents a 4x4 white PNG image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.Content">
            <summary>
            Gets the file bytes of the image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.SourcePath">
            <summary>
            Gets the source path of this image, or null if the image cannot be tracked to a file path (as it is the case of embedded images)
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsPng">
            <summary>
            Gets a value indicating whether this object represents a valid PNG image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsJpg">
            <summary>
            Gets a value indicating whether this object represents a valid JPG image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsDds">
            <summary>
            Gets a value indicating whether this object represents a valid DDS image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsWebp">
            <summary>
            Gets a value indicating whether this object represents a valid WEBP image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.IsValid">
            <summary>
            Gets a value indicating whether this object represents a valid image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.FileExtension">
            <summary>
            Gets the most appropriate extension string for this image.
            </summary>
        </member>
        <member name="P:SharpGLTF.Memory.MemoryImage.MimeType">
            <summary>
            Gets the most appropriate Mime type string for this image.
            </summary>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.Open">
            <summary>
            Opens the image file for reading its contents
            </summary>
            <returns>A read only <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.SaveToFile(System.String)">
            <summary>
            Saves the image stored in this <see cref="T:SharpGLTF.Memory.MemoryImage"/> to a file.
            </summary>
            <param name="filePath">A destination file path, with an extension matching <see cref="P:SharpGLTF.Memory.MemoryImage.FileExtension"/></param>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage._GetBuffer">
            <summary>
            Gets the internal buffer.
            </summary>
            <returns>An array buffer.</returns>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.ToMime64(System.Boolean)">
            <summary>
            Returns this image file, enconded as a Mime64 string.
            </summary>
            <param name="withPrefix">true to prefix the string with a header.</param>
            <returns>A mime64 string.</returns>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.TryParseMime64(System.String,System.Byte[]@)">
            <summary>
            Tries to parse a Mime64 string to a Byte array.
            </summary>
            <param name="mime64content">The Mime64 string source.</param>
            <param name="data">if decoding succeeds, it will contain the decoded data</param>
            <returns>true if decoding succeeded.</returns>
        </member>
        <member name="M:SharpGLTF.Memory.MemoryImage.IsImageOfType(System.String)">
            <summary>
            identifies an image of a specific type.
            </summary>
            <param name="format">A string representing the format: png, jpg, dds...</param>
            <returns>True if this image is of the given type.</returns>
        </member>
        <member name="T:SharpGLTF.Memory.SparseArray`1">
            <summary>
            Special accessor to wrap over a base accessor and a sparse accessor
            </summary>
            <typeparam name="T">An unmanage structure type.</typeparam>
        </member>
        <member name="T:SharpGLTF.Runtime.AnimatableProperty`1">
            <summary>
            Defines an animatable property with a default value and a collection of animation curve tracks.
            </summary>
            <typeparam name="T">A type that can be interpolated with <see cref="T:SharpGLTF.Animations.ICurveSampler`1"/></typeparam>
        </member>
        <member name="P:SharpGLTF.Runtime.AnimatableProperty`1.Value">
            <summary>
            Gets the default value of this instance.
            When animations are disabled, or there's no animation track available, this will be the returned value.
            </summary>
        </member>
        <member name="M:SharpGLTF.Runtime.AnimatableProperty`1.GetValueAt(System.String,System.Single)">
            <summary>
            Evaluates the value of this <see cref="T:SharpGLTF.Runtime.AnimatableProperty`1"/> at a given <paramref name="offset"/> for a given <paramref name="trackName"/>.
            </summary>
            <param name="trackName">An animation track name, or null.</param>
            <param name="offset">A time offset within the given animation track.</param>
            <returns>The evaluated value taken from the animation <paramref name="trackName"/>, or <see cref="P:SharpGLTF.Runtime.AnimatableProperty`1.Value"/> if a track was not found.</returns>
        </member>
        <member name="T:SharpGLTF.Runtime.DrawableTemplate">
            <summary>
            Defines a reference to a drawable mesh
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.DrawableTemplate.LogicalMeshIndex">
            <summary>
            Gets the index of a <see cref="T:SharpGLTF.Schema2.Mesh"/> in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMeshes"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Runtime.RigidDrawableTemplate">
            <summary>
            Defines a reference to a drawable rigid mesh
            </summary>
        </member>
        <member name="T:SharpGLTF.Runtime.SkinnedDrawableTemplate">
            <summary>
            Defines a reference to a drawable skinned mesh
            </summary>
        </member>
        <member name="T:SharpGLTF.Runtime.NodeInstance">
            <summary>
            Defines a node of a scene graph in <see cref="T:SharpGLTF.Runtime.SceneInstance"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.NodeInstance.TransformChainIsDirty">
            <summary>
            Gets a value indicating whether any of the transforms down the scene tree has been modified.
            </summary>
        </member>
        <member name="T:SharpGLTF.Runtime.NodeTemplate">
            <summary>
            Defines a hierarchical transform node of a scene graph tree.
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.NodeTemplate.LogicalNodeIndex">
            <summary>
            Gets the index of the source <see cref="T:SharpGLTF.Schema2.Node"/> in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalNodes"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.NodeTemplate.ParentIndex">
            <summary>
            Gets the index of the parent <see cref="T:SharpGLTF.Runtime.NodeTemplate"/> in <see cref="F:SharpGLTF.Runtime.SceneTemplate._NodeTemplates"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.NodeTemplate.ChildIndices">
            <summary>
            Gets the list of indices of the children <see cref="T:SharpGLTF.Runtime.NodeTemplate"/> in <see cref="F:SharpGLTF.Runtime.SceneTemplate._NodeTemplates"/>
            </summary>
        </member>
        <member name="T:SharpGLTF.Runtime.SceneInstance">
            <summary>
            Represents a specific and independent state of a <see cref="T:SharpGLTF.Runtime.SceneTemplate"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.SceneInstance.LogicalNodes">
            <summary>
            Gets a list of all the <see cref="T:SharpGLTF.Runtime.NodeInstance"/> nodes used by this <see cref="T:SharpGLTF.Runtime.SceneInstance"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.SceneInstance.VisualNodes">
            <summary>
            Gets all the <see cref="T:SharpGLTF.Runtime.NodeInstance"/> roots used by this <see cref="T:SharpGLTF.Runtime.SceneInstance"/>.
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.SceneInstance.AnimationTracks">
            <summary>
            Gets all the names of the animations tracks.
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.SceneInstance.DrawableReferencesCount">
            <summary>
            Gets the number of drawable references.
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.SceneInstance.DrawableInstancesCount">
            <summary>
            Gets the number of drawable instances.
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.SceneInstance.DrawableReferences">
            <summary>
            Gets a collection of drawable references, where:
            <list type="bullet">
            <item>
            <term>MeshIndex</term>
            <description>The logical Index of a <see cref="T:SharpGLTF.Schema2.Mesh"/> in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMeshes"/>.</description>
            </item>
            <item>
            <term>Transform</term>
            <description>An <see cref="T:SharpGLTF.Transforms.IGeometryTransform"/> that can be used to transform the <see cref="T:SharpGLTF.Schema2.Mesh"/> into world space.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:SharpGLTF.Runtime.SceneInstance.GetDrawableReference(System.Int32)">
            <summary>
            Gets a drawable reference pair, where:
            - MeshIndex is the logical Index of a <see cref="T:SharpGLTF.Schema2.Mesh"/> in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMeshes"/>.
            - Transform is an <see cref="T:SharpGLTF.Transforms.IGeometryTransform"/> that can be used to transform the <see cref="T:SharpGLTF.Schema2.Mesh"/> into world space.
            </summary>
            <param name="index">The index of the drawable reference, from 0 to <see cref="P:SharpGLTF.Runtime.SceneInstance.DrawableReferencesCount"/></param>
            <returns>A drawable reference</returns>
        </member>
        <member name="M:SharpGLTF.Runtime.SceneInstance.GetDrawableInstance(System.Int32)">
            <summary>
            Gets a <see cref="T:SharpGLTF.Runtime.DrawableInstance"/> object, where:
            - Name is the name of this drawable instance. Originally, it was the name of <see cref="T:SharpGLTF.Schema2.Node"/>.
            - MeshIndex is the logical Index of a <see cref="T:SharpGLTF.Schema2.Mesh"/> in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMeshes"/>.
            - Transform is an <see cref="T:SharpGLTF.Transforms.IGeometryTransform"/> that can be used to transform the <see cref="T:SharpGLTF.Schema2.Mesh"/> into world space.
            </summary>
            <param name="index">The index of the drawable reference, from 0 to <see cref="P:SharpGLTF.Runtime.SceneInstance.DrawableInstancesCount"/></param>
            <returns><see cref="T:SharpGLTF.Runtime.DrawableInstance"/> object.</returns>
        </member>
        <member name="T:SharpGLTF.Runtime.SceneTemplate">
            <summary>
            Defines a templatized representation of a <see cref="T:SharpGLTF.Schema2.Scene"/> that can be used
            to create <see cref="T:SharpGLTF.Runtime.SceneInstance"/>, which can help render a scene on a client application.
            </summary>
        </member>
        <member name="M:SharpGLTF.Runtime.SceneTemplate.Create(SharpGLTF.Schema2.Scene,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Runtime.SceneTemplate"/> from a given <see cref="T:SharpGLTF.Schema2.Scene"/>.
            </summary>
            <param name="srcScene">The source <see cref="T:SharpGLTF.Schema2.Scene"/> to templateize.</param>
            <param name="isolateMemory">True if we want to copy data instead of sharing it.</param>
            <returns>A new <see cref="T:SharpGLTF.Runtime.SceneTemplate"/> instance.</returns>
        </member>
        <member name="P:SharpGLTF.Runtime.SceneTemplate.LogicalMeshIds">
            <summary>
            Gets the unique indices of <see cref="T:SharpGLTF.Schema2.Mesh"/> instances in <see cref="P:SharpGLTF.Schema2.ModelRoot.LogicalMeshes"/>
            </summary>
        </member>
        <member name="P:SharpGLTF.Runtime.SceneTemplate.AnimationTracks">
            <summary>
            Gets A collection of animation track names.
            </summary>
        </member>
        <member name="M:SharpGLTF.Runtime.SceneTemplate.CreateInstance">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Runtime.SceneInstance"/> of this <see cref="T:SharpGLTF.Runtime.SceneTemplate"/>
            that can be used to render the scene.
            </summary>
            <returns>A new <see cref="T:SharpGLTF.Runtime.SceneInstance"/> object.</returns>
        </member>
        <member name="T:SharpGLTF.Transforms.AffineTransform">
            <summary>
            Represents an affine transform in 3D space, defined by:
            - A <see cref="T:System.Numerics.Vector3"/> scale.
            - A <see cref="T:System.Numerics.Quaternion"/> rotation.
            - A <see cref="T:System.Numerics.Vector3"/> translation.
            </summary>
            <remarks>
            <see cref="T:SharpGLTF.Transforms.AffineTransform"/> cannot represent skewed matrices. This means
            that it can be used to represent <see cref="T:SharpGLTF.Schema2.Node"/> local transforms,
            but since chained transforms can become skewed, a world transform cannot be
            represented by a <see cref="T:SharpGLTF.Transforms.AffineTransform"/>.
            </remarks>
            <see href="https://github.com/vpenades/SharpGLTF/issues/41"/>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform.Rotation">
            <summary>
            Rotation
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform.Scale">
            <summary>
            Scale
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.AffineTransform.Translation">
            <summary>
            Translation
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.AffineTransform.Matrix">
            <summary>
            Gets the <see cref="T:System.Numerics.Matrix4x4"/> transform of the current <see cref="T:SharpGLTF.Transforms.AffineTransform"/>
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.AffineTransform.Vector3Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
            <summary>
            This method is equivalent to System.Numerics.Vector3.Transform(Vector3 v, Quaternion q)
            </summary>
            <param name="v">The vector to transform</param>
            <param name="q">The transform rotation</param>
            <returns>The rotated vector</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Matrix4x4 from the given components.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.CreateTranslation(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="xPosition">The amount to translate on the X-axis.</param>
            <param name="yPosition">The amount to translate on the Y-axis.</param>
            <param name="zPosition">The amount to translate on the Z-axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.CreateScale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="xScale">Value to scale by on the X-axis.</param>
            <param name="yScale">Value to scale by on the Y-axis.</param>
            <param name="zScale">Value to scale by on the Z-axis.</param>
            <returns>The scaling matrix.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.CreateFromQuaternion(System.Numerics.Quaternion)">
            <summary>
            Creates a rotation matrix from the given Quaternion rotation value.
            </summary>
            <param name="quaternion">The source Quaternion.</param>
            <returns>The rotation matrix.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Explicit(SharpGLTF.Transforms.Matrix4x4Double)~System.Numerics.Matrix4x4">
            <summary>
            Converts a <see cref="T:SharpGLTF.Transforms.Matrix4x4Double"/> to a <see cref="T:System.Numerics.Matrix4x4"/>
            </summary>
            <param name="mat">The matrix to convert.</param>
            <remarks>
            Since converting From double precission to single precission
            implies a loss of precission, this conversion is explicit, so
            developers will be aware of when the precission loss is happening.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Implicit(System.Numerics.Matrix4x4)~SharpGLTF.Transforms.Matrix4x4Double">
            <summary>
            converts from <see cref="T:System.Numerics.Matrix4x4"/> to <see cref="T:SharpGLTF.Transforms.Matrix4x4Double"/>
            </summary>
            <param name="mat">The matrix to convert.</param>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M11">
            <summary>
            Value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M12">
            <summary>
            Value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M13">
            <summary>
            Value at row 1, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M14">
            <summary>
            Value at row 1, column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M21">
            <summary>
            Value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M22">
            <summary>
            Value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M23">
            <summary>
            Value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M24">
            <summary>
            Value at row 2, column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M31">
            <summary>
            Value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M32">
            <summary>
            Value at row 3, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M33">
            <summary>
            Value at row 3, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M34">
            <summary>
            Value at row 3, column 4 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M41">
            <summary>
            Value at row 4, column 1 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M42">
            <summary>
            Value at row 4, column 2 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M43">
            <summary>
            Value at row 4, column 3 of the matrix.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.Matrix4x4Double.M44">
            <summary>
            Value at row 4, column 4 of the matrix.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Equality(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Returns a boolean indicating whether the given two matrices are equal.
            </summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Inequality(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Returns a boolean indicating whether the given two matrices are not equal.
            </summary>
            <param name="value1">The first matrix to compare.</param>
            <param name="value2">The second matrix to compare.</param>
            <returns>True if the given matrices are not equal; False if they are equal.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.Equals(SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Returns a boolean indicating whether this matrix instance is equal to the other given matrix.
            </summary>
            <param name="other">The matrix to compare this instance to.</param>
            <returns>True if the matrices are equal; False otherwise.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.Equals(System.Object)">
            <summary>
            Returns a boolean indicating whether the given Object is equal to this matrix instance.
            </summary>
            <param name="obj">The Object to compare against.</param>
            <returns>True if the Object is equal to this matrix; False otherwise.</returns>
        </member>
        <member name="P:SharpGLTF.Transforms.Matrix4x4Double.Identity">
            <summary>
            Returns the multiplicative identity matrix.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.Matrix4x4Double.Translation">
            <summary>
            Gets or sets the translation component of this matrix.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.Invert(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double@)">
            <summary>
            Attempts to calculate the inverse of the given matrix. If successful, result will contain the inverted matrix.
            </summary>
            <param name="matrix">The source matrix to invert.</param>
            <param name="result">If successful, contains the inverted matrix.</param>
            <returns>True if the source matrix could be inverted; False otherwise.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.Multiply(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Double.op_Multiply(SharpGLTF.Transforms.Matrix4x4Double,SharpGLTF.Transforms.Matrix4x4Double)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="value1">The first source matrix.</param>
            <param name="value2">The second source matrix.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Factory.CreateFrom(System.Nullable{System.Numerics.Matrix4x4},System.Nullable{System.Numerics.Vector3},System.Nullable{System.Numerics.Quaternion},System.Nullable{System.Numerics.Vector3})">
            <summary>
            Evaluates a <see cref="T:System.Numerics.Matrix4x4"/> transform based on the available parameters.
            </summary>
            <param name="transform">A <see cref="T:System.Numerics.Matrix4x4"/> instance, or null.</param>
            <param name="scale">A <see cref="T:System.Numerics.Vector3"/> instance, or null.</param>
            <param name="rotation">A <see cref="T:System.Numerics.Quaternion"/> instance, or null.</param>
            <param name="translation">A <see cref="T:System.Numerics.Vector3"/> instance, or null.</param>
            <returns>A <see cref="T:System.Numerics.Matrix4x4"/> transform.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Matrix4x4Factory.NormalizeMatrix(System.Numerics.Matrix4x4@)">
            <summary>
            Normalizes the axis of the given matrix, to make it orthogonal.
            </summary>
            <param name="xform">The <see cref="T:System.Numerics.Matrix4x4"/> to normalize.</param>
        </member>
        <member name="T:SharpGLTF.Transforms.IGeometryTransform">
            <summary>
            Interface for a mesh transform object
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.IGeometryTransform.Visible">
            <summary>
            Gets a value indicating whether the current <see cref="T:SharpGLTF.Transforms.IGeometryTransform"/> will render visible geometry.
            </summary>
            <remarks>
            When this value is false, a runtime should skip rendering any geometry using
            this <see cref="T:SharpGLTF.Transforms.IGeometryTransform"/> instance, since it will not be visible anyway.
            </remarks>
        </member>
        <member name="P:SharpGLTF.Transforms.IGeometryTransform.FlipFaces">
            <summary>
            Gets a value indicating whether the triangles need to be flipped to render correctly.
            </summary>
            <remarks>
            When this value is true, a runtime rendering triangles should inverse the face culling.
            </remarks>
        </member>
        <member name="F:SharpGLTF.Transforms.MorphTransform._Weights">
            <summary>
            Represents a sparse collection of weights where:
            - Index of value <see cref="F:SharpGLTF.Transforms.MorphTransform.COMPLEMENT_INDEX"/> points to the Mesh master positions.
            - All other indices point to Mesh MorphTarget[index] positions.
            </summary>
        </member>
        <member name="F:SharpGLTF.Transforms.MorphTransform._AbsoluteMorphTargets">
            <summary>
            True if morph targets represent absolute values.
            False if morph targets represent values relative to master value.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.MorphTransform.MorphWeights">
            <summary>
            Gets the current morph weights to use for morph target blending. <see cref="F:SharpGLTF.Transforms.MorphTransform.COMPLEMENT_INDEX"/> represents the index for the base geometry.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.MorphTransform.AbsoluteMorphTargets">
            <summary>
            Gets a value indicating whether morph target values are absolute, and not relative to the master value.
            </summary>
        </member>
        <member name="P:SharpGLTF.Transforms.SkinnedTransform.SkinMatrices">
            <summary>
            Gets the collection of the current, final matrices to use for skinning
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.SkinnedTransform.CalculateInverseBinding(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
            <summary>
            Calculates the inverse bind matrix to use for runtime skinning.
            </summary>
            <param name="meshWorldTransform">The world space <see cref="T:System.Numerics.Matrix4x4"/> of the mesh at the time of binding (POSE).</param>
            <param name="jointWorldTransform">The world space <see cref="T:System.Numerics.Matrix4x4"/> of the given bone joint at the time of binding (POSE).</param>
            <returns>A <see cref="T:System.Numerics.Matrix4x4"/> representing the inverse bind transform.</returns>
        </member>
        <member name="T:SharpGLTF.Transforms.Projection">
            <summary>
            Utility class to calculate camera matrices
            </summary>
            <see href="https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#projection-matrices"/>
        </member>
        <member name="M:SharpGLTF.Transforms.Projection.CreateOrthographicMatrix(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates an orthographic projection matrix.
            </summary>
            <param name="xmag">Magnification in the X axis.</param>
            <param name="ymag">Magnification in the Y axis.</param>
            <param name="znear">Distance to the near pane in the Z axis.</param>
            <param name="zfar">Distance to the far plane in the Z axis.</param>
            <returns>A projection matrix</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.Projection.CreatePerspectiveMatrix(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates a perspective projection matrix.
            </summary>
            <param name="aspectRatio">The aspect ratio between horizontal and vertical. (optional)</param>
            <param name="yfov">The vertical field of view, in radians.</param>
            <param name="znear">Distance to the near pane in the Z axis.</param>
            <param name="zfar">Distance to the far plane in the Z axis. Optionally, this value can be positive infinity</param>
            <returns>A projection matrix</returns>
        </member>
        <member name="T:SharpGLTF.Transforms.SparseWeight8">
            <summary>
            Represents a sparse collection of non zero weight values, with a maximum of 8 weights.
            </summary>
            <remarks>
            <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> is being used in two different contexts:
            - As an utility class to define per vertex joint weights in mesh skinning.
            - As an animation key in morph targets; a mesh can have many morph targets, but realistically and due to GPU limitations, only up to 8 morph targets can be blended at the same time.
            </remarks>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Create(System.Single[])">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> from a weights collection.
            If there's more than 8 non zero values, the 8 most representative values are taken.
            </summary>
            <param name="weights">A sequence of weight values.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Create(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> from a weights collection.
            If there's more than 8 non zero values, the 8 most representative values are taken
            </summary>
            <param name="weights">A sequence of weight values.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Create(System.ValueTuple{System.Int32,System.Single}[])">
            <summary>
            Creates a new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> from an indexed weight collection.
            If there's more than 8 non zero values, the 8 most representative values are taken
            </summary>
            <param name="indexedWeights">A sequence of indexed weight values.</param>
            <returns>A <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> instance.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.#ctor(System.Numerics.Vector4@,System.Numerics.Vector4@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> struct.
            </summary>
            <param name="idx0123">The indices of weights 0 to 3.</param>
            <param name="wgt0123">The weights of indices 0 to 3.</param>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.#ctor(System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@,System.Numerics.Vector4@)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> struct.
            </summary>
            <param name="idx0123">The indices of weights 0 to 3.</param>
            <param name="idx4567">The indices of weights 4 to 7.</param>
            <param name="wgt0123">The weights of indices 0 to 3.</param>
            <param name="wgt4567">The weights of indices 4 to 7.</param>
        </member>
        <member name="P:SharpGLTF.Transforms.SparseWeight8.IsWeightless">
            <summary>
            Gets a value indicating whether all the weights in this <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> are zero.
            </summary>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.OrderedByWeight(SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Returns a copy of this <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> where all the
            indices have been reordered by weight in descending order.
            </summary>
            <param name="sparse">The <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> to get ordered.</param>
            <returns>A weight ordered <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.OrderedByIndex(SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Returns a copy of this <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> where all the
            indices have been reordered by index in ascending order.
            </summary>
            <param name="sparse">The <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> to get ordered.</param>
            <returns>An index ordered <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Add(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Adds <paramref name="x"/> with <paramref name="y"/> element wise.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Subtract(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Subtracts <paramref name="y"/> from <paramref name="x"/> element wise.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Multiply(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@)">
            <summary>
            Multiplies <paramref name="x"/> with <paramref name="y"/> element wise.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.Multiply(SharpGLTF.Transforms.SparseWeight8@,System.Single)">
            <summary>
            Multiplies <paramref name="x"/> with <paramref name="y"/> element wise.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.InterpolateLinear(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,System.Single)">
            <summary>
            Interpolates Linearly <paramref name="x"/> with <paramref name="y"/> an <paramref name="amount"/>.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first operand.</param>
            <param name="y">The second operand.</param>
            <param name="amount">The amount of <paramref name="y"/></param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.InterpolateCubic(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,System.Single)">
            <summary>
            Interpolates (<paramref name="x"/> , <paramref name="xt"/>) with (<paramref name="y"/> , <paramref name="yt"/>) an <paramref name="amount"/>.
            If there's more than 8 non zero result values, the 8 most representative values are taken.
            </summary>
            <param name="x">The first value operand.</param>
            <param name="xt">The first tangent operand.</param>
            <param name="y">The second value operand.</param>
            <param name="yt">The second tangent operand.</param>
            <param name="amount">The amount of <paramref name="y"/></param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/></returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8._OperateLinear(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Performs <paramref name="operationFunc"/> over all the elements of the operands.
            </summary>
            <param name="x">The first <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="y">The second <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="operationFunc">The operator function to apply to every element.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8._OperateCubic(SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,SharpGLTF.Transforms.SparseWeight8@,System.Func{System.Single,System.Single,System.Single,System.Single,System.Single})">
            <summary>
            Performs <paramref name="operationFunc"/> over all the elements of the operands.
            </summary>
            <param name="x">The first <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="y">The second <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="z">The third <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="w">The fourth <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> operand.</param>
            <param name="operationFunc">The operator function to apply to every element.</param>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/>.</returns>
        </member>
        <member name="M:SharpGLTF.Transforms.SparseWeight8.GetNormalizedWithComplement(System.Int32)">
            <summary>
            Normalizes the current <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> by adding a complementary weight
            at index <paramref name="complementIndex"/> that resolves <see cref="P:SharpGLTF.Transforms.SparseWeight8.WeightSum"/> to 1.
            </summary>
            <returns>A new <see cref="T:SharpGLTF.Transforms.SparseWeight8"/> with a complementary weight.</returns>
        </member>
        <member name="T:SharpGLTF.Validation.ModelException">
            <summary>
            Represents an exception produced by the serialization or validation of a gltf model.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.SchemaException">
            <summary>
            Represents an exception produced by an invalid JSON document.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.SemanticException">
            <summary>
            Represents an esception produced by invalid values.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.LinkException">
            <summary>
            Represents an exception produced by invalid objects relationships.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.DataException">
            <summary>
            Represents an exception produced by invalid data.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.ValidationContext">
            <summary>
            Utility class used in the process of model validation.
            </summary>
        </member>
        <member name="T:SharpGLTF.Validation.ValidationMode">
            <summary>
            Defines validation modes for reading files.
            </summary>
        </member>
        <member name="F:SharpGLTF.Validation.ValidationMode.Skip">
            <summary>
            Skip validation completely.
            </summary>
        </member>
        <member name="F:SharpGLTF.Validation.ValidationMode.TryFix">
            <summary>
            In some specific cases, the file can be fixed, at which point the errors successfully fixed will be reported as warnings.
            </summary>
        </member>
        <member name="F:SharpGLTF.Validation.ValidationMode.Strict">
            <summary>
            Full validation, any error throws an exception.
            </summary>
        </member>
        <member name="T:SharpGLTF._Extensions">
            <summary>
            Extensions used internally.
            </summary>
        </member>
    </members>
</doc>
