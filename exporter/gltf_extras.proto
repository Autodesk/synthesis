syntax = "proto3";

package synthesis.gltfextras;

import "google/protobuf/any.proto";

/*
Each glTF "mesh" object optionally contains one PhysicalProperties in its extras.
*/
message PhysicalProperties {
    double mass = 2; // kg
    double volume = 3; //cm^3
    double area = 4; // cm^2
    Vector3D centerOfMass = 5;
}

//<editor-fold desc="Joints">

/*
The root glTF object contains an array of Joint objects in its extras.
We're choosing not to include info about the joint geometry, such as Joint.angle, Joint.isFlipped, Joint.offset, etc. as raw brep data is not encoded anyways
*/
message Joint {
    Header header = 1; // no revisionId or description
    Vector3D origin = 2; // In the root component coordinate frame
    bool isLocked = 3;
    bool isSuppressed = 4;

    // There is guaranteed to be a glTF "node" with a matching uuid in the "uuid" property of its extras for each of these.
    string occurrenceOneUUID = 5;
    string occurrenceTwoUUID = 6;

    map<string, google.protobuf.Any> attributes = 7;

    oneof jointMotion {
        RigidJointMotion rigidJointMotion = 8;
        RevoluteJointMotion revoluteJointMotion = 9;
        SliderJointMotion sliderJointMotion = 10;
        CylindricalJointMotion cylindricalJointMotion = 11;
        PinSlotJointMotion pinSlotJointMotion = 12;
        PlanarJointMotion planarJointMotion = 13;
        BallJointMotion ballJointMotion = 14;
    }
}

message RigidJointMotion {}

message RevoluteJointMotion {
    Vector3D rotationAxisVector = 1;
    double rotationValue = 2;
    JointLimits rotationLimits = 3;
}

message SliderJointMotion {
    Vector3D slideDirectionVector = 1;
    double slideValue = 2;
    JointLimits slideLimits = 3;
}

message CylindricalJointMotion {
    Vector3D rotationAxisVector = 1;
    double rotationValue = 2;
    JointLimits rotationLimits = 3;
    double slideValue = 4;
    JointLimits slideLimits = 5;
}

message PinSlotJointMotion {
    Vector3D rotationAxisVector = 1;
    double rotationValue = 2;
    JointLimits rotationLimits = 3;
    Vector3D slideDirectionVector = 4;
    double slideValue = 5;
    JointLimits slideLimits = 6;
}

message PlanarJointMotion {
    Vector3D normalDirectionVector = 1;
    Vector3D primarySlideDirectionVector = 2;
    double primarySlideValue = 3;
    JointLimits primarySlideLimits = 4;
    Vector3D secondarySlideDirectionVector = 5;
    double secondarySlideValue = 6;
    JointLimits secondarySlideLimits = 7;
    double rotationValue = 8;
    JointLimits rotationLimits = 9;
}

message BallJointMotion {
    Vector3D rollDirectionVector = 1;
    double rollValue = 2;
    JointLimits rollLimits = 3;
    Vector3D pitchDirectionVector = 4;
    double pitchValue = 5;
    JointLimits pitchLimits = 6;
    Vector3D yawDirectionVector = 7;
    double yawValue = 8;
    JointLimits yawLimits = 9;
}

message JointLimits {
    bool isMaximumValueEnabled = 1;
    bool isMinimumValueEnabled = 2;
    bool isRestValueEnabled = 3;
    double maximumValue = 4;
    double minimumValue = 5;
    double restValue = 6;
}

//</editor-fold>

message Header {
    string uuid = 1; // generated with apper's item_id and persistent in fusion file
    string name = 2;
}

message Vector3D {
    double x = 1;
    double y = 2;
    double z = 3;
}

