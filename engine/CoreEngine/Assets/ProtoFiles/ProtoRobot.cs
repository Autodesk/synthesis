// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProtoRobot.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Synthesis.Simulator {

  /// <summary>Holder for reflection information generated from ProtoRobot.proto</summary>
  public static partial class ProtoRobotReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtoRobot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoRobotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBQcm90b1JvYm90LnByb3RvEhNTeW50aGVzaXMuU2ltdWxhdG9yIvsBCgpQ",
            "cm90b1JvYm90EhEKCXJvYm90TmFtZRgBIAEoCRIzCghwb3NpdGlvbhgCIAEo",
            "CzIhLlN5bnRoZXNpcy5TaW11bGF0b3IuUHJvdG9WZWN0b3IzEi0KBW5vZGVz",
            "GAMgAygLMh4uU3ludGhlc2lzLlNpbXVsYXRvci5Qcm90b05vZGUSQQoJZHJp",
            "dmVUeXBlGAQgASgOMi4uU3ludGhlc2lzLlNpbXVsYXRvci5Qcm90b1JvYm90",
            "LkRyaXZldHJhaW5UeXBlIjMKDkRyaXZldHJhaW5UeXBlEggKBFRhbmsQABIK",
            "CgZTd2VydmUQARILCgdOb0RyaXZlEAIiTgoKUHJvdG9GaWVsZBIRCglGaWVs",
            "ZE5hbWUYASABKAkSLQoFbm9kZXMYAiADKAsyHi5TeW50aGVzaXMuU2ltdWxh",
            "dG9yLlByb3RvTm9kZSKuAgoJUHJvdG9Ob2RlEhEKCWlzRHluYW1pYxgBIAEo",
            "CBIOCgZub2RlSUQYAiABKAUSEgoKcGFyZW50Tm9kZRgDIAEoBRIMCgRtYXNz",
            "GAQgASgCEjcKDGNlbnRlck9mTWFzcxgFIAEoCzIhLlN5bnRoZXNpcy5TaW11",
            "bGF0b3IuUHJvdG9WZWN0b3IzEjMKCHBvc2l0aW9uGAYgASgLMiEuU3ludGhl",
            "c2lzLlNpbXVsYXRvci5Qcm90b1ZlY3RvcjMSMAoGYm9kaWVzGAcgAygLMiAu",
            "U3ludGhlc2lzLlNpbXVsYXRvci5Qcm90b09iamVjdBIMCgRuYW1lGAggASgJ",
            "Ei4KBmpvaW50cxgJIAMoCzIeLlN5bnRoZXNpcy5TaW11bGF0b3IuSm9pbnRJ",
            "bmZvIrEBCgtQcm90b09iamVjdBIzCghwb3NpdGlvbhgBIAEoCzIhLlN5bnRo",
            "ZXNpcy5TaW11bGF0b3IuUHJvdG9WZWN0b3IzEjAKBXZlcnRzGAIgAygLMiEu",
            "U3ludGhlc2lzLlNpbXVsYXRvci5Qcm90b1ZlY3RvcjMSDAoEdHJpcxgDIAMo",
            "BRItCgJ1dhgEIAMoCzIhLlN5bnRoZXNpcy5TaW11bGF0b3IuUHJvdG9WZWN0",
            "b3IyItsBCglKb2ludEluZm8SLAoEdHlwZRgBIAEoDjIeLlN5bnRoZXNpcy5T",
            "aW11bGF0b3IuSm9pbnRUeXBlEjQKCWRpcmVjdGlvbhgCIAEoCzIhLlN5bnRo",
            "ZXNpcy5TaW11bGF0b3IuUHJvdG9WZWN0b3IzEjEKBm9yaWdpbhgDIAEoCzIh",
            "LlN5bnRoZXNpcy5TaW11bGF0b3IuUHJvdG9WZWN0b3IzEhAKCHBvc0xpbWl0",
            "GAQgASgCEhAKCG5lZ0xpbWl0GAUgASgCEhMKC2NvbXBhbmlvbklEGAYgASgF",
            "Ii8KDFByb3RvVmVjdG9yMxIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgD",
            "IAEoAiIkCgxQcm90b1ZlY3RvcjISCQoBeBgBIAEoAhIJCgF5GAIgASgCKjkK",
            "CUpvaW50VHlwZRILCgdOb0pvaW50EAASCQoFRml4ZWQQARIJCgVIaW5nZRAC",
            "EgkKBVNsaWRlEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Synthesis.Simulator.JointType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Simulator.ProtoRobot), global::Synthesis.Simulator.ProtoRobot.Parser, new[]{ "RobotName", "Position", "Nodes", "DriveType" }, null, new[]{ typeof(global::Synthesis.Simulator.ProtoRobot.Types.DrivetrainType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Simulator.ProtoField), global::Synthesis.Simulator.ProtoField.Parser, new[]{ "FieldName", "Nodes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Simulator.ProtoNode), global::Synthesis.Simulator.ProtoNode.Parser, new[]{ "IsDynamic", "NodeID", "ParentNode", "Mass", "CenterOfMass", "Position", "Bodies", "Name", "Joints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Simulator.ProtoObject), global::Synthesis.Simulator.ProtoObject.Parser, new[]{ "Position", "Verts", "Tris", "Uv" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Simulator.JointInfo), global::Synthesis.Simulator.JointInfo.Parser, new[]{ "Type", "Direction", "Origin", "PosLimit", "NegLimit", "CompanionID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Simulator.ProtoVector3), global::Synthesis.Simulator.ProtoVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Synthesis.Simulator.ProtoVector2), global::Synthesis.Simulator.ProtoVector2.Parser, new[]{ "X", "Y" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum JointType {
    [pbr::OriginalName("NoJoint")] NoJoint = 0,
    [pbr::OriginalName("Fixed")] Fixed = 1,
    [pbr::OriginalName("Hinge")] Hinge = 2,
    [pbr::OriginalName("Slide")] Slide = 3,
  }

  #endregion

  #region Messages
  public sealed partial class ProtoRobot : pb::IMessage<ProtoRobot> {
    private static readonly pb::MessageParser<ProtoRobot> _parser = new pb::MessageParser<ProtoRobot>(() => new ProtoRobot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoRobot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Simulator.ProtoRobotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoRobot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoRobot(ProtoRobot other) : this() {
      robotName_ = other.robotName_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      nodes_ = other.nodes_.Clone();
      driveType_ = other.driveType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoRobot Clone() {
      return new ProtoRobot(this);
    }

    /// <summary>Field number for the "robotName" field.</summary>
    public const int RobotNameFieldNumber = 1;
    private string robotName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotName {
      get { return robotName_; }
      set {
        robotName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Synthesis.Simulator.ProtoVector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Simulator.ProtoVector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Synthesis.Simulator.ProtoNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(26, global::Synthesis.Simulator.ProtoNode.Parser);
    private readonly pbc::RepeatedField<global::Synthesis.Simulator.ProtoNode> nodes_ = new pbc::RepeatedField<global::Synthesis.Simulator.ProtoNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Synthesis.Simulator.ProtoNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "driveType" field.</summary>
    public const int DriveTypeFieldNumber = 4;
    private global::Synthesis.Simulator.ProtoRobot.Types.DrivetrainType driveType_ = global::Synthesis.Simulator.ProtoRobot.Types.DrivetrainType.Tank;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Simulator.ProtoRobot.Types.DrivetrainType DriveType {
      get { return driveType_; }
      set {
        driveType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoRobot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoRobot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RobotName != other.RobotName) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if (DriveType != other.DriveType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RobotName.Length != 0) hash ^= RobotName.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      hash ^= nodes_.GetHashCode();
      if (DriveType != global::Synthesis.Simulator.ProtoRobot.Types.DrivetrainType.Tank) hash ^= DriveType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RobotName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RobotName);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (DriveType != global::Synthesis.Simulator.ProtoRobot.Types.DrivetrainType.Tank) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DriveType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RobotName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotName);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (DriveType != global::Synthesis.Simulator.ProtoRobot.Types.DrivetrainType.Tank) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DriveType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoRobot other) {
      if (other == null) {
        return;
      }
      if (other.RobotName.Length != 0) {
        RobotName = other.RobotName;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Synthesis.Simulator.ProtoVector3();
        }
        Position.MergeFrom(other.Position);
      }
      nodes_.Add(other.nodes_);
      if (other.DriveType != global::Synthesis.Simulator.ProtoRobot.Types.DrivetrainType.Tank) {
        DriveType = other.DriveType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RobotName = input.ReadString();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Synthesis.Simulator.ProtoVector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 32: {
            DriveType = (global::Synthesis.Simulator.ProtoRobot.Types.DrivetrainType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ProtoRobot message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DrivetrainType {
        [pbr::OriginalName("Tank")] Tank = 0,
        [pbr::OriginalName("Swerve")] Swerve = 1,
        [pbr::OriginalName("NoDrive")] NoDrive = 2,
      }

    }
    #endregion

  }

  public sealed partial class ProtoField : pb::IMessage<ProtoField> {
    private static readonly pb::MessageParser<ProtoField> _parser = new pb::MessageParser<ProtoField>(() => new ProtoField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Simulator.ProtoRobotReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoField(ProtoField other) : this() {
      fieldName_ = other.fieldName_;
      nodes_ = other.nodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoField Clone() {
      return new ProtoField(this);
    }

    /// <summary>Field number for the "FieldName" field.</summary>
    public const int FieldNameFieldNumber = 1;
    private string fieldName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldName {
      get { return fieldName_; }
      set {
        fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Synthesis.Simulator.ProtoNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(18, global::Synthesis.Simulator.ProtoNode.Parser);
    private readonly pbc::RepeatedField<global::Synthesis.Simulator.ProtoNode> nodes_ = new pbc::RepeatedField<global::Synthesis.Simulator.ProtoNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Synthesis.Simulator.ProtoNode> Nodes {
      get { return nodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldName != other.FieldName) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
      hash ^= nodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FieldName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FieldName);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FieldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoField other) {
      if (other == null) {
        return;
      }
      if (other.FieldName.Length != 0) {
        FieldName = other.FieldName;
      }
      nodes_.Add(other.nodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FieldName = input.ReadString();
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoNode : pb::IMessage<ProtoNode> {
    private static readonly pb::MessageParser<ProtoNode> _parser = new pb::MessageParser<ProtoNode>(() => new ProtoNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Simulator.ProtoRobotReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoNode(ProtoNode other) : this() {
      isDynamic_ = other.isDynamic_;
      nodeID_ = other.nodeID_;
      parentNode_ = other.parentNode_;
      mass_ = other.mass_;
      centerOfMass_ = other.centerOfMass_ != null ? other.centerOfMass_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      bodies_ = other.bodies_.Clone();
      name_ = other.name_;
      joints_ = other.joints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoNode Clone() {
      return new ProtoNode(this);
    }

    /// <summary>Field number for the "isDynamic" field.</summary>
    public const int IsDynamicFieldNumber = 1;
    private bool isDynamic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDynamic {
      get { return isDynamic_; }
      set {
        isDynamic_ = value;
      }
    }

    /// <summary>Field number for the "nodeID" field.</summary>
    public const int NodeIDFieldNumber = 2;
    private int nodeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeID {
      get { return nodeID_; }
      set {
        nodeID_ = value;
      }
    }

    /// <summary>Field number for the "parentNode" field.</summary>
    public const int ParentNodeFieldNumber = 3;
    private int parentNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentNode {
      get { return parentNode_; }
      set {
        parentNode_ = value;
      }
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 4;
    private float mass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mass {
      get { return mass_; }
      set {
        mass_ = value;
      }
    }

    /// <summary>Field number for the "centerOfMass" field.</summary>
    public const int CenterOfMassFieldNumber = 5;
    private global::Synthesis.Simulator.ProtoVector3 centerOfMass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Simulator.ProtoVector3 CenterOfMass {
      get { return centerOfMass_; }
      set {
        centerOfMass_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::Synthesis.Simulator.ProtoVector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Simulator.ProtoVector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "bodies" field.</summary>
    public const int BodiesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Synthesis.Simulator.ProtoObject> _repeated_bodies_codec
        = pb::FieldCodec.ForMessage(58, global::Synthesis.Simulator.ProtoObject.Parser);
    private readonly pbc::RepeatedField<global::Synthesis.Simulator.ProtoObject> bodies_ = new pbc::RepeatedField<global::Synthesis.Simulator.ProtoObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Synthesis.Simulator.ProtoObject> Bodies {
      get { return bodies_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 8;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joints" field.</summary>
    public const int JointsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Synthesis.Simulator.JointInfo> _repeated_joints_codec
        = pb::FieldCodec.ForMessage(74, global::Synthesis.Simulator.JointInfo.Parser);
    private readonly pbc::RepeatedField<global::Synthesis.Simulator.JointInfo> joints_ = new pbc::RepeatedField<global::Synthesis.Simulator.JointInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Synthesis.Simulator.JointInfo> Joints {
      get { return joints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsDynamic != other.IsDynamic) return false;
      if (NodeID != other.NodeID) return false;
      if (ParentNode != other.ParentNode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mass, other.Mass)) return false;
      if (!object.Equals(CenterOfMass, other.CenterOfMass)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if(!bodies_.Equals(other.bodies_)) return false;
      if (Name != other.Name) return false;
      if(!joints_.Equals(other.joints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsDynamic != false) hash ^= IsDynamic.GetHashCode();
      if (NodeID != 0) hash ^= NodeID.GetHashCode();
      if (ParentNode != 0) hash ^= ParentNode.GetHashCode();
      if (Mass != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mass);
      if (centerOfMass_ != null) hash ^= CenterOfMass.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      hash ^= bodies_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= joints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsDynamic != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsDynamic);
      }
      if (NodeID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NodeID);
      }
      if (ParentNode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ParentNode);
      }
      if (Mass != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Mass);
      }
      if (centerOfMass_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CenterOfMass);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      bodies_.WriteTo(output, _repeated_bodies_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Name);
      }
      joints_.WriteTo(output, _repeated_joints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsDynamic != false) {
        size += 1 + 1;
      }
      if (NodeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeID);
      }
      if (ParentNode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentNode);
      }
      if (Mass != 0F) {
        size += 1 + 4;
      }
      if (centerOfMass_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterOfMass);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      size += bodies_.CalculateSize(_repeated_bodies_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += joints_.CalculateSize(_repeated_joints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoNode other) {
      if (other == null) {
        return;
      }
      if (other.IsDynamic != false) {
        IsDynamic = other.IsDynamic;
      }
      if (other.NodeID != 0) {
        NodeID = other.NodeID;
      }
      if (other.ParentNode != 0) {
        ParentNode = other.ParentNode;
      }
      if (other.Mass != 0F) {
        Mass = other.Mass;
      }
      if (other.centerOfMass_ != null) {
        if (centerOfMass_ == null) {
          CenterOfMass = new global::Synthesis.Simulator.ProtoVector3();
        }
        CenterOfMass.MergeFrom(other.CenterOfMass);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Synthesis.Simulator.ProtoVector3();
        }
        Position.MergeFrom(other.Position);
      }
      bodies_.Add(other.bodies_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      joints_.Add(other.joints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsDynamic = input.ReadBool();
            break;
          }
          case 16: {
            NodeID = input.ReadInt32();
            break;
          }
          case 24: {
            ParentNode = input.ReadInt32();
            break;
          }
          case 37: {
            Mass = input.ReadFloat();
            break;
          }
          case 42: {
            if (centerOfMass_ == null) {
              CenterOfMass = new global::Synthesis.Simulator.ProtoVector3();
            }
            input.ReadMessage(CenterOfMass);
            break;
          }
          case 50: {
            if (position_ == null) {
              Position = new global::Synthesis.Simulator.ProtoVector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 58: {
            bodies_.AddEntriesFrom(input, _repeated_bodies_codec);
            break;
          }
          case 66: {
            Name = input.ReadString();
            break;
          }
          case 74: {
            joints_.AddEntriesFrom(input, _repeated_joints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoObject : pb::IMessage<ProtoObject> {
    private static readonly pb::MessageParser<ProtoObject> _parser = new pb::MessageParser<ProtoObject>(() => new ProtoObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Simulator.ProtoRobotReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoObject(ProtoObject other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      verts_ = other.verts_.Clone();
      tris_ = other.tris_.Clone();
      uv_ = other.uv_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoObject Clone() {
      return new ProtoObject(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Synthesis.Simulator.ProtoVector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Simulator.ProtoVector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "verts" field.</summary>
    public const int VertsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Synthesis.Simulator.ProtoVector3> _repeated_verts_codec
        = pb::FieldCodec.ForMessage(18, global::Synthesis.Simulator.ProtoVector3.Parser);
    private readonly pbc::RepeatedField<global::Synthesis.Simulator.ProtoVector3> verts_ = new pbc::RepeatedField<global::Synthesis.Simulator.ProtoVector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Synthesis.Simulator.ProtoVector3> Verts {
      get { return verts_; }
    }

    /// <summary>Field number for the "tris" field.</summary>
    public const int TrisFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_tris_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> tris_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Tris {
      get { return tris_; }
    }

    /// <summary>Field number for the "uv" field.</summary>
    public const int UvFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Synthesis.Simulator.ProtoVector2> _repeated_uv_codec
        = pb::FieldCodec.ForMessage(34, global::Synthesis.Simulator.ProtoVector2.Parser);
    private readonly pbc::RepeatedField<global::Synthesis.Simulator.ProtoVector2> uv_ = new pbc::RepeatedField<global::Synthesis.Simulator.ProtoVector2>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Synthesis.Simulator.ProtoVector2> Uv {
      get { return uv_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if(!verts_.Equals(other.verts_)) return false;
      if(!tris_.Equals(other.tris_)) return false;
      if(!uv_.Equals(other.uv_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      hash ^= verts_.GetHashCode();
      hash ^= tris_.GetHashCode();
      hash ^= uv_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      verts_.WriteTo(output, _repeated_verts_codec);
      tris_.WriteTo(output, _repeated_tris_codec);
      uv_.WriteTo(output, _repeated_uv_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      size += verts_.CalculateSize(_repeated_verts_codec);
      size += tris_.CalculateSize(_repeated_tris_codec);
      size += uv_.CalculateSize(_repeated_uv_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoObject other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Synthesis.Simulator.ProtoVector3();
        }
        Position.MergeFrom(other.Position);
      }
      verts_.Add(other.verts_);
      tris_.Add(other.tris_);
      uv_.Add(other.uv_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Synthesis.Simulator.ProtoVector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            verts_.AddEntriesFrom(input, _repeated_verts_codec);
            break;
          }
          case 26:
          case 24: {
            tris_.AddEntriesFrom(input, _repeated_tris_codec);
            break;
          }
          case 34: {
            uv_.AddEntriesFrom(input, _repeated_uv_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class JointInfo : pb::IMessage<JointInfo> {
    private static readonly pb::MessageParser<JointInfo> _parser = new pb::MessageParser<JointInfo>(() => new JointInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JointInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Simulator.ProtoRobotReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointInfo(JointInfo other) : this() {
      type_ = other.type_;
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      posLimit_ = other.posLimit_;
      negLimit_ = other.negLimit_;
      companionID_ = other.companionID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JointInfo Clone() {
      return new JointInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Synthesis.Simulator.JointType type_ = global::Synthesis.Simulator.JointType.NoJoint;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Simulator.JointType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private global::Synthesis.Simulator.ProtoVector3 direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Simulator.ProtoVector3 Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 3;
    private global::Synthesis.Simulator.ProtoVector3 origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Synthesis.Simulator.ProtoVector3 Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "posLimit" field.</summary>
    public const int PosLimitFieldNumber = 4;
    private float posLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosLimit {
      get { return posLimit_; }
      set {
        posLimit_ = value;
      }
    }

    /// <summary>Field number for the "negLimit" field.</summary>
    public const int NegLimitFieldNumber = 5;
    private float negLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NegLimit {
      get { return negLimit_; }
      set {
        negLimit_ = value;
      }
    }

    /// <summary>Field number for the "companionID" field.</summary>
    public const int CompanionIDFieldNumber = 6;
    private int companionID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompanionID {
      get { return companionID_; }
      set {
        companionID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JointInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JointInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosLimit, other.PosLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NegLimit, other.NegLimit)) return false;
      if (CompanionID != other.CompanionID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Synthesis.Simulator.JointType.NoJoint) hash ^= Type.GetHashCode();
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (PosLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosLimit);
      if (NegLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NegLimit);
      if (CompanionID != 0) hash ^= CompanionID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Synthesis.Simulator.JointType.NoJoint) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (direction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Direction);
      }
      if (origin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Origin);
      }
      if (PosLimit != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosLimit);
      }
      if (NegLimit != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(NegLimit);
      }
      if (CompanionID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CompanionID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Synthesis.Simulator.JointType.NoJoint) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (PosLimit != 0F) {
        size += 1 + 4;
      }
      if (NegLimit != 0F) {
        size += 1 + 4;
      }
      if (CompanionID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompanionID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JointInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Synthesis.Simulator.JointType.NoJoint) {
        Type = other.Type;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::Synthesis.Simulator.ProtoVector3();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::Synthesis.Simulator.ProtoVector3();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.PosLimit != 0F) {
        PosLimit = other.PosLimit;
      }
      if (other.NegLimit != 0F) {
        NegLimit = other.NegLimit;
      }
      if (other.CompanionID != 0) {
        CompanionID = other.CompanionID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Synthesis.Simulator.JointType) input.ReadEnum();
            break;
          }
          case 18: {
            if (direction_ == null) {
              Direction = new global::Synthesis.Simulator.ProtoVector3();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 26: {
            if (origin_ == null) {
              Origin = new global::Synthesis.Simulator.ProtoVector3();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 37: {
            PosLimit = input.ReadFloat();
            break;
          }
          case 45: {
            NegLimit = input.ReadFloat();
            break;
          }
          case 48: {
            CompanionID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoVector3 : pb::IMessage<ProtoVector3> {
    private static readonly pb::MessageParser<ProtoVector3> _parser = new pb::MessageParser<ProtoVector3>(() => new ProtoVector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Simulator.ProtoRobotReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoVector3(ProtoVector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoVector3 Clone() {
      return new ProtoVector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoVector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtoVector2 : pb::IMessage<ProtoVector2> {
    private static readonly pb::MessageParser<ProtoVector2> _parser = new pb::MessageParser<ProtoVector2>(() => new ProtoVector2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoVector2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Synthesis.Simulator.ProtoRobotReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoVector2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoVector2(ProtoVector2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoVector2 Clone() {
      return new ProtoVector2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoVector2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoVector2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoVector2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
